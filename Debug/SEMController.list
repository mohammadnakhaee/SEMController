
SEMController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b684  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  0800b84c  0800b84c  0001b84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800bd54  0800bd54  0001bd54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800bd58  0800bd58  0001bd58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f8  20000000  0800bd5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00010198  200001f8  0800bf54  000201f8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20010390  0800bf54  00020390  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
  9 .debug_info   0004aaa3  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000887c  00000000  00000000  0006accb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00016380  00000000  00000000  00073547  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001780  00000000  00000000  000898c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002ae0  00000000  00000000  0008b048  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00012723  00000000  00000000  0008db28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00008f08  00000000  00000000  000a024b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000a9153  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004bcc  00000000  00000000  000a91d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001f8 	.word	0x200001f8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800b834 	.word	0x0800b834

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001fc 	.word	0x200001fc
 8000204:	0800b834 	.word	0x0800b834

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f092 0f00 	teq	r2, #0
 8000502:	bf14      	ite	ne
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e720      	b.n	800035c <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aedc 	beq.w	800030a <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6c1      	b.n	800030a <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <HAL_InitTick+0x24>)
{
 8000a4e:	b510      	push	{r4, lr}
 8000a50:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000a52:	6818      	ldr	r0, [r3, #0]
 8000a54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a58:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a5c:	f000 fb64 	bl	8001128 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	4621      	mov	r1, r4
 8000a64:	f04f 30ff 	mov.w	r0, #4294967295
 8000a68:	f000 fb1a 	bl	80010a0 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	bd10      	pop	{r4, pc}
 8000a70:	20000024 	.word	0x20000024

08000a74 <HAL_Init>:
{
 8000a74:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a76:	2003      	movs	r0, #3
 8000a78:	f000 fb00 	bl	800107c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f7ff ffe5 	bl	8000a4c <HAL_InitTick>
  HAL_MspInit();
 8000a82:	f009 f8e7 	bl	8009c54 <HAL_MspInit>
}
 8000a86:	2000      	movs	r0, #0
 8000a88:	bd08      	pop	{r3, pc}
	...

08000a8c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000a8c:	4a02      	ldr	r2, [pc, #8]	; (8000a98 <HAL_IncTick+0xc>)
 8000a8e:	6813      	ldr	r3, [r2, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	200003f4 	.word	0x200003f4

08000a9c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a9c:	4b01      	ldr	r3, [pc, #4]	; (8000aa4 <HAL_GetTick+0x8>)
 8000a9e:	6818      	ldr	r0, [r3, #0]
}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	200003f4 	.word	0x200003f4

08000aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000aa8:	b513      	push	{r0, r1, r4, lr}
 8000aaa:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000aac:	f7ff fff6 	bl	8000a9c <HAL_GetTick>
 8000ab0:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000ab2:	f7ff fff3 	bl	8000a9c <HAL_GetTick>
 8000ab6:	9b01      	ldr	r3, [sp, #4]
 8000ab8:	1b00      	subs	r0, r0, r4
 8000aba:	4298      	cmp	r0, r3
 8000abc:	d3f9      	bcc.n	8000ab2 <HAL_Delay+0xa>
  {
  }
}
 8000abe:	b002      	add	sp, #8
 8000ac0:	bd10      	pop	{r4, pc}
	...

08000ac4 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ac4:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ac6:	4604      	mov	r4, r0
 8000ac8:	2800      	cmp	r0, #0
 8000aca:	f000 809f 	beq.w	8000c0c <HAL_ADC_Init+0x148>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000ace:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000ad0:	b923      	cbnz	r3, 8000adc <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ad2:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ad4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ad8:	f009 f8ec 	bl	8009cb4 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000adc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ade:	06db      	lsls	r3, r3, #27
 8000ae0:	f100 8092 	bmi.w	8000c08 <HAL_ADC_Init+0x144>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ae4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ae6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000aea:	f023 0302 	bic.w	r3, r3, #2
 8000aee:	f043 0302 	orr.w	r3, r3, #2
 8000af2:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000af4:	4b46      	ldr	r3, [pc, #280]	; (8000c10 <HAL_ADC_Init+0x14c>)
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000afc:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000afe:	685a      	ldr	r2, [r3, #4]
 8000b00:	6861      	ldr	r1, [r4, #4]
 8000b02:	430a      	orrs	r2, r1
 8000b04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000b06:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000b08:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000b0a:	685a      	ldr	r2, [r3, #4]
 8000b0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000b12:	685a      	ldr	r2, [r3, #4]
 8000b14:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000b18:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000b1a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000b1c:	685a      	ldr	r2, [r3, #4]
 8000b1e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000b22:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000b24:	685a      	ldr	r2, [r3, #4]
 8000b26:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000b28:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000b2a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000b2c:	689a      	ldr	r2, [r3, #8]
 8000b2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000b34:	689a      	ldr	r2, [r3, #8]
 8000b36:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b38:	4936      	ldr	r1, [pc, #216]	; (8000c14 <HAL_ADC_Init+0x150>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000b3a:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b3c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000b3e:	428a      	cmp	r2, r1
 8000b40:	d056      	beq.n	8000bf0 <HAL_ADC_Init+0x12c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000b42:	6899      	ldr	r1, [r3, #8]
 8000b44:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000b48:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000b4a:	6899      	ldr	r1, [r3, #8]
 8000b4c:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000b4e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000b50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000b52:	689a      	ldr	r2, [r3, #8]
 8000b54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000b58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000b5a:	689a      	ldr	r2, [r3, #8]
 8000b5c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000b5e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000b60:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000b62:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000b64:	f022 0202 	bic.w	r2, r2, #2
 8000b68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000b6a:	689a      	ldr	r2, [r3, #8]
 8000b6c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000b70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000b72:	6a22      	ldr	r2, [r4, #32]
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	d043      	beq.n	8000c00 <HAL_ADC_Init+0x13c>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000b78:	685a      	ldr	r2, [r3, #4]
 8000b7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000b7e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000b80:	685a      	ldr	r2, [r3, #4]
 8000b82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000b86:	605a      	str	r2, [r3, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b88:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000b8c:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000b90:	fab2 f182 	clz	r1, r2
 8000b94:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b96:	6858      	ldr	r0, [r3, #4]
 8000b98:	3a01      	subs	r2, #1
 8000b9a:	408a      	lsls	r2, r1
 8000b9c:	4302      	orrs	r2, r0
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000b9e:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 8000ba0:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000ba4:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ba6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000baa:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000bac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bb0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000bb4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000bb8:	689a      	ldr	r2, [r3, #8]
 8000bba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000bbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000bc0:	689a      	ldr	r2, [r3, #8]
 8000bc2:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000bc6:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000bc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000bca:	689a      	ldr	r2, [r3, #8]
 8000bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000bd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000bd2:	689a      	ldr	r2, [r3, #8]
 8000bd4:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000bd8:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000bda:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000bdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bde:	f023 0303 	bic.w	r3, r3, #3
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000be8:	2300      	movs	r3, #0
 8000bea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000bee:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000bf0:	689a      	ldr	r2, [r3, #8]
 8000bf2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000bf6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000bf8:	689a      	ldr	r2, [r3, #8]
 8000bfa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000bfe:	e7ae      	b.n	8000b5e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c06:	e7ca      	b.n	8000b9e <HAL_ADC_Init+0xda>
    tmp_hal_status = HAL_ERROR;
 8000c08:	2001      	movs	r0, #1
 8000c0a:	e7ed      	b.n	8000be8 <HAL_ADC_Init+0x124>
    return HAL_ERROR;
 8000c0c:	2001      	movs	r0, #1
}
 8000c0e:	bd10      	pop	{r4, pc}
 8000c10:	40012300 	.word	0x40012300
 8000c14:	0f000001 	.word	0x0f000001

08000c18 <HAL_ADC_Start_IT>:
  __IO uint32_t counter = 0;
 8000c18:	2300      	movs	r3, #0
{
 8000c1a:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8000c1c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000c1e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d054      	beq.n	8000cd0 <HAL_ADC_Start_IT+0xb8>
 8000c26:	2301      	movs	r3, #1
 8000c28:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000c2c:	6803      	ldr	r3, [r0, #0]
 8000c2e:	689a      	ldr	r2, [r3, #8]
 8000c30:	07d1      	lsls	r1, r2, #31
 8000c32:	d505      	bpl.n	8000c40 <HAL_ADC_Start_IT+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	07d2      	lsls	r2, r2, #31
 8000c38:	d414      	bmi.n	8000c64 <HAL_ADC_Start_IT+0x4c>
  return HAL_OK;
 8000c3a:	2000      	movs	r0, #0
}
 8000c3c:	b002      	add	sp, #8
 8000c3e:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8000c40:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000c42:	4924      	ldr	r1, [pc, #144]	; (8000cd4 <HAL_ADC_Start_IT+0xbc>)
    __HAL_ADC_ENABLE(hadc);
 8000c44:	f042 0201 	orr.w	r2, r2, #1
 8000c48:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000c4a:	4a23      	ldr	r2, [pc, #140]	; (8000cd8 <HAL_ADC_Start_IT+0xc0>)
 8000c4c:	6812      	ldr	r2, [r2, #0]
 8000c4e:	fbb2 f2f1 	udiv	r2, r2, r1
 8000c52:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8000c56:	9201      	str	r2, [sp, #4]
    while(counter != 0)
 8000c58:	9a01      	ldr	r2, [sp, #4]
 8000c5a:	2a00      	cmp	r2, #0
 8000c5c:	d0ea      	beq.n	8000c34 <HAL_ADC_Start_IT+0x1c>
      counter--;
 8000c5e:	9a01      	ldr	r2, [sp, #4]
 8000c60:	3a01      	subs	r2, #1
 8000c62:	e7f8      	b.n	8000c56 <HAL_ADC_Start_IT+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8000c64:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000c66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000c6a:	f022 0201 	bic.w	r2, r2, #1
 8000c6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c72:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c74:	685a      	ldr	r2, [r3, #4]
 8000c76:	0551      	lsls	r1, r2, #21
 8000c78:	d505      	bpl.n	8000c86 <HAL_ADC_Start_IT+0x6e>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c7a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000c7c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000c80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000c84:	6402      	str	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c86:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000c88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000c8c:	d002      	beq.n	8000c94 <HAL_ADC_Start_IT+0x7c>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c8e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000c90:	f022 0206 	bic.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000c94:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000c9c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000ca0:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000ca8:	f042 0220 	orr.w	r2, r2, #32
 8000cac:	605a      	str	r2, [r3, #4]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000cae:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <HAL_ADC_Start_IT+0xc4>)
 8000cb0:	6852      	ldr	r2, [r2, #4]
 8000cb2:	06d2      	lsls	r2, r2, #27
 8000cb4:	d108      	bne.n	8000cc8 <HAL_ADC_Start_IT+0xb0>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000cb6:	6898      	ldr	r0, [r3, #8]
 8000cb8:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000cbc:	d1bd      	bne.n	8000c3a <HAL_ADC_Start_IT+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	e7b9      	b.n	8000c3c <HAL_ADC_Start_IT+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000cc8:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <HAL_ADC_Start_IT+0xc8>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d1b5      	bne.n	8000c3a <HAL_ADC_Start_IT+0x22>
 8000cce:	e7f2      	b.n	8000cb6 <HAL_ADC_Start_IT+0x9e>
  __HAL_LOCK(hadc);
 8000cd0:	2002      	movs	r0, #2
 8000cd2:	e7b3      	b.n	8000c3c <HAL_ADC_Start_IT+0x24>
 8000cd4:	000f4240 	.word	0x000f4240
 8000cd8:	20000024 	.word	0x20000024
 8000cdc:	40012300 	.word	0x40012300
 8000ce0:	40012000 	.word	0x40012000

08000ce4 <HAL_ADC_LevelOutOfWindowCallback>:
 8000ce4:	4770      	bx	lr

08000ce6 <HAL_ADC_IRQHandler>:
{
 8000ce6:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000ce8:	6803      	ldr	r3, [r0, #0]
{
 8000cea:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000cec:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000cee:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000cf0:	078d      	lsls	r5, r1, #30
 8000cf2:	d52b      	bpl.n	8000d4c <HAL_ADC_IRQHandler+0x66>
 8000cf4:	0690      	lsls	r0, r2, #26
 8000cf6:	d529      	bpl.n	8000d4c <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cf8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000cfa:	06d1      	lsls	r1, r2, #27
 8000cfc:	d403      	bmi.n	8000d06 <HAL_ADC_IRQHandler+0x20>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000cfe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d04:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000d0c:	d117      	bne.n	8000d3e <HAL_ADC_IRQHandler+0x58>
 8000d0e:	69a2      	ldr	r2, [r4, #24]
 8000d10:	b9aa      	cbnz	r2, 8000d3e <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d14:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8000d18:	d002      	beq.n	8000d20 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000d1a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000d1c:	0552      	lsls	r2, r2, #21
 8000d1e:	d40e      	bmi.n	8000d3e <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	f022 0220 	bic.w	r2, r2, #32
 8000d26:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000d28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d2e:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d32:	04db      	lsls	r3, r3, #19
 8000d34:	d403      	bmi.n	8000d3e <HAL_ADC_IRQHandler+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8000d3e:	4620      	mov	r0, r4
 8000d40:	f008 f988 	bl	8009054 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000d44:	6823      	ldr	r3, [r4, #0]
 8000d46:	f06f 0212 	mvn.w	r2, #18
 8000d4a:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8000d4c:	6823      	ldr	r3, [r4, #0]
 8000d4e:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000d50:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000d52:	074d      	lsls	r5, r1, #29
 8000d54:	d532      	bpl.n	8000dbc <HAL_ADC_IRQHandler+0xd6>
 8000d56:	0610      	lsls	r0, r2, #24
 8000d58:	d530      	bpl.n	8000dbc <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d5a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d5c:	06d1      	lsls	r1, r2, #27
 8000d5e:	d403      	bmi.n	8000d68 <HAL_ADC_IRQHandler+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000d60:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000d66:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000d68:	689a      	ldr	r2, [r3, #8]
 8000d6a:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000d6e:	d11e      	bne.n	8000dae <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8000d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000d72:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000d76:	d002      	beq.n	8000d7e <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000d78:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8000d7a:	0552      	lsls	r2, r2, #21
 8000d7c:	d417      	bmi.n	8000dae <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000d7e:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000d80:	0555      	lsls	r5, r2, #21
 8000d82:	d414      	bmi.n	8000dae <HAL_ADC_IRQHandler+0xc8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8000d84:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000d86:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000d8a:	d110      	bne.n	8000dae <HAL_ADC_IRQHandler+0xc8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8000d8c:	69a2      	ldr	r2, [r4, #24]
 8000d8e:	b972      	cbnz	r2, 8000dae <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d96:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000d98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d9e:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000da0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000da2:	05d8      	lsls	r0, r3, #23
 8000da4:	d403      	bmi.n	8000dae <HAL_ADC_IRQHandler+0xc8>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000da6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000dae:	4620      	mov	r0, r4
 8000db0:	f000 f8ce 	bl	8000f50 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000db4:	6823      	ldr	r3, [r4, #0]
 8000db6:	f06f 020c 	mvn.w	r2, #12
 8000dba:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000dbc:	6823      	ldr	r3, [r4, #0]
 8000dbe:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000dc0:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000dc2:	07c9      	lsls	r1, r1, #31
 8000dc4:	d50f      	bpl.n	8000de6 <HAL_ADC_IRQHandler+0x100>
 8000dc6:	0655      	lsls	r5, r2, #25
 8000dc8:	d50d      	bpl.n	8000de6 <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	07d8      	lsls	r0, r3, #31
 8000dce:	d50a      	bpl.n	8000de6 <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000dd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000dd2:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd8:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000dda:	f7ff ff83 	bl	8000ce4 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000dde:	6823      	ldr	r3, [r4, #0]
 8000de0:	f06f 0201 	mvn.w	r2, #1
 8000de4:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8000de6:	6823      	ldr	r3, [r4, #0]
 8000de8:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8000dea:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000dec:	0689      	lsls	r1, r1, #26
 8000dee:	d50d      	bpl.n	8000e0c <HAL_ADC_IRQHandler+0x126>
 8000df0:	0152      	lsls	r2, r2, #5
 8000df2:	d50b      	bpl.n	8000e0c <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000df4:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000df6:	f06f 0520 	mvn.w	r5, #32
    HAL_ADC_ErrorCallback(hadc);
 8000dfa:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000dfc:	f042 0202 	orr.w	r2, r2, #2
 8000e00:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000e02:	601d      	str	r5, [r3, #0]
    HAL_ADC_ErrorCallback(hadc);
 8000e04:	f008 f928 	bl	8009058 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000e08:	6823      	ldr	r3, [r4, #0]
 8000e0a:	601d      	str	r5, [r3, #0]
 8000e0c:	bd38      	pop	{r3, r4, r5, pc}
	...

08000e10 <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 8000e10:	2300      	movs	r3, #0
{
 8000e12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8000e14:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000e16:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d071      	beq.n	8000f02 <HAL_ADC_ConfigChannel+0xf2>
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000e1e:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8000e20:	2301      	movs	r3, #1
 8000e22:	6804      	ldr	r4, [r0, #0]
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000e24:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000e26:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000e2a:	b2ae      	uxth	r6, r5
 8000e2c:	688a      	ldr	r2, [r1, #8]
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000e2e:	d931      	bls.n	8000e94 <HAL_ADC_ConfigChannel+0x84>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000e30:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000e34:	f04f 0e07 	mov.w	lr, #7
 8000e38:	68e7      	ldr	r7, [r4, #12]
 8000e3a:	3b1e      	subs	r3, #30
 8000e3c:	fa0e fe03 	lsl.w	lr, lr, r3
 8000e40:	ea27 070e 	bic.w	r7, r7, lr
 8000e44:	60e7      	str	r7, [r4, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e46:	4f3d      	ldr	r7, [pc, #244]	; (8000f3c <HAL_ADC_ConfigChannel+0x12c>)
 8000e48:	42bd      	cmp	r5, r7
 8000e4a:	d11e      	bne.n	8000e8a <HAL_ADC_ConfigChannel+0x7a>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000e4c:	68e3      	ldr	r3, [r4, #12]
 8000e4e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000e52:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7)
 8000e54:	684a      	ldr	r2, [r1, #4]
 8000e56:	2a06      	cmp	r2, #6
 8000e58:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000e5c:	d82a      	bhi.n	8000eb4 <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000e5e:	4413      	add	r3, r2
 8000e60:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000e62:	1f59      	subs	r1, r3, #5
 8000e64:	231f      	movs	r3, #31
 8000e66:	408b      	lsls	r3, r1
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000e68:	fa06 f101 	lsl.w	r1, r6, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000e6c:	ea27 0303 	bic.w	r3, r7, r3
 8000e70:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000e72:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000e74:	4311      	orrs	r1, r2
 8000e76:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000e78:	4b31      	ldr	r3, [pc, #196]	; (8000f40 <HAL_ADC_ConfigChannel+0x130>)
 8000e7a:	429c      	cmp	r4, r3
 8000e7c:	d039      	beq.n	8000ef2 <HAL_ADC_ConfigChannel+0xe2>
  __HAL_UNLOCK(hadc);
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000e84:	4618      	mov	r0, r3
}
 8000e86:	b003      	add	sp, #12
 8000e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000e8a:	68e7      	ldr	r7, [r4, #12]
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	433b      	orrs	r3, r7
 8000e92:	e7de      	b.n	8000e52 <HAL_ADC_ConfigChannel+0x42>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000e94:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000e98:	f04f 0e07 	mov.w	lr, #7
 8000e9c:	6927      	ldr	r7, [r4, #16]
 8000e9e:	fa0e fe03 	lsl.w	lr, lr, r3
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000ea6:	ea27 070e 	bic.w	r7, r7, lr
 8000eaa:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000eac:	6927      	ldr	r7, [r4, #16]
 8000eae:	433b      	orrs	r3, r7
 8000eb0:	6123      	str	r3, [r4, #16]
 8000eb2:	e7cf      	b.n	8000e54 <HAL_ADC_ConfigChannel+0x44>
  else if (sConfig->Rank < 13)
 8000eb4:	2a0c      	cmp	r2, #12
 8000eb6:	d80e      	bhi.n	8000ed6 <HAL_ADC_ConfigChannel+0xc6>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000eb8:	4413      	add	r3, r2
 8000eba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000ebc:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000ec0:	231f      	movs	r3, #31
 8000ec2:	4093      	lsls	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000ec4:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000ec8:	ea21 0303 	bic.w	r3, r1, r3
 8000ecc:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000ece:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	6322      	str	r2, [r4, #48]	; 0x30
 8000ed4:	e7d0      	b.n	8000e78 <HAL_ADC_ConfigChannel+0x68>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000ed6:	4413      	add	r3, r2
 8000ed8:	221f      	movs	r2, #31
 8000eda:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000edc:	3b41      	subs	r3, #65	; 0x41
 8000ede:	409a      	lsls	r2, r3
 8000ee0:	ea21 0202 	bic.w	r2, r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000ee4:	fa06 f103 	lsl.w	r1, r6, r3
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000ee8:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000eea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000eec:	4311      	orrs	r1, r2
 8000eee:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000ef0:	e7c2      	b.n	8000e78 <HAL_ADC_ConfigChannel+0x68>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000ef2:	2d12      	cmp	r5, #18
 8000ef4:	d107      	bne.n	8000f06 <HAL_ADC_ConfigChannel+0xf6>
    ADC->CCR |= ADC_CCR_VBATE;
 8000ef6:	4a13      	ldr	r2, [pc, #76]	; (8000f44 <HAL_ADC_ConfigChannel+0x134>)
 8000ef8:	6853      	ldr	r3, [r2, #4]
 8000efa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000efe:	6053      	str	r3, [r2, #4]
 8000f00:	e7bd      	b.n	8000e7e <HAL_ADC_ConfigChannel+0x6e>
  __HAL_LOCK(hadc);
 8000f02:	2002      	movs	r0, #2
 8000f04:	e7bf      	b.n	8000e86 <HAL_ADC_ConfigChannel+0x76>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <HAL_ADC_ConfigChannel+0x12c>)
 8000f08:	429d      	cmp	r5, r3
 8000f0a:	d001      	beq.n	8000f10 <HAL_ADC_ConfigChannel+0x100>
 8000f0c:	2d11      	cmp	r5, #17
 8000f0e:	d1b6      	bne.n	8000e7e <HAL_ADC_ConfigChannel+0x6e>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000f10:	490c      	ldr	r1, [pc, #48]	; (8000f44 <HAL_ADC_ConfigChannel+0x134>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f12:	429d      	cmp	r5, r3
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000f14:	684a      	ldr	r2, [r1, #4]
 8000f16:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f1a:	604a      	str	r2, [r1, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f1c:	d1af      	bne.n	8000e7e <HAL_ADC_ConfigChannel+0x6e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <HAL_ADC_ConfigChannel+0x138>)
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_ADC_ConfigChannel+0x13c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	fbb3 f2f2 	udiv	r2, r3, r2
 8000f28:	230a      	movs	r3, #10
 8000f2a:	4353      	muls	r3, r2
        counter--;
 8000f2c:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8000f2e:	9b01      	ldr	r3, [sp, #4]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0a4      	beq.n	8000e7e <HAL_ADC_ConfigChannel+0x6e>
        counter--;
 8000f34:	9b01      	ldr	r3, [sp, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	e7f8      	b.n	8000f2c <HAL_ADC_ConfigChannel+0x11c>
 8000f3a:	bf00      	nop
 8000f3c:	10000012 	.word	0x10000012
 8000f40:	40012000 	.word	0x40012000
 8000f44:	40012300 	.word	0x40012300
 8000f48:	20000024 	.word	0x20000024
 8000f4c:	000f4240 	.word	0x000f4240

08000f50 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f50:	4770      	bx	lr

08000f52 <HAL_CAN_Init>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 8000f52:	b570      	push	{r4, r5, r6, lr}
  uint32_t InitStatus = CAN_INITSTATUS_FAILED;
  uint32_t tickstart = 0;
  
  /* Check CAN handle */
  if(hcan == NULL)
 8000f54:	4604      	mov	r4, r0
 8000f56:	2800      	cmp	r0, #0
 8000f58:	d072      	beq.n	8001040 <HAL_CAN_Init+0xee>
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  

  if(hcan->State == HAL_CAN_STATE_RESET)
 8000f5a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000f5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f62:	b91b      	cbnz	r3, 8000f6c <HAL_CAN_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 8000f64:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 8000f68:	f008 ff5e 	bl	8009e28 <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  
  /* Exit from sleep mode */
  hcan->Instance->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8000f72:	6823      	ldr	r3, [r4, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	f022 0202 	bic.w	r2, r2, #2
 8000f7a:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  hcan->Instance->MCR |= CAN_MCR_INRQ ;
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	f042 0201 	orr.w	r2, r2, #1
 8000f82:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000f84:	f7ff fd8a 	bl	8000a9c <HAL_GetTick>
 8000f88:	4606      	mov	r6, r0

  /* Wait the acknowledge */
  while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	685d      	ldr	r5, [r3, #4]
 8000f8e:	f015 0501 	ands.w	r5, r5, #1
 8000f92:	d057      	beq.n	8001044 <HAL_CAN_Init+0xf2>
      return HAL_TIMEOUT;
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000f94:	685a      	ldr	r2, [r3, #4]
 8000f96:	07d1      	lsls	r1, r2, #31
 8000f98:	d54f      	bpl.n	800103a <HAL_CAN_Init+0xe8>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 8000f9a:	69a2      	ldr	r2, [r4, #24]
 8000f9c:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_TTCM;
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	bf0c      	ite	eq
 8000fa2:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8000fa6:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000faa:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 8000fac:	69e2      	ldr	r2, [r4, #28]
 8000fae:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_ABOM;
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	bf0c      	ite	eq
 8000fb4:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8000fb8:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000fbc:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 8000fbe:	6a22      	ldr	r2, [r4, #32]
 8000fc0:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_AWUM;
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	bf0c      	ite	eq
 8000fc6:	f042 0220 	orreq.w	r2, r2, #32
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8000fca:	f022 0220 	bicne.w	r2, r2, #32
 8000fce:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 8000fd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000fd2:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_NART;
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	bf0c      	ite	eq
 8000fd8:	f042 0210 	orreq.w	r2, r2, #16
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_NART;
 8000fdc:	f022 0210 	bicne.w	r2, r2, #16
 8000fe0:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 8000fe2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000fe4:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_RFLM;
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	bf0c      	ite	eq
 8000fea:	f042 0208 	orreq.w	r2, r2, #8
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8000fee:	f022 0208 	bicne.w	r2, r2, #8
 8000ff2:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 8000ff4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ff6:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_TXFP;
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	bf0c      	ite	eq
 8000ffc:	f042 0204 	orreq.w	r2, r2, #4
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8001000:	f022 0204 	bicne.w	r2, r2, #4
 8001004:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8001006:	68e1      	ldr	r1, [r4, #12]
 8001008:	68a2      	ldr	r2, [r4, #8]
 800100a:	430a      	orrs	r2, r1
                ((uint32_t)hcan->Init.SJW) | \
 800100c:	6921      	ldr	r1, [r4, #16]
 800100e:	430a      	orrs	r2, r1
                ((uint32_t)hcan->Init.BS1) | \
 8001010:	6961      	ldr	r1, [r4, #20]
 8001012:	430a      	orrs	r2, r1
                ((uint32_t)hcan->Init.BS2) | \
                ((uint32_t)hcan->Init.Prescaler - 1);
 8001014:	6861      	ldr	r1, [r4, #4]
 8001016:	3901      	subs	r1, #1
                ((uint32_t)hcan->Init.BS2) | \
 8001018:	430a      	orrs	r2, r1
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 800101a:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	f022 0201 	bic.w	r2, r2, #1
 8001022:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001024:	f7ff fd3a 	bl	8000a9c <HAL_GetTick>
 8001028:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 800102a:	6823      	ldr	r3, [r4, #0]
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	07d2      	lsls	r2, r2, #31
 8001030:	d413      	bmi.n	800105a <HAL_CAN_Init+0x108>
        return HAL_TIMEOUT;
      }
    }

    /* Check acknowledged */
    if ((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8001032:	6858      	ldr	r0, [r3, #4]
 8001034:	f010 0001 	ands.w	r0, r0, #1
 8001038:	d01b      	beq.n	8001072 <HAL_CAN_Init+0x120>
    return HAL_OK;
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 800103a:	2304      	movs	r3, #4
 800103c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    
    /* Return function status */
    return HAL_ERROR;
 8001040:	2001      	movs	r0, #1
  }
}
 8001042:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 8001044:	f7ff fd2a 	bl	8000a9c <HAL_GetTick>
 8001048:	1b80      	subs	r0, r0, r6
 800104a:	280a      	cmp	r0, #10
 800104c:	d99d      	bls.n	8000f8a <HAL_CAN_Init+0x38>
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 800104e:	2003      	movs	r0, #3
      __HAL_UNLOCK(hcan);
 8001050:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8001054:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
      return HAL_TIMEOUT;
 8001058:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 800105a:	f7ff fd1f 	bl	8000a9c <HAL_GetTick>
 800105e:	1b40      	subs	r0, r0, r5
 8001060:	280a      	cmp	r0, #10
 8001062:	d9e2      	bls.n	800102a <HAL_CAN_Init+0xd8>
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 8001064:	2003      	movs	r0, #3
        __HAL_UNLOCK(hcan);
 8001066:	2300      	movs	r3, #0
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 8001068:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
        __HAL_UNLOCK(hcan);
 800106c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        return HAL_TIMEOUT;
 8001070:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_READY;
 8001072:	2301      	movs	r3, #1
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001074:	63e0      	str	r0, [r4, #60]	; 0x3c
    hcan->State = HAL_CAN_STATE_READY;
 8001076:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 800107a:	bd70      	pop	{r4, r5, r6, pc}

0800107c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800107c:	4a07      	ldr	r2, [pc, #28]	; (800109c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800107e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001080:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001082:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001086:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800108a:	041b      	lsls	r3, r3, #16
 800108c:	0c1b      	lsrs	r3, r3, #16
 800108e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001096:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001098:	60d3      	str	r3, [r2, #12]
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a0:	4b19      	ldr	r3, [pc, #100]	; (8001108 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a2:	b530      	push	{r4, r5, lr}
 80010a4:	68dc      	ldr	r4, [r3, #12]
 80010a6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010aa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ae:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	bf28      	it	cs
 80010b4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010bc:	bf8c      	ite	hi
 80010be:	3c03      	subhi	r4, #3
 80010c0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c2:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 80010c6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	f103 33ff 	add.w	r3, r3, #4294967295
 80010cc:	ea01 0103 	and.w	r1, r1, r3
 80010d0:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d4:	fa05 f404 	lsl.w	r4, r5, r4
 80010d8:	f104 34ff 	add.w	r4, r4, #4294967295
 80010dc:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	ea42 0201 	orr.w	r2, r2, r1
 80010e4:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 80010e8:	da05      	bge.n	80010f6 <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ea:	f000 000f 	and.w	r0, r0, #15
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_NVIC_SetPriority+0x6c>)
 80010f2:	541a      	strb	r2, [r3, r0]
 80010f4:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001100:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8001104:	bd30      	pop	{r4, r5, pc}
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00
 800110c:	e000ed14 	.word	0xe000ed14

08001110 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001110:	0942      	lsrs	r2, r0, #5
 8001112:	2301      	movs	r3, #1
 8001114:	f000 001f 	and.w	r0, r0, #31
 8001118:	fa03 f000 	lsl.w	r0, r3, r0
 800111c:	4b01      	ldr	r3, [pc, #4]	; (8001124 <HAL_NVIC_EnableIRQ+0x14>)
 800111e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001122:	4770      	bx	lr
 8001124:	e000e100 	.word	0xe000e100

08001128 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001128:	3801      	subs	r0, #1
 800112a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800112e:	d20a      	bcs.n	8001146 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	21f0      	movs	r1, #240	; 0xf0
 8001134:	4a06      	ldr	r2, [pc, #24]	; (8001150 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001136:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001140:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001146:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000e010 	.word	0xe000e010
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8001154:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001158:	4a04      	ldr	r2, [pc, #16]	; (800116c <HAL_MPU_Disable+0x18>)
 800115a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800115c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001160:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001162:	2200      	movs	r2, #0
 8001164:	4b02      	ldr	r3, [pc, #8]	; (8001170 <HAL_MPU_Disable+0x1c>)
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00
 8001170:	e000ed90 	.word	0xe000ed90

08001174 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001174:	4a06      	ldr	r2, [pc, #24]	; (8001190 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001176:	f040 0001 	orr.w	r0, r0, #1
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_MPU_Enable+0x20>)
 800117c:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800117e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001184:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001186:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800118a:	f3bf 8f6f 	isb	sy
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00
 8001194:	e000ed90 	.word	0xe000ed90

08001198 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001198:	7843      	ldrb	r3, [r0, #1]
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <HAL_MPU_ConfigRegion+0x4c>)
{
 800119c:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 800119e:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 80011a0:	7801      	ldrb	r1, [r0, #0]
 80011a2:	b1d9      	cbz	r1, 80011dc <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80011a4:	6843      	ldr	r3, [r0, #4]
 80011a6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011a8:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011aa:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011ac:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011ae:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011b2:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011b4:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011b6:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011ba:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011bc:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011c0:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011c2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011c6:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011cc:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80011d2:	7a01      	ldrb	r1, [r0, #8]
 80011d4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011d8:	6113      	str	r3, [r2, #16]
 80011da:	bd10      	pop	{r4, pc}
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 80011dc:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 80011de:	6111      	str	r1, [r2, #16]
 80011e0:	bd10      	pop	{r4, pc}
 80011e2:	bf00      	nop
 80011e4:	e000ed90 	.word	0xe000ed90

080011e8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80011ea:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	bf0c      	ite	eq
 80011f0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80011f4:	f022 0204 	bicne.w	r2, r2, #4
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	4770      	bx	lr
 80011fc:	e000e010 	.word	0xe000e010

08001200 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001200:	4770      	bx	lr

08001202 <HAL_SYSTICK_IRQHandler>:
{
 8001202:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001204:	f7ff fffc 	bl	8001200 <HAL_SYSTICK_Callback>
 8001208:	bd08      	pop	{r3, pc}

0800120a <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800120a:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 800120c:	4604      	mov	r4, r0
 800120e:	b168      	cbz	r0, 800122c <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001210:	7903      	ldrb	r3, [r0, #4]
 8001212:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001216:	b913      	cbnz	r3, 800121e <HAL_DAC_Init+0x14>
  { 
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 8001218:	7142      	strb	r2, [r0, #5]
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800121a:	f008 fe61 	bl	8009ee0 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800121e:	2302      	movs	r3, #2
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001220:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8001222:	7123      	strb	r3, [r4, #4]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001224:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001226:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8001228:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 800122a:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 800122c:	2001      	movs	r0, #1
}
 800122e:	bd10      	pop	{r4, pc}

08001230 <HAL_DAC_Start>:
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001230:	7943      	ldrb	r3, [r0, #5]
 8001232:	2b01      	cmp	r3, #1
 8001234:	f04f 0302 	mov.w	r3, #2
{
 8001238:	b510      	push	{r4, lr}
  __HAL_LOCK(hdac);
 800123a:	d018      	beq.n	800126e <HAL_DAC_Start+0x3e>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800123c:	7103      	strb	r3, [r0, #4]
  __HAL_LOCK(hdac);
 800123e:	2201      	movs	r2, #1
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001240:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdac);
 8001242:	7142      	strb	r2, [r0, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8001244:	408a      	lsls	r2, r1
 8001246:	681c      	ldr	r4, [r3, #0]
 8001248:	4322      	orrs	r2, r4
 800124a:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 800124c:	b989      	cbnz	r1, 8001272 <HAL_DAC_Start+0x42>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 800124e:	6819      	ldr	r1, [r3, #0]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8001250:	681a      	ldr	r2, [r3, #0]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8001252:	074c      	lsls	r4, r1, #29
 8001254:	d507      	bpl.n	8001266 <HAL_DAC_Start+0x36>
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8001256:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 800125a:	2a38      	cmp	r2, #56	; 0x38
 800125c:	d103      	bne.n	8001266 <HAL_DAC_Start+0x36>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	f042 0201 	orr.w	r2, r2, #1
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8001264:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001266:	2301      	movs	r3, #1
 8001268:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800126a:	2300      	movs	r3, #0
 800126c:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 800126e:	4618      	mov	r0, r3
    
  /* Return function status */
  return HAL_OK;
}
 8001270:	bd10      	pop	{r4, pc}
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8001272:	6819      	ldr	r1, [r3, #0]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8001274:	681a      	ldr	r2, [r3, #0]
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8001276:	0349      	lsls	r1, r1, #13
 8001278:	d5f5      	bpl.n	8001266 <HAL_DAC_Start+0x36>
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 800127a:	f402 1260 	and.w	r2, r2, #3670016	; 0x380000
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 800127e:	f5b2 1f60 	cmp.w	r2, #3670016	; 0x380000
 8001282:	d1f0      	bne.n	8001266 <HAL_DAC_Start+0x36>
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	f042 0202 	orr.w	r2, r2, #2
 800128a:	e7eb      	b.n	8001264 <HAL_DAC_Start+0x34>

0800128c <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800128c:	7943      	ldrb	r3, [r0, #5]
 800128e:	2b01      	cmp	r3, #1
 8001290:	f04f 0302 	mov.w	r3, #2
{
 8001294:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdac);
 8001296:	d017      	beq.n	80012c8 <HAL_DAC_ConfigChannel+0x3c>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001298:	6804      	ldr	r4, [r0, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800129a:	f640 75fe 	movw	r5, #4094	; 0xffe
  hdac->State = HAL_DAC_STATE_BUSY;
 800129e:	7103      	strb	r3, [r0, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80012a0:	4095      	lsls	r5, r2
  tmpreg1 = hdac->Instance->CR;
 80012a2:	6823      	ldr	r3, [r4, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80012a4:	ea23 0505 	bic.w	r5, r3, r5
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80012a8:	c90a      	ldmia	r1, {r1, r3}
 80012aa:	430b      	orrs	r3, r1
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80012ac:	21c0      	movs	r1, #192	; 0xc0
  tmpreg1 |= tmpreg2 << Channel;
 80012ae:	4093      	lsls	r3, r2
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80012b0:	fa01 f202 	lsl.w	r2, r1, r2
  tmpreg1 |= tmpreg2 << Channel;
 80012b4:	432b      	orrs	r3, r5
  hdac->Instance->CR = tmpreg1;
 80012b6:	6023      	str	r3, [r4, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80012b8:	6823      	ldr	r3, [r4, #0]
 80012ba:	ea23 0202 	bic.w	r2, r3, r2
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80012be:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80012c0:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80012c2:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80012c4:	2300      	movs	r3, #0
 80012c6:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 80012c8:	4618      	mov	r0, r3
  
  /* Return function status */
  return HAL_OK;
}
 80012ca:	bd30      	pop	{r4, r5, pc}

080012cc <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80012cc:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmp = 0;
 80012ce:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 80012d0:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0;
 80012d2:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance; 
 80012d4:	9001      	str	r0, [sp, #4]
  if(Channel == DAC_CHANNEL_1)
 80012d6:	b941      	cbnz	r1, 80012ea <HAL_DAC_SetValue+0x1e>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80012d8:	9901      	ldr	r1, [sp, #4]
 80012da:	3108      	adds	r1, #8
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80012dc:	440a      	add	r2, r1
  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
  
  /* Return function status */
  return HAL_OK;
}
 80012de:	2000      	movs	r0, #0
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80012e0:	9201      	str	r2, [sp, #4]
  *(__IO uint32_t *) tmp = Data;
 80012e2:	9a01      	ldr	r2, [sp, #4]
 80012e4:	6013      	str	r3, [r2, #0]
}
 80012e6:	b002      	add	sp, #8
 80012e8:	bd10      	pop	{r4, pc}
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80012ea:	9901      	ldr	r1, [sp, #4]
 80012ec:	3114      	adds	r1, #20
 80012ee:	e7f5      	b.n	80012dc <HAL_DAC_SetValue+0x10>

080012f0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80012f0:	6803      	ldr	r3, [r0, #0]
 80012f2:	2118      	movs	r1, #24
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80012fa:	3a10      	subs	r2, #16
 80012fc:	f023 0303 	bic.w	r3, r3, #3
 8001300:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001304:	4904      	ldr	r1, [pc, #16]	; (8001318 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001306:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001308:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800130a:	bf88      	it	hi
 800130c:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800130e:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001310:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8001312:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	0800b876 	.word	0x0800b876

0800131c <HAL_DMA_Init>:
{
 800131c:	b570      	push	{r4, r5, r6, lr}
 800131e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001320:	f7ff fbbc 	bl	8000a9c <HAL_GetTick>
 8001324:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001326:	2c00      	cmp	r4, #0
 8001328:	d072      	beq.n	8001410 <HAL_DMA_Init+0xf4>
  __HAL_UNLOCK(hdma);
 800132a:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 800132c:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 800132e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001332:	2302      	movs	r3, #2
 8001334:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001338:	6813      	ldr	r3, [r2, #0]
 800133a:	f023 0301 	bic.w	r3, r3, #1
 800133e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001340:	6821      	ldr	r1, [r4, #0]
 8001342:	680b      	ldr	r3, [r1, #0]
 8001344:	07d8      	lsls	r0, r3, #31
 8001346:	d43b      	bmi.n	80013c0 <HAL_DMA_Init+0xa4>
  tmp = hdma->Instance->CR;
 8001348:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800134a:	4d32      	ldr	r5, [pc, #200]	; (8001414 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800134c:	6862      	ldr	r2, [r4, #4]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800134e:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001350:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001352:	69a0      	ldr	r0, [r4, #24]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001354:	4313      	orrs	r3, r2
 8001356:	68e2      	ldr	r2, [r4, #12]
 8001358:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135a:	6922      	ldr	r2, [r4, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	6962      	ldr	r2, [r4, #20]
 8001360:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001362:	69e2      	ldr	r2, [r4, #28]
 8001364:	4303      	orrs	r3, r0
 8001366:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001368:	6a22      	ldr	r2, [r4, #32]
 800136a:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800136c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800136e:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001370:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001374:	bf01      	itttt	eq
 8001376:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8001378:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 800137a:	4335      	orreq	r5, r6
 800137c:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800137e:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8001380:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001382:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001384:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001388:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800138c:	d10a      	bne.n	80013a4 <HAL_DMA_Init+0x88>
    tmp |= hdma->Init.FIFOThreshold;
 800138e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001390:	4313      	orrs	r3, r2
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001392:	bb00      	cbnz	r0, 80013d6 <HAL_DMA_Init+0xba>
  {
    switch (tmp)
 8001394:	2a01      	cmp	r2, #1
 8001396:	d02f      	beq.n	80013f8 <HAL_DMA_Init+0xdc>
 8001398:	d301      	bcc.n	800139e <HAL_DMA_Init+0x82>
 800139a:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800139c:	d102      	bne.n	80013a4 <HAL_DMA_Init+0x88>
      case DMA_FIFO_THRESHOLD_HALFFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800139e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013a0:	01d2      	lsls	r2, r2, #7
 80013a2:	d42d      	bmi.n	8001400 <HAL_DMA_Init+0xe4>
  hdma->Instance->FCR = tmp;
 80013a4:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013a6:	4620      	mov	r0, r4
 80013a8:	f7ff ffa2 	bl	80012f0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013ac:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80013ae:	233f      	movs	r3, #63	; 0x3f
 80013b0:	4093      	lsls	r3, r2
 80013b2:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013b4:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80013b6:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013b8:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80013ba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80013be:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013c0:	f7ff fb6c 	bl	8000a9c <HAL_GetTick>
 80013c4:	1b40      	subs	r0, r0, r5
 80013c6:	2805      	cmp	r0, #5
 80013c8:	d9ba      	bls.n	8001340 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013ca:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013cc:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013ce:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_READY;
 80013d0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80013d4:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80013d6:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80013da:	d115      	bne.n	8001408 <HAL_DMA_Init+0xec>
    switch (tmp)
 80013dc:	2a03      	cmp	r2, #3
 80013de:	d8e1      	bhi.n	80013a4 <HAL_DMA_Init+0x88>
 80013e0:	a001      	add	r0, pc, #4	; (adr r0, 80013e8 <HAL_DMA_Init+0xcc>)
 80013e2:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80013e6:	bf00      	nop
 80013e8:	08001401 	.word	0x08001401
 80013ec:	0800139f 	.word	0x0800139f
 80013f0:	08001401 	.word	0x08001401
 80013f4:	080013f9 	.word	0x080013f9
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013fa:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 80013fe:	d1d1      	bne.n	80013a4 <HAL_DMA_Init+0x88>
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001400:	2340      	movs	r3, #64	; 0x40
      hdma->State = HAL_DMA_STATE_READY;
 8001402:	2001      	movs	r0, #1
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001404:	6563      	str	r3, [r4, #84]	; 0x54
 8001406:	e7e3      	b.n	80013d0 <HAL_DMA_Init+0xb4>
    switch (tmp)
 8001408:	2a02      	cmp	r2, #2
 800140a:	d9f9      	bls.n	8001400 <HAL_DMA_Init+0xe4>
 800140c:	2a03      	cmp	r2, #3
 800140e:	e7c5      	b.n	800139c <HAL_DMA_Init+0x80>
    return HAL_ERROR;
 8001410:	2001      	movs	r0, #1
 8001412:	bd70      	pop	{r4, r5, r6, pc}
 8001414:	f010803f 	.word	0xf010803f

08001418 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001418:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800141c:	2b02      	cmp	r3, #2
 800141e:	d003      	beq.n	8001428 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001424:	2001      	movs	r0, #1
 8001426:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8001428:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800142a:	2305      	movs	r3, #5
 800142c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 8001430:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001432:	6813      	ldr	r3, [r2, #0]
 8001434:	f023 0301 	bic.w	r3, r3, #1
 8001438:	6013      	str	r3, [r2, #0]
}
 800143a:	4770      	bx	lr

0800143c <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 800143c:	2300      	movs	r3, #0
{
 800143e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8001440:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001442:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8001444:	4b59      	ldr	r3, [pc, #356]	; (80015ac <HAL_DMA_IRQHandler+0x170>)
{
 8001446:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001448:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 800144a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800144c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800144e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001450:	409a      	lsls	r2, r3
 8001452:	4216      	tst	r6, r2
 8001454:	d00c      	beq.n	8001470 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001456:	6801      	ldr	r1, [r0, #0]
 8001458:	6808      	ldr	r0, [r1, #0]
 800145a:	0740      	lsls	r0, r0, #29
 800145c:	d508      	bpl.n	8001470 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800145e:	6808      	ldr	r0, [r1, #0]
 8001460:	f020 0004 	bic.w	r0, r0, #4
 8001464:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001466:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001468:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800146a:	f042 0201 	orr.w	r2, r2, #1
 800146e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001470:	4a4f      	ldr	r2, [pc, #316]	; (80015b0 <HAL_DMA_IRQHandler+0x174>)
 8001472:	409a      	lsls	r2, r3
 8001474:	4216      	tst	r6, r2
 8001476:	d008      	beq.n	800148a <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001478:	6821      	ldr	r1, [r4, #0]
 800147a:	6949      	ldr	r1, [r1, #20]
 800147c:	0609      	lsls	r1, r1, #24
 800147e:	d504      	bpl.n	800148a <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001480:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001482:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001484:	f042 0202 	orr.w	r2, r2, #2
 8001488:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800148a:	4a4a      	ldr	r2, [pc, #296]	; (80015b4 <HAL_DMA_IRQHandler+0x178>)
 800148c:	409a      	lsls	r2, r3
 800148e:	4216      	tst	r6, r2
 8001490:	d008      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001492:	6821      	ldr	r1, [r4, #0]
 8001494:	6809      	ldr	r1, [r1, #0]
 8001496:	0788      	lsls	r0, r1, #30
 8001498:	d504      	bpl.n	80014a4 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800149a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800149c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800149e:	f042 0204 	orr.w	r2, r2, #4
 80014a2:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014a4:	2210      	movs	r2, #16
 80014a6:	409a      	lsls	r2, r3
 80014a8:	4216      	tst	r6, r2
 80014aa:	d010      	beq.n	80014ce <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014ac:	6823      	ldr	r3, [r4, #0]
 80014ae:	6819      	ldr	r1, [r3, #0]
 80014b0:	0709      	lsls	r1, r1, #28
 80014b2:	d50c      	bpl.n	80014ce <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014b4:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	0350      	lsls	r0, r2, #13
 80014ba:	d535      	bpl.n	8001528 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	0319      	lsls	r1, r3, #12
 80014c0:	d401      	bmi.n	80014c6 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80014c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014c4:	e000      	b.n	80014c8 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80014c8:	b10b      	cbz	r3, 80014ce <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80014ca:	4620      	mov	r0, r4
 80014cc:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014ce:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80014d0:	2220      	movs	r2, #32
 80014d2:	408a      	lsls	r2, r1
 80014d4:	4216      	tst	r6, r2
 80014d6:	d038      	beq.n	800154a <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014d8:	6823      	ldr	r3, [r4, #0]
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	06c6      	lsls	r6, r0, #27
 80014de:	d534      	bpl.n	800154a <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014e0:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014e2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80014e6:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014e8:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014ea:	d125      	bne.n	8001538 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014ec:	f022 0216 	bic.w	r2, r2, #22
 80014f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014f2:	695a      	ldr	r2, [r3, #20]
 80014f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014f8:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014fc:	b90a      	cbnz	r2, 8001502 <HAL_DMA_IRQHandler+0xc6>
 80014fe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001500:	b11a      	cbz	r2, 800150a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	f022 0208 	bic.w	r2, r2, #8
 8001508:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800150a:	233f      	movs	r3, #63	; 0x3f
 800150c:	408b      	lsls	r3, r1
 800150e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001510:	2300      	movs	r3, #0
 8001512:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001516:	2301      	movs	r3, #1
 8001518:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800151c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800151e:	b10b      	cbz	r3, 8001524 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8001520:	4620      	mov	r0, r4
 8001522:	4798      	blx	r3
}
 8001524:	b003      	add	sp, #12
 8001526:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	05d2      	lsls	r2, r2, #23
 800152c:	d4c9      	bmi.n	80014c2 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	f022 0208 	bic.w	r2, r2, #8
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	e7c4      	b.n	80014c2 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001538:	0350      	lsls	r0, r2, #13
 800153a:	d528      	bpl.n	800158e <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	0319      	lsls	r1, r3, #12
 8001540:	d432      	bmi.n	80015a8 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8001542:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001544:	b10b      	cbz	r3, 800154a <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8001546:	4620      	mov	r0, r4
 8001548:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800154a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0e9      	beq.n	8001524 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001550:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001552:	07da      	lsls	r2, r3, #31
 8001554:	d519      	bpl.n	800158a <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001556:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8001558:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800155a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800155e:	6813      	ldr	r3, [r2, #0]
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8001566:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800156a:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 800156e:	9b01      	ldr	r3, [sp, #4]
 8001570:	3301      	adds	r3, #1
 8001572:	429f      	cmp	r7, r3
 8001574:	9301      	str	r3, [sp, #4]
 8001576:	d302      	bcc.n	800157e <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001578:	6813      	ldr	r3, [r2, #0]
 800157a:	07db      	lsls	r3, r3, #31
 800157c:	d4f7      	bmi.n	800156e <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 800157e:	2300      	movs	r3, #0
 8001580:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001584:	2301      	movs	r3, #1
 8001586:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800158a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800158c:	e7c7      	b.n	800151e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001594:	d108      	bne.n	80015a8 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001596:	6819      	ldr	r1, [r3, #0]
 8001598:	f021 0110 	bic.w	r1, r1, #16
 800159c:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800159e:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80015a0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80015a4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80015a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015aa:	e7cb      	b.n	8001544 <HAL_DMA_IRQHandler+0x108>
 80015ac:	20000024 	.word	0x20000024
 80015b0:	00800001 	.word	0x00800001
 80015b4:	00800004 	.word	0x00800004

080015b8 <HAL_DMA_RegisterCallback>:
  __HAL_LOCK(hdma);
 80015b8:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80015bc:	2b01      	cmp	r3, #1
{
 80015be:	b510      	push	{r4, lr}
 80015c0:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80015c2:	d01f      	beq.n	8001604 <HAL_DMA_RegisterCallback+0x4c>
 80015c4:	2301      	movs	r3, #1
 80015c6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80015ca:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 80015ce:	4298      	cmp	r0, r3
 80015d0:	d113      	bne.n	80015fa <HAL_DMA_RegisterCallback+0x42>
    switch (CallbackID)
 80015d2:	2905      	cmp	r1, #5
 80015d4:	d805      	bhi.n	80015e2 <HAL_DMA_RegisterCallback+0x2a>
 80015d6:	e8df f001 	tbb	[pc, r1]
 80015da:	0603      	.short	0x0603
 80015dc:	0e0c0a08 	.word	0x0e0c0a08
      hdma->XferCpltCallback = pCallback;
 80015e0:	63e2      	str	r2, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80015e2:	2000      	movs	r0, #0
 80015e4:	e00a      	b.n	80015fc <HAL_DMA_RegisterCallback+0x44>
      hdma->XferHalfCpltCallback = pCallback;
 80015e6:	6422      	str	r2, [r4, #64]	; 0x40
 80015e8:	e7fb      	b.n	80015e2 <HAL_DMA_RegisterCallback+0x2a>
      hdma->XferM1CpltCallback = pCallback;
 80015ea:	6462      	str	r2, [r4, #68]	; 0x44
 80015ec:	e7f9      	b.n	80015e2 <HAL_DMA_RegisterCallback+0x2a>
      hdma->XferM1HalfCpltCallback = pCallback;
 80015ee:	64a2      	str	r2, [r4, #72]	; 0x48
 80015f0:	e7f7      	b.n	80015e2 <HAL_DMA_RegisterCallback+0x2a>
      hdma->XferErrorCallback = pCallback;
 80015f2:	64e2      	str	r2, [r4, #76]	; 0x4c
 80015f4:	e7f5      	b.n	80015e2 <HAL_DMA_RegisterCallback+0x2a>
      hdma->XferAbortCallback = pCallback;
 80015f6:	6522      	str	r2, [r4, #80]	; 0x50
 80015f8:	e7f3      	b.n	80015e2 <HAL_DMA_RegisterCallback+0x2a>
    status =  HAL_ERROR;
 80015fa:	4618      	mov	r0, r3
  __HAL_UNLOCK(hdma);
 80015fc:	2300      	movs	r3, #0
 80015fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return status;
 8001602:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdma);
 8001604:	2002      	movs	r0, #2
}
 8001606:	bd10      	pop	{r4, pc}

08001608 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8001608:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800160a:	6886      	ldr	r6, [r0, #8]
 800160c:	2e80      	cmp	r6, #128	; 0x80
 800160e:	d104      	bne.n	800161a <HAL_DMAEx_MultiBufferStart_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8001610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001614:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001616:	2001      	movs	r0, #1
 8001618:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800161a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800161e:	2c01      	cmp	r4, #1
 8001620:	f000 81d8 	beq.w	80019d4 <HAL_DMAEx_MultiBufferStart_IT+0x3cc>
 8001624:	2401      	movs	r4, #1
 8001626:	2500      	movs	r5, #0
 8001628:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800162c:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8001630:	2c01      	cmp	r4, #1
 8001632:	f04f 0402 	mov.w	r4, #2
 8001636:	f040 81cb 	bne.w	80019d0 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800163a:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
{
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800163e:	2e40      	cmp	r6, #64	; 0x40
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8001640:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001642:	6545      	str	r5, [r0, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8001644:	6825      	ldr	r5, [r4, #0]
 8001646:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000
 800164a:	6025      	str	r5, [r4, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 800164c:	6123      	str	r3, [r4, #16]
  hdma->Instance->NDTR = DataLength;
 800164e:	9b04      	ldr	r3, [sp, #16]
 8001650:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001652:	d13f      	bne.n	80016d4 <HAL_DMAEx_MultiBufferStart_IT+0xcc>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001654:	60a2      	str	r2, [r4, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001656:	60e1      	str	r1, [r4, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001658:	4bb0      	ldr	r3, [pc, #704]	; (800191c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800165a:	429c      	cmp	r4, r3
 800165c:	d942      	bls.n	80016e4 <HAL_DMAEx_MultiBufferStart_IT+0xdc>
 800165e:	3318      	adds	r3, #24
 8001660:	429c      	cmp	r4, r3
 8001662:	d03a      	beq.n	80016da <HAL_DMAEx_MultiBufferStart_IT+0xd2>
 8001664:	4aae      	ldr	r2, [pc, #696]	; (8001920 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8001666:	4294      	cmp	r4, r2
 8001668:	d039      	beq.n	80016de <HAL_DMAEx_MultiBufferStart_IT+0xd6>
 800166a:	3218      	adds	r2, #24
 800166c:	4294      	cmp	r4, r2
 800166e:	bf14      	ite	ne
 8001670:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 8001674:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8001678:	49aa      	ldr	r1, [pc, #680]	; (8001924 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800167a:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800167c:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800167e:	f040 80b3 	bne.w	80017e8 <HAL_DMAEx_MultiBufferStart_IT+0x1e0>
 8001682:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001684:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001686:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001688:	f040 80e6 	bne.w	8001858 <HAL_DMAEx_MultiBufferStart_IT+0x250>
 800168c:	2208      	movs	r2, #8
 800168e:	49a5      	ldr	r1, [pc, #660]	; (8001924 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001690:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001692:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001694:	f040 8118 	bne.w	80018c8 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>
 8001698:	4aa3      	ldr	r2, [pc, #652]	; (8001928 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800169a:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800169c:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800169e:	f040 8163 	bne.w	8001968 <HAL_DMAEx_MultiBufferStart_IT+0x360>
 80016a2:	4ba2      	ldr	r3, [pc, #648]	; (800192c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80016a4:	4a9f      	ldr	r2, [pc, #636]	; (8001924 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80016a6:	60d3      	str	r3, [r2, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016a8:	6823      	ldr	r3, [r4, #0]
 80016aa:	f043 0316 	orr.w	r3, r3, #22
 80016ae:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80016b0:	6963      	ldr	r3, [r4, #20]
 80016b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b6:	6163      	str	r3, [r4, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016b8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80016ba:	b90b      	cbnz	r3, 80016c0 <HAL_DMAEx_MultiBufferStart_IT+0xb8>
 80016bc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80016be:	b11b      	cbz	r3, 80016c8 <HAL_DMAEx_MultiBufferStart_IT+0xc0>
      hdma->Instance->CR  |= DMA_IT_HT;
 80016c0:	6823      	ldr	r3, [r4, #0]
 80016c2:	f043 0308 	orr.w	r3, r3, #8
 80016c6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma); 
 80016c8:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016ca:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma); 
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6023      	str	r3, [r4, #0]
 80016d2:	bd70      	pop	{r4, r5, r6, pc}
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80016d4:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80016d6:	60e2      	str	r2, [r4, #12]
 80016d8:	e7be      	b.n	8001658 <HAL_DMAEx_MultiBufferStart_IT+0x50>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80016da:	2220      	movs	r2, #32
 80016dc:	e7cc      	b.n	8001678 <HAL_DMAEx_MultiBufferStart_IT+0x70>
 80016de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016e2:	e7c9      	b.n	8001678 <HAL_DMAEx_MultiBufferStart_IT+0x70>
 80016e4:	4b92      	ldr	r3, [pc, #584]	; (8001930 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 80016e6:	429c      	cmp	r4, r3
 80016e8:	d92a      	bls.n	8001740 <HAL_DMAEx_MultiBufferStart_IT+0x138>
 80016ea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80016ee:	429c      	cmp	r4, r3
 80016f0:	d021      	beq.n	8001736 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 80016f2:	4a90      	ldr	r2, [pc, #576]	; (8001934 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 80016f4:	4294      	cmp	r4, r2
 80016f6:	d020      	beq.n	800173a <HAL_DMAEx_MultiBufferStart_IT+0x132>
 80016f8:	3218      	adds	r2, #24
 80016fa:	4294      	cmp	r4, r2
 80016fc:	bf14      	ite	ne
 80016fe:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 8001702:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8001706:	4987      	ldr	r1, [pc, #540]	; (8001924 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001708:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800170a:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800170c:	d17a      	bne.n	8001804 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800170e:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001710:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001712:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001714:	f040 80ae 	bne.w	8001874 <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 8001718:	2208      	movs	r2, #8
 800171a:	4982      	ldr	r1, [pc, #520]	; (8001924 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800171c:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800171e:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001720:	f040 80e0 	bne.w	80018e4 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>
 8001724:	4a80      	ldr	r2, [pc, #512]	; (8001928 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8001726:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001728:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800172a:	f040 812a 	bne.w	8001982 <HAL_DMAEx_MultiBufferStart_IT+0x37a>
 800172e:	4b7f      	ldr	r3, [pc, #508]	; (800192c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8001730:	4a7c      	ldr	r2, [pc, #496]	; (8001924 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8001732:	6093      	str	r3, [r2, #8]
 8001734:	e7b8      	b.n	80016a8 <HAL_DMAEx_MultiBufferStart_IT+0xa0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001736:	2220      	movs	r2, #32
 8001738:	e7e5      	b.n	8001706 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 800173a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800173e:	e7e2      	b.n	8001706 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8001740:	4b7d      	ldr	r3, [pc, #500]	; (8001938 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8001742:	429c      	cmp	r4, r3
 8001744:	d928      	bls.n	8001798 <HAL_DMAEx_MultiBufferStart_IT+0x190>
 8001746:	3318      	adds	r3, #24
 8001748:	429c      	cmp	r4, r3
 800174a:	d020      	beq.n	800178e <HAL_DMAEx_MultiBufferStart_IT+0x186>
 800174c:	4a7b      	ldr	r2, [pc, #492]	; (800193c <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 800174e:	4294      	cmp	r4, r2
 8001750:	d01f      	beq.n	8001792 <HAL_DMAEx_MultiBufferStart_IT+0x18a>
 8001752:	3218      	adds	r2, #24
 8001754:	4294      	cmp	r4, r2
 8001756:	bf14      	ite	ne
 8001758:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 800175c:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8001760:	4977      	ldr	r1, [pc, #476]	; (8001940 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001762:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001764:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001766:	d15b      	bne.n	8001820 <HAL_DMAEx_MultiBufferStart_IT+0x218>
 8001768:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800176a:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800176c:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800176e:	f040 808f 	bne.w	8001890 <HAL_DMAEx_MultiBufferStart_IT+0x288>
 8001772:	2208      	movs	r2, #8
 8001774:	4972      	ldr	r1, [pc, #456]	; (8001940 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001776:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001778:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800177a:	f040 80c1 	bne.w	8001900 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>
 800177e:	4a6a      	ldr	r2, [pc, #424]	; (8001928 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8001780:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001782:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8001784:	f040 810a 	bne.w	800199c <HAL_DMAEx_MultiBufferStart_IT+0x394>
 8001788:	4b68      	ldr	r3, [pc, #416]	; (800192c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 800178a:	4a6d      	ldr	r2, [pc, #436]	; (8001940 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 800178c:	e78b      	b.n	80016a6 <HAL_DMAEx_MultiBufferStart_IT+0x9e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800178e:	2220      	movs	r2, #32
 8001790:	e7e6      	b.n	8001760 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8001792:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001796:	e7e3      	b.n	8001760 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8001798:	4b6a      	ldr	r3, [pc, #424]	; (8001944 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 800179a:	429c      	cmp	r4, r3
 800179c:	d01f      	beq.n	80017de <HAL_DMAEx_MultiBufferStart_IT+0x1d6>
 800179e:	4a6a      	ldr	r2, [pc, #424]	; (8001948 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 80017a0:	4294      	cmp	r4, r2
 80017a2:	d01e      	beq.n	80017e2 <HAL_DMAEx_MultiBufferStart_IT+0x1da>
 80017a4:	3218      	adds	r2, #24
 80017a6:	4294      	cmp	r4, r2
 80017a8:	bf14      	ite	ne
 80017aa:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 80017ae:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 80017b2:	4963      	ldr	r1, [pc, #396]	; (8001940 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017b4:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80017b6:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017b8:	d140      	bne.n	800183c <HAL_DMAEx_MultiBufferStart_IT+0x234>
 80017ba:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80017bc:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017be:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80017c0:	d174      	bne.n	80018ac <HAL_DMAEx_MultiBufferStart_IT+0x2a4>
 80017c2:	2208      	movs	r2, #8
 80017c4:	495e      	ldr	r1, [pc, #376]	; (8001940 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80017c6:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80017c8:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80017ca:	f040 80bf 	bne.w	800194c <HAL_DMAEx_MultiBufferStart_IT+0x344>
 80017ce:	4a56      	ldr	r2, [pc, #344]	; (8001928 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80017d0:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80017d2:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80017d4:	f040 80ef 	bne.w	80019b6 <HAL_DMAEx_MultiBufferStart_IT+0x3ae>
 80017d8:	4b54      	ldr	r3, [pc, #336]	; (800192c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80017da:	4a59      	ldr	r2, [pc, #356]	; (8001940 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 80017dc:	e7a9      	b.n	8001732 <HAL_DMAEx_MultiBufferStart_IT+0x12a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80017de:	2220      	movs	r2, #32
 80017e0:	e7e7      	b.n	80017b2 <HAL_DMAEx_MultiBufferStart_IT+0x1aa>
 80017e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017e6:	e7e4      	b.n	80017b2 <HAL_DMAEx_MultiBufferStart_IT+0x1aa>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017e8:	4a4d      	ldr	r2, [pc, #308]	; (8001920 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80017ea:	4294      	cmp	r4, r2
 80017ec:	d007      	beq.n	80017fe <HAL_DMAEx_MultiBufferStart_IT+0x1f6>
 80017ee:	3218      	adds	r2, #24
 80017f0:	4294      	cmp	r4, r2
 80017f2:	bf14      	ite	ne
 80017f4:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 80017f8:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 80017fc:	e742      	b.n	8001684 <HAL_DMAEx_MultiBufferStart_IT+0x7c>
 80017fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001802:	e73f      	b.n	8001684 <HAL_DMAEx_MultiBufferStart_IT+0x7c>
 8001804:	4a4b      	ldr	r2, [pc, #300]	; (8001934 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8001806:	4294      	cmp	r4, r2
 8001808:	d007      	beq.n	800181a <HAL_DMAEx_MultiBufferStart_IT+0x212>
 800180a:	3218      	adds	r2, #24
 800180c:	4294      	cmp	r4, r2
 800180e:	bf14      	ite	ne
 8001810:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8001814:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8001818:	e77a      	b.n	8001710 <HAL_DMAEx_MultiBufferStart_IT+0x108>
 800181a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800181e:	e777      	b.n	8001710 <HAL_DMAEx_MultiBufferStart_IT+0x108>
 8001820:	4a46      	ldr	r2, [pc, #280]	; (800193c <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8001822:	4294      	cmp	r4, r2
 8001824:	d007      	beq.n	8001836 <HAL_DMAEx_MultiBufferStart_IT+0x22e>
 8001826:	3218      	adds	r2, #24
 8001828:	4294      	cmp	r4, r2
 800182a:	bf14      	ite	ne
 800182c:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8001830:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8001834:	e799      	b.n	800176a <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8001836:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800183a:	e796      	b.n	800176a <HAL_DMAEx_MultiBufferStart_IT+0x162>
 800183c:	4a42      	ldr	r2, [pc, #264]	; (8001948 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 800183e:	4294      	cmp	r4, r2
 8001840:	d007      	beq.n	8001852 <HAL_DMAEx_MultiBufferStart_IT+0x24a>
 8001842:	3218      	adds	r2, #24
 8001844:	4294      	cmp	r4, r2
 8001846:	bf14      	ite	ne
 8001848:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 800184c:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8001850:	e7b4      	b.n	80017bc <HAL_DMAEx_MultiBufferStart_IT+0x1b4>
 8001852:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001856:	e7b1      	b.n	80017bc <HAL_DMAEx_MultiBufferStart_IT+0x1b4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001858:	4a31      	ldr	r2, [pc, #196]	; (8001920 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800185a:	4294      	cmp	r4, r2
 800185c:	d007      	beq.n	800186e <HAL_DMAEx_MultiBufferStart_IT+0x266>
 800185e:	3218      	adds	r2, #24
 8001860:	4294      	cmp	r4, r2
 8001862:	bf14      	ite	ne
 8001864:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8001868:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 800186c:	e70f      	b.n	800168e <HAL_DMAEx_MultiBufferStart_IT+0x86>
 800186e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001872:	e70c      	b.n	800168e <HAL_DMAEx_MultiBufferStart_IT+0x86>
 8001874:	4a2f      	ldr	r2, [pc, #188]	; (8001934 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8001876:	4294      	cmp	r4, r2
 8001878:	d007      	beq.n	800188a <HAL_DMAEx_MultiBufferStart_IT+0x282>
 800187a:	3218      	adds	r2, #24
 800187c:	4294      	cmp	r4, r2
 800187e:	bf14      	ite	ne
 8001880:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8001884:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 8001888:	e747      	b.n	800171a <HAL_DMAEx_MultiBufferStart_IT+0x112>
 800188a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800188e:	e744      	b.n	800171a <HAL_DMAEx_MultiBufferStart_IT+0x112>
 8001890:	4a2a      	ldr	r2, [pc, #168]	; (800193c <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8001892:	4294      	cmp	r4, r2
 8001894:	d007      	beq.n	80018a6 <HAL_DMAEx_MultiBufferStart_IT+0x29e>
 8001896:	3218      	adds	r2, #24
 8001898:	4294      	cmp	r4, r2
 800189a:	bf14      	ite	ne
 800189c:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 80018a0:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 80018a4:	e766      	b.n	8001774 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80018a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018aa:	e763      	b.n	8001774 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80018ac:	4a26      	ldr	r2, [pc, #152]	; (8001948 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 80018ae:	4294      	cmp	r4, r2
 80018b0:	d007      	beq.n	80018c2 <HAL_DMAEx_MultiBufferStart_IT+0x2ba>
 80018b2:	3218      	adds	r2, #24
 80018b4:	4294      	cmp	r4, r2
 80018b6:	bf14      	ite	ne
 80018b8:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 80018bc:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 80018c0:	e780      	b.n	80017c4 <HAL_DMAEx_MultiBufferStart_IT+0x1bc>
 80018c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c6:	e77d      	b.n	80017c4 <HAL_DMAEx_MultiBufferStart_IT+0x1bc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80018c8:	4a15      	ldr	r2, [pc, #84]	; (8001920 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80018ca:	4294      	cmp	r4, r2
 80018cc:	d007      	beq.n	80018de <HAL_DMAEx_MultiBufferStart_IT+0x2d6>
 80018ce:	3218      	adds	r2, #24
 80018d0:	4294      	cmp	r4, r2
 80018d2:	bf14      	ite	ne
 80018d4:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 80018d8:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 80018dc:	e6dd      	b.n	800169a <HAL_DMAEx_MultiBufferStart_IT+0x92>
 80018de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e2:	e6da      	b.n	800169a <HAL_DMAEx_MultiBufferStart_IT+0x92>
 80018e4:	4a13      	ldr	r2, [pc, #76]	; (8001934 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 80018e6:	4294      	cmp	r4, r2
 80018e8:	d007      	beq.n	80018fa <HAL_DMAEx_MultiBufferStart_IT+0x2f2>
 80018ea:	3218      	adds	r2, #24
 80018ec:	4294      	cmp	r4, r2
 80018ee:	bf14      	ite	ne
 80018f0:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 80018f4:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 80018f8:	e715      	b.n	8001726 <HAL_DMAEx_MultiBufferStart_IT+0x11e>
 80018fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018fe:	e712      	b.n	8001726 <HAL_DMAEx_MultiBufferStart_IT+0x11e>
 8001900:	4a0e      	ldr	r2, [pc, #56]	; (800193c <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8001902:	4294      	cmp	r4, r2
 8001904:	d007      	beq.n	8001916 <HAL_DMAEx_MultiBufferStart_IT+0x30e>
 8001906:	3218      	adds	r2, #24
 8001908:	4294      	cmp	r4, r2
 800190a:	bf14      	ite	ne
 800190c:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 8001910:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 8001914:	e734      	b.n	8001780 <HAL_DMAEx_MultiBufferStart_IT+0x178>
 8001916:	f44f 7280 	mov.w	r2, #256	; 0x100
 800191a:	e731      	b.n	8001780 <HAL_DMAEx_MultiBufferStart_IT+0x178>
 800191c:	40026458 	.word	0x40026458
 8001920:	40026488 	.word	0x40026488
 8001924:	40026400 	.word	0x40026400
 8001928:	00800004 	.word	0x00800004
 800192c:	00800001 	.word	0x00800001
 8001930:	400260b8 	.word	0x400260b8
 8001934:	40026428 	.word	0x40026428
 8001938:	40026058 	.word	0x40026058
 800193c:	40026088 	.word	0x40026088
 8001940:	40026000 	.word	0x40026000
 8001944:	40026010 	.word	0x40026010
 8001948:	40026028 	.word	0x40026028
 800194c:	4a22      	ldr	r2, [pc, #136]	; (80019d8 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>)
 800194e:	4294      	cmp	r4, r2
 8001950:	d007      	beq.n	8001962 <HAL_DMAEx_MultiBufferStart_IT+0x35a>
 8001952:	3218      	adds	r2, #24
 8001954:	4294      	cmp	r4, r2
 8001956:	bf14      	ite	ne
 8001958:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 800195c:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 8001960:	e736      	b.n	80017d0 <HAL_DMAEx_MultiBufferStart_IT+0x1c8>
 8001962:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001966:	e733      	b.n	80017d0 <HAL_DMAEx_MultiBufferStart_IT+0x1c8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8001968:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <HAL_DMAEx_MultiBufferStart_IT+0x3d4>)
 800196a:	429c      	cmp	r4, r3
 800196c:	d007      	beq.n	800197e <HAL_DMAEx_MultiBufferStart_IT+0x376>
 800196e:	3318      	adds	r3, #24
 8001970:	429c      	cmp	r4, r3
 8001972:	bf14      	ite	ne
 8001974:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 8001978:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800197c:	e692      	b.n	80016a4 <HAL_DMAEx_MultiBufferStart_IT+0x9c>
 800197e:	2340      	movs	r3, #64	; 0x40
 8001980:	e690      	b.n	80016a4 <HAL_DMAEx_MultiBufferStart_IT+0x9c>
 8001982:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>)
 8001984:	429c      	cmp	r4, r3
 8001986:	d007      	beq.n	8001998 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8001988:	3318      	adds	r3, #24
 800198a:	429c      	cmp	r4, r3
 800198c:	bf14      	ite	ne
 800198e:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 8001992:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8001996:	e6cb      	b.n	8001730 <HAL_DMAEx_MultiBufferStart_IT+0x128>
 8001998:	2340      	movs	r3, #64	; 0x40
 800199a:	e6c9      	b.n	8001730 <HAL_DMAEx_MultiBufferStart_IT+0x128>
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 800199e:	429c      	cmp	r4, r3
 80019a0:	d007      	beq.n	80019b2 <HAL_DMAEx_MultiBufferStart_IT+0x3aa>
 80019a2:	3318      	adds	r3, #24
 80019a4:	429c      	cmp	r4, r3
 80019a6:	bf14      	ite	ne
 80019a8:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 80019ac:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80019b0:	e6eb      	b.n	800178a <HAL_DMAEx_MultiBufferStart_IT+0x182>
 80019b2:	2340      	movs	r3, #64	; 0x40
 80019b4:	e6e9      	b.n	800178a <HAL_DMAEx_MultiBufferStart_IT+0x182>
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>)
 80019b8:	429c      	cmp	r4, r3
 80019ba:	d007      	beq.n	80019cc <HAL_DMAEx_MultiBufferStart_IT+0x3c4>
 80019bc:	3318      	adds	r3, #24
 80019be:	429c      	cmp	r4, r3
 80019c0:	bf14      	ite	ne
 80019c2:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 80019c6:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80019ca:	e706      	b.n	80017da <HAL_DMAEx_MultiBufferStart_IT+0x1d2>
 80019cc:	2340      	movs	r3, #64	; 0x40
 80019ce:	e704      	b.n	80017da <HAL_DMAEx_MultiBufferStart_IT+0x1d2>
    __HAL_UNLOCK(hdma);	  
 80019d0:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80019d4:	2002      	movs	r0, #2
}
 80019d6:	bd70      	pop	{r4, r5, r6, pc}
 80019d8:	40026028 	.word	0x40026028
 80019dc:	40026488 	.word	0x40026488
 80019e0:	40026428 	.word	0x40026428
 80019e4:	40026088 	.word	0x40026088

080019e8 <ETH_FlushTransmitFIFO>:
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
 80019e8:	2300      	movs	r3, #0
{
 80019ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80019ec:	f241 0418 	movw	r4, #4120	; 0x1018
  __IO uint32_t tmpreg = 0;
 80019f0:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80019f2:	6803      	ldr	r3, [r0, #0]
{
 80019f4:	4605      	mov	r5, r0
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019f6:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80019f8:	591a      	ldr	r2, [r3, r4]
 80019fa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80019fe:	511a      	str	r2, [r3, r4]
  tmpreg = (heth->Instance)->DMAOMR;
 8001a00:	591b      	ldr	r3, [r3, r4]
 8001a02:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a04:	f7ff f850 	bl	8000aa8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001a08:	682b      	ldr	r3, [r5, #0]
 8001a0a:	9a01      	ldr	r2, [sp, #4]
 8001a0c:	511a      	str	r2, [r3, r4]
}
 8001a0e:	b003      	add	sp, #12
 8001a10:	bd30      	pop	{r4, r5, pc}
	...

08001a14 <ETH_MACDMAConfig>:
{
 8001a14:	b570      	push	{r4, r5, r6, lr}
 8001a16:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001a18:	b129      	cbz	r1, 8001a26 <ETH_MACDMAConfig+0x12>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001a1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a1e:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8001a20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a24:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001a26:	69e3      	ldr	r3, [r4, #28]
  tmpreg = (heth->Instance)->MACCR;
 8001a28:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001a2a:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 8001a2c:	68e0      	ldr	r0, [r4, #12]
 8001a2e:	68a3      	ldr	r3, [r4, #8]
  tmpreg = (heth->Instance)->MACCR;
 8001a30:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001a32:	bf08      	it	eq
 8001a34:	f44f 6180 	moveq.w	r1, #1024	; 0x400
                       macinit.LoopbackMode |
 8001a38:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001a3c:	482e      	ldr	r0, [pc, #184]	; (8001af8 <ETH_MACDMAConfig+0xe4>)
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001a3e:	bf18      	it	ne
 8001a40:	2100      	movne	r1, #0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001a42:	4028      	ands	r0, r5
 8001a44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a48:	4303      	orrs	r3, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a4a:	2001      	movs	r0, #1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001a4c:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001a4e:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8001a50:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a52:	f7ff f829 	bl	8000aa8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001a56:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a58:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a5a:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 8001a5c:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a5e:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 8001a60:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a62:	f7ff f821 	bl	8000aa8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001a66:	6823      	ldr	r3, [r4, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a68:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 8001a6a:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001a6c:	2500      	movs	r5, #0
 8001a6e:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001a70:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 8001a72:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001a74:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8001a78:	0412      	lsls	r2, r2, #16
 8001a7a:	0c12      	lsrs	r2, r2, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001a7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001a80:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 8001a82:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a84:	f7ff f810 	bl	8000aa8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001a88:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a8a:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 8001a8c:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001a8e:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 8001a90:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a92:	f7ff f809 	bl	8000aa8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001a96:	6822      	ldr	r2, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a98:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001a9a:	4b18      	ldr	r3, [pc, #96]	; (8001afc <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg;
 8001a9c:	61d5      	str	r5, [r2, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 8001a9e:	f241 0518 	movw	r5, #4120	; 0x1018
 8001aa2:	5951      	ldr	r1, [r2, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001aa4:	400b      	ands	r3, r1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001aa6:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001aae:	5153      	str	r3, [r2, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 8001ab0:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ab2:	f7fe fff9 	bl	8000aa8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001ab6:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ab8:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001aba:	4a11      	ldr	r2, [pc, #68]	; (8001b00 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg;
 8001abc:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac2:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 8001ac4:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ac6:	f7fe ffef 	bl	8000aa8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001aca:	6822      	ldr	r2, [r4, #0]
 8001acc:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8001ad0:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001ad2:	69a3      	ldr	r3, [r4, #24]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d107      	bne.n	8001ae8 <ETH_MACDMAConfig+0xd4>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001ad8:	f241 011c 	movw	r1, #4124	; 0x101c
 8001adc:	5853      	ldr	r3, [r2, r1]
 8001ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ae6:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001ae8:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001aea:	4a06      	ldr	r2, [pc, #24]	; (8001b04 <ETH_MACDMAConfig+0xf0>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001aec:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001aee:	6011      	str	r1, [r2, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001af0:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <ETH_MACDMAConfig+0xf4>)
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	bd70      	pop	{r4, r5, r6, pc}
 8001af8:	ff20810f 	.word	0xff20810f
 8001afc:	f8de3f23 	.word	0xf8de3f23
 8001b00:	02c12080 	.word	0x02c12080
 8001b04:	40028040 	.word	0x40028040
 8001b08:	40028044 	.word	0x40028044

08001b0c <HAL_ETH_DMATxDescListInit>:
{
 8001b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8001b0e:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8001b12:	2c01      	cmp	r4, #1
 8001b14:	f04f 0402 	mov.w	r4, #2
 8001b18:	d033      	beq.n	8001b82 <HAL_ETH_DMATxDescListInit+0x76>
 8001b1a:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8001b1c:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001b20:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 8001b24:	f101 0420 	add.w	r4, r1, #32
  __HAL_LOCK(heth);
 8001b28:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001b2c:	f240 5ef4 	movw	lr, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
 8001b30:	2500      	movs	r5, #0
    if(i < (TxBuffCount-1))
 8001b32:	f103 3cff 	add.w	ip, r3, #4294967295
  heth->TxDesc = DMATxDescTab;
 8001b36:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0; i < TxBuffCount; i++)
 8001b38:	429d      	cmp	r5, r3
 8001b3a:	d10b      	bne.n	8001b54 <HAL_ETH_DMATxDescListInit+0x48>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001b3c:	6802      	ldr	r2, [r0, #0]
 8001b3e:	f241 0310 	movw	r3, #4112	; 0x1010
 8001b42:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8001b44:	2301      	movs	r3, #1
 8001b46:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8001b50:	4618      	mov	r0, r3
 8001b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001b54:	fb0e 2605 	mla	r6, lr, r5, r2
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001b58:	f844 7c20 	str.w	r7, [r4, #-32]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001b5c:	f844 6c18 	str.w	r6, [r4, #-24]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001b60:	69c6      	ldr	r6, [r0, #28]
 8001b62:	b92e      	cbnz	r6, 8001b70 <HAL_ETH_DMATxDescListInit+0x64>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001b64:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8001b68:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8001b6c:	f844 6c20 	str.w	r6, [r4, #-32]
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001b70:	4565      	cmp	r5, ip
 8001b72:	bf2c      	ite	cs
 8001b74:	460e      	movcs	r6, r1
 8001b76:	4626      	movcc	r6, r4
  for(i=0; i < TxBuffCount; i++)
 8001b78:	3501      	adds	r5, #1
 8001b7a:	3420      	adds	r4, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001b7c:	f844 6c34 	str.w	r6, [r4, #-52]
 8001b80:	e7da      	b.n	8001b38 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 8001b82:	4620      	mov	r0, r4
}
 8001b84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b86 <HAL_ETH_DMARxDescListInit>:
{
 8001b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 8001b8a:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8001b8e:	2c01      	cmp	r4, #1
 8001b90:	f04f 0402 	mov.w	r4, #2
 8001b94:	d030      	beq.n	8001bf8 <HAL_ETH_DMARxDescListInit+0x72>
 8001b96:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8001b98:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001b9c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8001ba0:	f101 0420 	add.w	r4, r1, #32
  __HAL_LOCK(heth);
 8001ba4:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001ba8:	f244 57f4 	movw	r7, #17908	; 0x45f4
  for(i=0; i < RxBuffCount; i++)
 8001bac:	2500      	movs	r5, #0
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001bae:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 8001bb2:	f103 3cff 	add.w	ip, r3, #4294967295
  heth->RxDesc = DMARxDescTab; 
 8001bb6:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0; i < RxBuffCount; i++)
 8001bb8:	429d      	cmp	r5, r3
 8001bba:	d10c      	bne.n	8001bd6 <HAL_ETH_DMARxDescListInit+0x50>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001bbc:	6802      	ldr	r2, [r0, #0]
 8001bbe:	f241 030c 	movw	r3, #4108	; 0x100c
 8001bc2:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001bd6:	fb0e 2805 	mla	r8, lr, r5, r2
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001bda:	f844 6c20 	str.w	r6, [r4, #-32]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001bde:	f844 8c18 	str.w	r8, [r4, #-24]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001be2:	4565      	cmp	r5, ip
 8001be4:	bf2c      	ite	cs
 8001be6:	4688      	movcs	r8, r1
 8001be8:	46a0      	movcc	r8, r4
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001bea:	f844 7c1c 	str.w	r7, [r4, #-28]
  for(i=0; i < RxBuffCount; i++)
 8001bee:	3501      	adds	r5, #1
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001bf0:	f844 8c14 	str.w	r8, [r4, #-20]
 8001bf4:	3420      	adds	r4, #32
 8001bf6:	e7df      	b.n	8001bb8 <HAL_ETH_DMARxDescListInit+0x32>
  __HAL_LOCK(heth);
 8001bf8:	4620      	mov	r0, r4
}
 8001bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001c00 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8001c00:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	f04f 0302 	mov.w	r3, #2
{
 8001c0a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8001c0c:	d066      	beq.n	8001cdc <HAL_ETH_TransmitFrame+0xdc>
 8001c0e:	2201      	movs	r2, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8001c10:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 8001c14:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  if (FrameLength == 0) 
 8001c18:	b929      	cbnz	r1, 8001c26 <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 8001c1a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8001c1e:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 8001c22:	4610      	mov	r0, r2
 8001c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001c26:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001c28:	681c      	ldr	r4, [r3, #0]
 8001c2a:	2c00      	cmp	r4, #0
 8001c2c:	da06      	bge.n	8001c3c <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001c2e:	2312      	movs	r3, #18
 8001c30:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8001c34:	2300      	movs	r3, #0
 8001c36:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8001c3a:	e7f2      	b.n	8001c22 <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001c3c:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8001c40:	42a1      	cmp	r1, r4
 8001c42:	d92c      	bls.n	8001c9e <HAL_ETH_TransmitFrame+0x9e>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001c44:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001c48:	fb04 1412 	mls	r4, r4, r2, r1
 8001c4c:	b32c      	cbz	r4, 8001c9a <HAL_ETH_TransmitFrame+0x9a>
      bufcount++;
 8001c4e:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001c50:	4c23      	ldr	r4, [pc, #140]	; (8001ce0 <HAL_ETH_TransmitFrame+0xe0>)
 8001c52:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001c56:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1))
 8001c5a:	1e57      	subs	r7, r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001c5c:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001c60:	2400      	movs	r4, #0
 8001c62:	f3c1 010c 	ubfx	r1, r1, #0, #13
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001c66:	681d      	ldr	r5, [r3, #0]
 8001c68:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 8001c6c:	601d      	str	r5, [r3, #0]
      if (i == 0) 
 8001c6e:	b91c      	cbnz	r4, 8001c78 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001c70:	681d      	ldr	r5, [r3, #0]
 8001c72:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8001c76:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1))
 8001c78:	42a7      	cmp	r7, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001c7a:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1))
 8001c7c:	d104      	bne.n	8001c88 <HAL_ETH_TransmitFrame+0x88>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001c7e:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001c80:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001c82:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8001c86:	601d      	str	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001c88:	681d      	ldr	r5, [r3, #0]
    for (i=0; i< bufcount; i++)
 8001c8a:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001c8c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 8001c90:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001c92:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001c94:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 8001c96:	d1e6      	bne.n	8001c66 <HAL_ETH_TransmitFrame+0x66>
 8001c98:	e00d      	b.n	8001cb6 <HAL_ETH_TransmitFrame+0xb6>
  if (bufcount == 1)
 8001c9a:	2a01      	cmp	r2, #1
 8001c9c:	d1d8      	bne.n	8001c50 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001c9e:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001ca0:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001ca4:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001ca8:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001caa:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cb2:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001cb8:	f241 0214 	movw	r2, #4116	; 0x1014
 8001cbc:	6803      	ldr	r3, [r0, #0]
 8001cbe:	5899      	ldr	r1, [r3, r2]
 8001cc0:	0749      	lsls	r1, r1, #29
 8001cc2:	d505      	bpl.n	8001cd0 <HAL_ETH_TransmitFrame+0xd0>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001cc4:	2104      	movs	r1, #4
 8001cc6:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0;
 8001cc8:	2100      	movs	r1, #0
 8001cca:	f241 0204 	movw	r2, #4100	; 0x1004
 8001cce:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 8001cdc:	4618      	mov	r0, r3
}
 8001cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ce0:	fffffa0c 	.word	0xfffffa0c

08001ce4 <HAL_ETH_GetReceivedFrame>:
  __HAL_LOCK(heth);
 8001ce4:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	f04f 0302 	mov.w	r3, #2
{
 8001cee:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(heth);
 8001cf0:	d023      	beq.n	8001d3a <HAL_ETH_GetReceivedFrame+0x56>
  heth->State = HAL_ETH_STATE_BUSY;
 8001cf2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 8001cf6:	2401      	movs	r4, #1
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001cf8:	6a83      	ldr	r3, [r0, #40]	; 0x28
  __HAL_LOCK(heth);
 8001cfa:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	2a00      	cmp	r2, #0
 8001d02:	db27      	blt.n	8001d54 <HAL_ETH_GetReceivedFrame+0x70>
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68d9      	ldr	r1, [r3, #12]
 8001d08:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001d0c:	d017      	beq.n	8001d3e <HAL_ETH_GetReceivedFrame+0x5a>
      (heth->RxFrameInfos).SegCount++;
 8001d0e:	6b82      	ldr	r2, [r0, #56]	; 0x38
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001d10:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount++;
 8001d12:	4422      	add	r2, r4
      if ((heth->RxFrameInfos).SegCount == 1)
 8001d14:	42a2      	cmp	r2, r4
      (heth->RxFrameInfos).SegCount++;
 8001d16:	6382      	str	r2, [r0, #56]	; 0x38
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001d18:	bf08      	it	eq
 8001d1a:	6303      	streq	r3, [r0, #48]	; 0x30
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8001d22:	3b04      	subs	r3, #4
      heth->RxFrameInfos.length = framelength;
 8001d24:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001d26:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001d28:	689b      	ldr	r3, [r3, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001d2a:	6281      	str	r1, [r0, #40]	; 0x28
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001d2c:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8001d34:	2300      	movs	r3, #0
 8001d36:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	bd30      	pop	{r4, r5, pc}
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001d3e:	681d      	ldr	r5, [r3, #0]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001d40:	6281      	str	r1, [r0, #40]	; 0x28
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001d42:	05ad      	lsls	r5, r5, #22
      (heth->RxFrameInfos).SegCount++;
 8001d44:	bf55      	itete	pl
 8001d46:	6b83      	ldrpl	r3, [r0, #56]	; 0x38
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001d48:	6303      	strmi	r3, [r0, #48]	; 0x30
      (heth->RxFrameInfos).SegCount++;
 8001d4a:	3301      	addpl	r3, #1
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001d4c:	6342      	strmi	r2, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001d4e:	bf4c      	ite	mi
 8001d50:	6384      	strmi	r4, [r0, #56]	; 0x38
      (heth->RxFrameInfos).SegCount++;
 8001d52:	6383      	strpl	r3, [r0, #56]	; 0x38
  heth->State = HAL_ETH_STATE_READY;
 8001d54:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8001d56:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8001d58:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001d5c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8001d60:	e7eb      	b.n	8001d3a <HAL_ETH_GetReceivedFrame+0x56>

08001d62 <HAL_ETH_TxCpltCallback>:
 8001d62:	4770      	bx	lr

08001d64 <HAL_ETH_RxCpltCallback>:
 8001d64:	4770      	bx	lr

08001d66 <HAL_ETH_ErrorCallback>:
{
 8001d66:	4770      	bx	lr

08001d68 <HAL_ETH_IRQHandler>:
{
 8001d68:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001d6a:	6802      	ldr	r2, [r0, #0]
 8001d6c:	f241 0614 	movw	r6, #4116	; 0x1014
{
 8001d70:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001d72:	5995      	ldr	r5, [r2, r6]
 8001d74:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001d78:	d021      	beq.n	8001dbe <HAL_ETH_IRQHandler+0x56>
    HAL_ETH_RxCpltCallback(heth);
 8001d7a:	f7ff fff3 	bl	8001d64 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001d7e:	6823      	ldr	r3, [r4, #0]
 8001d80:	2240      	movs	r2, #64	; 0x40
 8001d82:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8001d84:	2301      	movs	r3, #1
 8001d86:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001d90:	6823      	ldr	r3, [r4, #0]
 8001d92:	f241 0514 	movw	r5, #4116	; 0x1014
 8001d96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d9a:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001d9c:	595b      	ldr	r3, [r3, r5]
 8001d9e:	041b      	lsls	r3, r3, #16
 8001da0:	d50c      	bpl.n	8001dbc <HAL_ETH_IRQHandler+0x54>
    HAL_ETH_ErrorCallback(heth);
 8001da2:	4620      	mov	r0, r4
 8001da4:	f7ff ffdf 	bl	8001d66 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001da8:	6823      	ldr	r3, [r4, #0]
 8001daa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001dae:	515a      	str	r2, [r3, r5]
    heth->State = HAL_ETH_STATE_READY;
 8001db0:	2301      	movs	r3, #1
 8001db2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8001db6:	2300      	movs	r3, #0
 8001db8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001dbc:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001dbe:	5993      	ldr	r3, [r2, r6]
 8001dc0:	07da      	lsls	r2, r3, #31
 8001dc2:	d5e5      	bpl.n	8001d90 <HAL_ETH_IRQHandler+0x28>
    HAL_ETH_TxCpltCallback(heth);
 8001dc4:	f7ff ffcd 	bl	8001d62 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001dc8:	2301      	movs	r3, #1
 8001dca:	6822      	ldr	r2, [r4, #0]
 8001dcc:	5193      	str	r3, [r2, r6]
    heth->State = HAL_ETH_STATE_READY;
 8001dce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8001dd2:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8001dd6:	e7db      	b.n	8001d90 <HAL_ETH_IRQHandler+0x28>

08001dd8 <HAL_ETH_ReadPHYRegister>:
{
 8001dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001dda:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 8001dde:	4605      	mov	r5, r0
 8001de0:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001de2:	2b82      	cmp	r3, #130	; 0x82
 8001de4:	d030      	beq.n	8001e48 <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg = heth->Instance->MACMIIAR;
 8001de6:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001de8:	2382      	movs	r3, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001dea:	0189      	lsls	r1, r1, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001dec:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8001df0:	6913      	ldr	r3, [r2, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001df2:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001df6:	f003 011c 	and.w	r1, r3, #28
 8001dfa:	4321      	orrs	r1, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001dfc:	8a04      	ldrh	r4, [r0, #16]
 8001dfe:	02e4      	lsls	r4, r4, #11
 8001e00:	b2a4      	uxth	r4, r4
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001e02:	430c      	orrs	r4, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001e04:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 8001e08:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8001e0a:	f7fe fe47 	bl	8000a9c <HAL_GetTick>
 8001e0e:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e10:	f014 0001 	ands.w	r0, r4, #1
 8001e14:	d107      	bne.n	8001e26 <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001e16:	682b      	ldr	r3, [r5, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8001e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001e26:	f7fe fe39 	bl	8000a9c <HAL_GetTick>
 8001e2a:	1bc0      	subs	r0, r0, r7
 8001e2c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001e30:	d307      	bcc.n	8001e42 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8001e32:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8001e34:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8001e36:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8001e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8001e42:	682b      	ldr	r3, [r5, #0]
 8001e44:	691c      	ldr	r4, [r3, #16]
 8001e46:	e7e3      	b.n	8001e10 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8001e48:	2002      	movs	r0, #2
}
 8001e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001e4c <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001e4c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8001e50:	2b42      	cmp	r3, #66	; 0x42
{
 8001e52:	b570      	push	{r4, r5, r6, lr}
 8001e54:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001e56:	d02e      	beq.n	8001eb6 <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001e58:	2342      	movs	r3, #66	; 0x42
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001e5a:	018c      	lsls	r4, r1, #6
 8001e5c:	b292      	uxth	r2, r2
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001e5e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001e62:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 8001e66:	6803      	ldr	r3, [r0, #0]
 8001e68:	f044 0403 	orr.w	r4, r4, #3
 8001e6c:	6918      	ldr	r0, [r3, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001e6e:	f000 001c 	and.w	r0, r0, #28
 8001e72:	4320      	orrs	r0, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001e74:	8a2c      	ldrh	r4, [r5, #16]
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e76:	615a      	str	r2, [r3, #20]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001e78:	02e4      	lsls	r4, r4, #11
 8001e7a:	b2a4      	uxth	r4, r4
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001e7c:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg;
 8001e7e:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8001e80:	f7fe fe0c 	bl	8000a9c <HAL_GetTick>
 8001e84:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e86:	f014 0001 	ands.w	r0, r4, #1
 8001e8a:	d103      	bne.n	8001e94 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8001e92:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001e94:	f7fe fe02 	bl	8000a9c <HAL_GetTick>
 8001e98:	1b80      	subs	r0, r0, r6
 8001e9a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001e9e:	d307      	bcc.n	8001eb0 <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8001ea0:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8001ea2:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8001ea4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 8001eae:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8001eb0:	682b      	ldr	r3, [r5, #0]
 8001eb2:	691c      	ldr	r4, [r3, #16]
 8001eb4:	e7e7      	b.n	8001e86 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8001eb6:	2002      	movs	r0, #2
}
 8001eb8:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ebc <HAL_ETH_Init>:
  uint32_t tempreg = 0, phyreg = 0;
 8001ebc:	2300      	movs	r3, #0
{
 8001ebe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(heth == NULL)
 8001ec0:	4604      	mov	r4, r0
  uint32_t tempreg = 0, phyreg = 0;
 8001ec2:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8001ec4:	2800      	cmp	r0, #0
 8001ec6:	f000 80dc 	beq.w	8002082 <HAL_ETH_Init+0x1c6>
  if(heth->State == HAL_ETH_STATE_RESET)
 8001eca:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8001ece:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ed2:	b91b      	cbnz	r3, 8001edc <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8001ed4:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8001ed8:	f006 f9fa 	bl	80082d0 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001edc:	4b6a      	ldr	r3, [pc, #424]	; (8002088 <HAL_ETH_Init+0x1cc>)
 8001ede:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ee0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ee4:	645a      	str	r2, [r3, #68]	; 0x44
 8001ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eec:	9301      	str	r3, [sp, #4]
 8001eee:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001ef0:	4b66      	ldr	r3, [pc, #408]	; (800208c <HAL_ETH_Init+0x1d0>)
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001ef8:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	6a21      	ldr	r1, [r4, #32]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001f02:	6823      	ldr	r3, [r4, #0]
 8001f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	f042 0201 	orr.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001f10:	f7fe fdc4 	bl	8000a9c <HAL_GetTick>
 8001f14:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001f16:	6823      	ldr	r3, [r4, #0]
 8001f18:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	07d0      	lsls	r0, r2, #31
 8001f20:	d41d      	bmi.n	8001f5e <HAL_ETH_Init+0xa2>
  tempreg = (heth->Instance)->MACMIIAR;
 8001f22:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8001f24:	f000 fcc8 	bl	80028b8 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001f28:	4b59      	ldr	r3, [pc, #356]	; (8002090 <HAL_ETH_Init+0x1d4>)
 8001f2a:	4a5a      	ldr	r2, [pc, #360]	; (8002094 <HAL_ETH_Init+0x1d8>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001f2c:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001f30:	4403      	add	r3, r0
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d822      	bhi.n	8001f7c <HAL_ETH_Init+0xc0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001f36:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001f3a:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001f3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f40:	2100      	movs	r1, #0
 8001f42:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001f44:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001f46:	f7ff ff81 	bl	8001e4c <HAL_ETH_WritePHYRegister>
 8001f4a:	4605      	mov	r5, r0
 8001f4c:	b368      	cbz	r0, 8001faa <HAL_ETH_Init+0xee>
      heth->State = HAL_ETH_STATE_READY;
 8001f4e:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8001f50:	2101      	movs	r1, #1
 8001f52:	4620      	mov	r0, r4
 8001f54:	f7ff fd5e 	bl	8001a14 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8001f58:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001f5c:	e00b      	b.n	8001f76 <HAL_ETH_Init+0xba>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001f5e:	f7fe fd9d 	bl	8000a9c <HAL_GetTick>
 8001f62:	1b40      	subs	r0, r0, r5
 8001f64:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001f68:	d9d5      	bls.n	8001f16 <HAL_ETH_Init+0x5a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001f6a:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8001f6c:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001f6e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8001f72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8001f76:	4628      	mov	r0, r5
 8001f78:	b003      	add	sp, #12
 8001f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001f7c:	4b46      	ldr	r3, [pc, #280]	; (8002098 <HAL_ETH_Init+0x1dc>)
 8001f7e:	4a47      	ldr	r2, [pc, #284]	; (800209c <HAL_ETH_Init+0x1e0>)
 8001f80:	4403      	add	r3, r0
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d802      	bhi.n	8001f8c <HAL_ETH_Init+0xd0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001f86:	f045 050c 	orr.w	r5, r5, #12
 8001f8a:	e7d6      	b.n	8001f3a <HAL_ETH_Init+0x7e>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001f8c:	4b44      	ldr	r3, [pc, #272]	; (80020a0 <HAL_ETH_Init+0x1e4>)
 8001f8e:	4a45      	ldr	r2, [pc, #276]	; (80020a4 <HAL_ETH_Init+0x1e8>)
 8001f90:	4403      	add	r3, r0
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d9d1      	bls.n	8001f3a <HAL_ETH_Init+0x7e>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001f96:	4b44      	ldr	r3, [pc, #272]	; (80020a8 <HAL_ETH_Init+0x1ec>)
 8001f98:	4a44      	ldr	r2, [pc, #272]	; (80020ac <HAL_ETH_Init+0x1f0>)
 8001f9a:	4403      	add	r3, r0
 8001f9c:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001f9e:	bf94      	ite	ls
 8001fa0:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001fa4:	f045 0510 	orrhi.w	r5, r5, #16
 8001fa8:	e7c7      	b.n	8001f3a <HAL_ETH_Init+0x7e>
  HAL_Delay(PHY_RESET_DELAY);
 8001faa:	20ff      	movs	r0, #255	; 0xff
 8001fac:	f7fe fd7c 	bl	8000aa8 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001fb0:	6863      	ldr	r3, [r4, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d053      	beq.n	800205e <HAL_ETH_Init+0x1a2>
    tickstart = HAL_GetTick();
 8001fb6:	f7fe fd71 	bl	8000a9c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001fba:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001fbe:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001fc0:	466a      	mov	r2, sp
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f7ff ff07 	bl	8001dd8 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001fca:	f7fe fd67 	bl	8000a9c <HAL_GetTick>
 8001fce:	1b80      	subs	r0, r0, r6
 8001fd0:	42b8      	cmp	r0, r7
 8001fd2:	d90b      	bls.n	8001fec <HAL_ETH_Init+0x130>
        ETH_MACDMAConfig(heth, err);
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	f7ff fd1c 	bl	8001a14 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8001fdc:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 8001fde:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8001fe0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8001fea:	e7c4      	b.n	8001f76 <HAL_ETH_Init+0xba>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001fec:	9b00      	ldr	r3, [sp, #0]
 8001fee:	0759      	lsls	r1, r3, #29
 8001ff0:	d5e6      	bpl.n	8001fc0 <HAL_ETH_Init+0x104>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001ff2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f7ff ff27 	bl	8001e4c <HAL_ETH_WritePHYRegister>
 8001ffe:	2800      	cmp	r0, #0
 8002000:	d1a5      	bne.n	8001f4e <HAL_ETH_Init+0x92>
    tickstart = HAL_GetTick();
 8002002:	f7fe fd4b 	bl	8000a9c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002006:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800200a:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800200c:	466a      	mov	r2, sp
 800200e:	2101      	movs	r1, #1
 8002010:	4620      	mov	r0, r4
 8002012:	f7ff fee1 	bl	8001dd8 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002016:	f7fe fd41 	bl	8000a9c <HAL_GetTick>
 800201a:	1b80      	subs	r0, r0, r6
 800201c:	42b8      	cmp	r0, r7
 800201e:	d8d9      	bhi.n	8001fd4 <HAL_ETH_Init+0x118>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002020:	9b00      	ldr	r3, [sp, #0]
 8002022:	069a      	lsls	r2, r3, #26
 8002024:	d5f2      	bpl.n	800200c <HAL_ETH_Init+0x150>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002026:	466a      	mov	r2, sp
 8002028:	2110      	movs	r1, #16
 800202a:	4620      	mov	r0, r4
 800202c:	f7ff fed4 	bl	8001dd8 <HAL_ETH_ReadPHYRegister>
 8002030:	2800      	cmp	r0, #0
 8002032:	d18c      	bne.n	8001f4e <HAL_ETH_Init+0x92>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002034:	9b00      	ldr	r3, [sp, #0]
 8002036:	f013 0204 	ands.w	r2, r3, #4
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800203a:	bf18      	it	ne
 800203c:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002040:	079b      	lsls	r3, r3, #30
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002042:	bf4c      	ite	mi
 8002044:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8002046:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800204a:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 800204c:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 800204e:	2100      	movs	r1, #0
 8002050:	4620      	mov	r0, r4
 8002052:	f7ff fcdf 	bl	8001a14 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8002056:	2301      	movs	r3, #1
 8002058:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 800205c:	e78b      	b.n	8001f76 <HAL_ETH_Init+0xba>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800205e:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002060:	4629      	mov	r1, r5
 8002062:	68e2      	ldr	r2, [r4, #12]
 8002064:	4620      	mov	r0, r4
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002066:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002068:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 800206c:	b292      	uxth	r2, r2
 800206e:	f7ff feed 	bl	8001e4c <HAL_ETH_WritePHYRegister>
 8002072:	2800      	cmp	r0, #0
 8002074:	f47f af6b 	bne.w	8001f4e <HAL_ETH_Init+0x92>
    HAL_Delay(PHY_CONFIG_DELAY);
 8002078:	f640 70ff 	movw	r0, #4095	; 0xfff
 800207c:	f7fe fd14 	bl	8000aa8 <HAL_Delay>
 8002080:	e7e5      	b.n	800204e <HAL_ETH_Init+0x192>
    return HAL_ERROR;
 8002082:	2501      	movs	r5, #1
 8002084:	e777      	b.n	8001f76 <HAL_ETH_Init+0xba>
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800
 800208c:	40013800 	.word	0x40013800
 8002090:	feced300 	.word	0xfeced300
 8002094:	00e4e1bf 	.word	0x00e4e1bf
 8002098:	fde9f140 	.word	0xfde9f140
 800209c:	017d783f 	.word	0x017d783f
 80020a0:	fc6c7900 	.word	0xfc6c7900
 80020a4:	026259ff 	.word	0x026259ff
 80020a8:	fa0a1f00 	.word	0xfa0a1f00
 80020ac:	02faf07f 	.word	0x02faf07f

080020b0 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 80020b0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80020b4:	2b01      	cmp	r3, #1
{  
 80020b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80020b8:	4605      	mov	r5, r0
 80020ba:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 80020be:	d033      	beq.n	8002128 <HAL_ETH_Start+0x78>
  __IO uint32_t tmpreg = 0;
 80020c0:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80020c2:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 80020c4:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __HAL_LOCK(heth);
 80020c8:	2601      	movs	r6, #1
  __IO uint32_t tmpreg = 0;
 80020ca:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80020cc:	681a      	ldr	r2, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ce:	4630      	mov	r0, r6
  __HAL_LOCK(heth);
 80020d0:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80020d4:	f042 0208 	orr.w	r2, r2, #8
 80020d8:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020de:	f7fe fce3 	bl	8000aa8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80020e2:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020e4:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 80020e6:	682b      	ldr	r3, [r5, #0]
 80020e8:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 80020ea:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	f042 0204 	orr.w	r2, r2, #4
 80020f2:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020f8:	f7fe fcd6 	bl	8000aa8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80020fc:	682b      	ldr	r3, [r5, #0]
  ETH_FlushTransmitFIFO(heth);
 80020fe:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 8002100:	9a00      	ldr	r2, [sp, #0]
 8002102:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8002104:	f7ff fc70 	bl	80019e8 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002108:	682a      	ldr	r2, [r5, #0]
 800210a:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 800210e:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002110:	58d1      	ldr	r1, [r2, r3]
 8002112:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8002116:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002118:	58d1      	ldr	r1, [r2, r3]
 800211a:	f041 0102 	orr.w	r1, r1, #2
 800211e:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8002120:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8002124:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8002128:	b002      	add	sp, #8
 800212a:	bd70      	pop	{r4, r5, r6, pc}

0800212c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800212c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002130:	680b      	ldr	r3, [r1, #0]
{
 8002132:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002134:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80022f8 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002138:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 800213a:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800213c:	4a6c      	ldr	r2, [pc, #432]	; (80022f0 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800213e:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80022fc <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8002142:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002146:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8002148:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800214c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8002150:	45b6      	cmp	lr, r6
 8002152:	f040 80b3 	bne.w	80022bc <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002156:	684c      	ldr	r4, [r1, #4]
 8002158:	f024 0710 	bic.w	r7, r4, #16
 800215c:	2f02      	cmp	r7, #2
 800215e:	d116      	bne.n	800218e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8002160:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002164:	f003 0b07 	and.w	fp, r3, #7
 8002168:	f04f 0c0f 	mov.w	ip, #15
 800216c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8002170:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8002174:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002178:	fa0c fc0b 	lsl.w	ip, ip, fp
 800217c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002180:	690d      	ldr	r5, [r1, #16]
 8002182:	fa05 f50b 	lsl.w	r5, r5, fp
 8002186:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 800218a:	f8ca 5020 	str.w	r5, [sl, #32]
 800218e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002192:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8002194:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002198:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800219c:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021a0:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021a2:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021a6:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021a8:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021aa:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021ae:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 80021b2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021b6:	d811      	bhi.n	80021dc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80021b8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80021ba:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 80021be:	68cf      	ldr	r7, [r1, #12]
 80021c0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80021c4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80021c8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80021ca:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021cc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80021d0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80021d4:	409f      	lsls	r7, r3
 80021d6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80021da:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80021dc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80021de:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80021e0:	688f      	ldr	r7, [r1, #8]
 80021e2:	fa07 f70a 	lsl.w	r7, r7, sl
 80021e6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80021e8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ea:	00e5      	lsls	r5, r4, #3
 80021ec:	d566      	bpl.n	80022bc <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ee:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 80021f2:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021f6:	f003 0e03 	and.w	lr, r3, #3
 80021fa:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fe:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8002202:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002206:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220a:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 800220e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8002212:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8002216:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 800221a:	9503      	str	r5, [sp, #12]
 800221c:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800221e:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8002222:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002226:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800222a:	4d32      	ldr	r5, [pc, #200]	; (80022f4 <HAL_GPIO_Init+0x1c8>)
 800222c:	42a8      	cmp	r0, r5
 800222e:	d04c      	beq.n	80022ca <HAL_GPIO_Init+0x19e>
 8002230:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002234:	42a8      	cmp	r0, r5
 8002236:	d04a      	beq.n	80022ce <HAL_GPIO_Init+0x1a2>
 8002238:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800223c:	42a8      	cmp	r0, r5
 800223e:	d048      	beq.n	80022d2 <HAL_GPIO_Init+0x1a6>
 8002240:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002244:	42a8      	cmp	r0, r5
 8002246:	d046      	beq.n	80022d6 <HAL_GPIO_Init+0x1aa>
 8002248:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800224c:	42a8      	cmp	r0, r5
 800224e:	d044      	beq.n	80022da <HAL_GPIO_Init+0x1ae>
 8002250:	4548      	cmp	r0, r9
 8002252:	d044      	beq.n	80022de <HAL_GPIO_Init+0x1b2>
 8002254:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002258:	42a8      	cmp	r0, r5
 800225a:	d042      	beq.n	80022e2 <HAL_GPIO_Init+0x1b6>
 800225c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002260:	42a8      	cmp	r0, r5
 8002262:	d040      	beq.n	80022e6 <HAL_GPIO_Init+0x1ba>
 8002264:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002268:	42a8      	cmp	r0, r5
 800226a:	d03e      	beq.n	80022ea <HAL_GPIO_Init+0x1be>
 800226c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002270:	42a8      	cmp	r0, r5
 8002272:	bf14      	ite	ne
 8002274:	250a      	movne	r5, #10
 8002276:	2509      	moveq	r5, #9
 8002278:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800227c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002280:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8002284:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8002286:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 800228a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800228c:	bf0c      	ite	eq
 800228e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002290:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002292:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8002296:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8002298:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800229a:	bf0c      	ite	eq
 800229c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800229e:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022a0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 80022a4:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80022a6:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80022a8:	bf0c      	ite	eq
 80022aa:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80022ac:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022ae:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 80022b0:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80022b2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80022b4:	bf54      	ite	pl
 80022b6:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80022b8:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80022ba:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80022bc:	3301      	adds	r3, #1
 80022be:	2b10      	cmp	r3, #16
 80022c0:	f47f af3f 	bne.w	8002142 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80022c4:	b005      	add	sp, #20
 80022c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80022ca:	2500      	movs	r5, #0
 80022cc:	e7d4      	b.n	8002278 <HAL_GPIO_Init+0x14c>
 80022ce:	2501      	movs	r5, #1
 80022d0:	e7d2      	b.n	8002278 <HAL_GPIO_Init+0x14c>
 80022d2:	2502      	movs	r5, #2
 80022d4:	e7d0      	b.n	8002278 <HAL_GPIO_Init+0x14c>
 80022d6:	2503      	movs	r5, #3
 80022d8:	e7ce      	b.n	8002278 <HAL_GPIO_Init+0x14c>
 80022da:	2504      	movs	r5, #4
 80022dc:	e7cc      	b.n	8002278 <HAL_GPIO_Init+0x14c>
 80022de:	2505      	movs	r5, #5
 80022e0:	e7ca      	b.n	8002278 <HAL_GPIO_Init+0x14c>
 80022e2:	2506      	movs	r5, #6
 80022e4:	e7c8      	b.n	8002278 <HAL_GPIO_Init+0x14c>
 80022e6:	2507      	movs	r5, #7
 80022e8:	e7c6      	b.n	8002278 <HAL_GPIO_Init+0x14c>
 80022ea:	2508      	movs	r5, #8
 80022ec:	e7c4      	b.n	8002278 <HAL_GPIO_Init+0x14c>
 80022ee:	bf00      	nop
 80022f0:	40013c00 	.word	0x40013c00
 80022f4:	40020000 	.word	0x40020000
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40021400 	.word	0x40021400

08002300 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002300:	b10a      	cbz	r2, 8002306 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002302:	6181      	str	r1, [r0, #24]
 8002304:	4770      	bx	lr
 8002306:	0409      	lsls	r1, r1, #16
 8002308:	e7fb      	b.n	8002302 <HAL_GPIO_WritePin+0x2>

0800230a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800230a:	6943      	ldr	r3, [r0, #20]
 800230c:	4059      	eors	r1, r3
 800230e:	6141      	str	r1, [r0, #20]
 8002310:	4770      	bx	lr
	...

08002314 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002314:	4b19      	ldr	r3, [pc, #100]	; (800237c <HAL_PWREx_EnableOverDrive+0x68>)
{
 8002316:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800231a:	4c19      	ldr	r4, [pc, #100]	; (8002380 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800231c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002320:	641a      	str	r2, [r3, #64]	; 0x40
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002328:	9301      	str	r3, [sp, #4]
 800232a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800232c:	6823      	ldr	r3, [r4, #0]
 800232e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002332:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002334:	f7fe fbb2 	bl	8000a9c <HAL_GetTick>
 8002338:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800233a:	6863      	ldr	r3, [r4, #4]
 800233c:	03da      	lsls	r2, r3, #15
 800233e:	d50c      	bpl.n	800235a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002340:	6823      	ldr	r3, [r4, #0]
 8002342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002346:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002348:	f7fe fba8 	bl	8000a9c <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800234c:	4c0c      	ldr	r4, [pc, #48]	; (8002380 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 800234e:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002350:	6863      	ldr	r3, [r4, #4]
 8002352:	039b      	lsls	r3, r3, #14
 8002354:	d50a      	bpl.n	800236c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8002356:	2000      	movs	r0, #0
 8002358:	e006      	b.n	8002368 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800235a:	f7fe fb9f 	bl	8000a9c <HAL_GetTick>
 800235e:	1b40      	subs	r0, r0, r5
 8002360:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002364:	d9e9      	bls.n	800233a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8002366:	2003      	movs	r0, #3
}
 8002368:	b003      	add	sp, #12
 800236a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800236c:	f7fe fb96 	bl	8000a9c <HAL_GetTick>
 8002370:	1b40      	subs	r0, r0, r5
 8002372:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002376:	d9eb      	bls.n	8002350 <HAL_PWREx_EnableOverDrive+0x3c>
 8002378:	e7f5      	b.n	8002366 <HAL_PWREx_EnableOverDrive+0x52>
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800
 8002380:	40007000 	.word	0x40007000

08002384 <HAL_RCC_OscConfig>:
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002384:	6803      	ldr	r3, [r0, #0]
{
 8002386:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002388:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800238a:	07d8      	lsls	r0, r3, #31
 800238c:	d410      	bmi.n	80023b0 <HAL_RCC_OscConfig+0x2c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800238e:	6823      	ldr	r3, [r4, #0]
 8002390:	0799      	lsls	r1, r3, #30
 8002392:	d460      	bmi.n	8002456 <HAL_RCC_OscConfig+0xd2>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002394:	6823      	ldr	r3, [r4, #0]
 8002396:	0719      	lsls	r1, r3, #28
 8002398:	f100 80af 	bmi.w	80024fa <HAL_RCC_OscConfig+0x176>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800239c:	6823      	ldr	r3, [r4, #0]
 800239e:	075a      	lsls	r2, r3, #29
 80023a0:	f100 80d0 	bmi.w	8002544 <HAL_RCC_OscConfig+0x1c0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a4:	69a2      	ldr	r2, [r4, #24]
 80023a6:	2a00      	cmp	r2, #0
 80023a8:	f040 8138 	bne.w	800261c <HAL_RCC_OscConfig+0x298>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80023ac:	2000      	movs	r0, #0
 80023ae:	e015      	b.n	80023dc <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023b0:	4b98      	ldr	r3, [pc, #608]	; (8002614 <HAL_RCC_OscConfig+0x290>)
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	f002 020c 	and.w	r2, r2, #12
 80023b8:	2a04      	cmp	r2, #4
 80023ba:	d007      	beq.n	80023cc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	f002 020c 	and.w	r2, r2, #12
 80023c2:	2a08      	cmp	r2, #8
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x5c>
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	025a      	lsls	r2, r3, #9
 80023ca:	d509      	bpl.n	80023e0 <HAL_RCC_OscConfig+0x5c>
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023cc:	4b91      	ldr	r3, [pc, #580]	; (8002614 <HAL_RCC_OscConfig+0x290>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	039b      	lsls	r3, r3, #14
 80023d2:	d5dc      	bpl.n	800238e <HAL_RCC_OscConfig+0xa>
 80023d4:	6863      	ldr	r3, [r4, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1d9      	bne.n	800238e <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 80023da:	2001      	movs	r0, #1
}
 80023dc:	b003      	add	sp, #12
 80023de:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e0:	6863      	ldr	r3, [r4, #4]
 80023e2:	4d8c      	ldr	r5, [pc, #560]	; (8002614 <HAL_RCC_OscConfig+0x290>)
 80023e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e8:	d111      	bne.n	800240e <HAL_RCC_OscConfig+0x8a>
 80023ea:	682b      	ldr	r3, [r5, #0]
 80023ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80023f2:	f7fe fb53 	bl	8000a9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	4d87      	ldr	r5, [pc, #540]	; (8002614 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 80023f8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fa:	682b      	ldr	r3, [r5, #0]
 80023fc:	039f      	lsls	r7, r3, #14
 80023fe:	d4c6      	bmi.n	800238e <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002400:	f7fe fb4c 	bl	8000a9c <HAL_GetTick>
 8002404:	1b80      	subs	r0, r0, r6
 8002406:	2864      	cmp	r0, #100	; 0x64
 8002408:	d9f7      	bls.n	80023fa <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800240a:	2003      	movs	r0, #3
 800240c:	e7e6      	b.n	80023dc <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800240e:	b99b      	cbnz	r3, 8002438 <HAL_RCC_OscConfig+0xb4>
 8002410:	682b      	ldr	r3, [r5, #0]
 8002412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002416:	602b      	str	r3, [r5, #0]
 8002418:	682b      	ldr	r3, [r5, #0]
 800241a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800241e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002420:	f7fe fb3c 	bl	8000a9c <HAL_GetTick>
 8002424:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002426:	682b      	ldr	r3, [r5, #0]
 8002428:	0398      	lsls	r0, r3, #14
 800242a:	d5b0      	bpl.n	800238e <HAL_RCC_OscConfig+0xa>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800242c:	f7fe fb36 	bl	8000a9c <HAL_GetTick>
 8002430:	1b80      	subs	r0, r0, r6
 8002432:	2864      	cmp	r0, #100	; 0x64
 8002434:	d9f7      	bls.n	8002426 <HAL_RCC_OscConfig+0xa2>
 8002436:	e7e8      	b.n	800240a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002438:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800243c:	682b      	ldr	r3, [r5, #0]
 800243e:	d103      	bne.n	8002448 <HAL_RCC_OscConfig+0xc4>
 8002440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002444:	602b      	str	r3, [r5, #0]
 8002446:	e7d0      	b.n	80023ea <HAL_RCC_OscConfig+0x66>
 8002448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800244c:	602b      	str	r3, [r5, #0]
 800244e:	682b      	ldr	r3, [r5, #0]
 8002450:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002454:	e7cc      	b.n	80023f0 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002456:	4b6f      	ldr	r3, [pc, #444]	; (8002614 <HAL_RCC_OscConfig+0x290>)
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	f012 0f0c 	tst.w	r2, #12
 800245e:	d007      	beq.n	8002470 <HAL_RCC_OscConfig+0xec>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	f002 020c 	and.w	r2, r2, #12
 8002466:	2a08      	cmp	r2, #8
 8002468:	d116      	bne.n	8002498 <HAL_RCC_OscConfig+0x114>
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	0259      	lsls	r1, r3, #9
 800246e:	d413      	bmi.n	8002498 <HAL_RCC_OscConfig+0x114>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002470:	4b68      	ldr	r3, [pc, #416]	; (8002614 <HAL_RCC_OscConfig+0x290>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	0792      	lsls	r2, r2, #30
 8002476:	d502      	bpl.n	800247e <HAL_RCC_OscConfig+0xfa>
 8002478:	68e2      	ldr	r2, [r4, #12]
 800247a:	2a01      	cmp	r2, #1
 800247c:	d1ad      	bne.n	80023da <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247e:	6818      	ldr	r0, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	22f8      	movs	r2, #248	; 0xf8
 8002482:	fa92 f2a2 	rbit	r2, r2
 8002486:	fab2 f182 	clz	r1, r2
 800248a:	6922      	ldr	r2, [r4, #16]
 800248c:	408a      	lsls	r2, r1
 800248e:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 8002492:	430a      	orrs	r2, r1
 8002494:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002496:	e77d      	b.n	8002394 <HAL_RCC_OscConfig+0x10>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002498:	68e3      	ldr	r3, [r4, #12]
 800249a:	4d5e      	ldr	r5, [pc, #376]	; (8002614 <HAL_RCC_OscConfig+0x290>)
 800249c:	b1e3      	cbz	r3, 80024d8 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_ENABLE();
 800249e:	682b      	ldr	r3, [r5, #0]
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80024a6:	f7fe faf9 	bl	8000a9c <HAL_GetTick>
 80024aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ac:	682b      	ldr	r3, [r5, #0]
 80024ae:	079f      	lsls	r7, r3, #30
 80024b0:	d50c      	bpl.n	80024cc <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b2:	6829      	ldr	r1, [r5, #0]
 80024b4:	23f8      	movs	r3, #248	; 0xf8
 80024b6:	fa93 f3a3 	rbit	r3, r3
 80024ba:	fab3 f283 	clz	r2, r3
 80024be:	6923      	ldr	r3, [r4, #16]
 80024c0:	4093      	lsls	r3, r2
 80024c2:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80024c6:	4313      	orrs	r3, r2
 80024c8:	602b      	str	r3, [r5, #0]
 80024ca:	e763      	b.n	8002394 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024cc:	f7fe fae6 	bl	8000a9c <HAL_GetTick>
 80024d0:	1b80      	subs	r0, r0, r6
 80024d2:	2802      	cmp	r0, #2
 80024d4:	d9ea      	bls.n	80024ac <HAL_RCC_OscConfig+0x128>
 80024d6:	e798      	b.n	800240a <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80024d8:	682b      	ldr	r3, [r5, #0]
 80024da:	f023 0301 	bic.w	r3, r3, #1
 80024de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80024e0:	f7fe fadc 	bl	8000a9c <HAL_GetTick>
 80024e4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e6:	682b      	ldr	r3, [r5, #0]
 80024e8:	0798      	lsls	r0, r3, #30
 80024ea:	f57f af53 	bpl.w	8002394 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ee:	f7fe fad5 	bl	8000a9c <HAL_GetTick>
 80024f2:	1b80      	subs	r0, r0, r6
 80024f4:	2802      	cmp	r0, #2
 80024f6:	d9f6      	bls.n	80024e6 <HAL_RCC_OscConfig+0x162>
 80024f8:	e787      	b.n	800240a <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024fa:	6963      	ldr	r3, [r4, #20]
 80024fc:	4d45      	ldr	r5, [pc, #276]	; (8002614 <HAL_RCC_OscConfig+0x290>)
 80024fe:	b183      	cbz	r3, 8002522 <HAL_RCC_OscConfig+0x19e>
      __HAL_RCC_LSI_ENABLE();
 8002500:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002508:	f7fe fac8 	bl	8000a9c <HAL_GetTick>
 800250c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002510:	079b      	lsls	r3, r3, #30
 8002512:	f53f af43 	bmi.w	800239c <HAL_RCC_OscConfig+0x18>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002516:	f7fe fac1 	bl	8000a9c <HAL_GetTick>
 800251a:	1b80      	subs	r0, r0, r6
 800251c:	2802      	cmp	r0, #2
 800251e:	d9f6      	bls.n	800250e <HAL_RCC_OscConfig+0x18a>
 8002520:	e773      	b.n	800240a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8002522:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002524:	f023 0301 	bic.w	r3, r3, #1
 8002528:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800252a:	f7fe fab7 	bl	8000a9c <HAL_GetTick>
 800252e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002530:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002532:	079f      	lsls	r7, r3, #30
 8002534:	f57f af32 	bpl.w	800239c <HAL_RCC_OscConfig+0x18>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002538:	f7fe fab0 	bl	8000a9c <HAL_GetTick>
 800253c:	1b80      	subs	r0, r0, r6
 800253e:	2802      	cmp	r0, #2
 8002540:	d9f6      	bls.n	8002530 <HAL_RCC_OscConfig+0x1ac>
 8002542:	e762      	b.n	800240a <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002544:	4b33      	ldr	r3, [pc, #204]	; (8002614 <HAL_RCC_OscConfig+0x290>)
 8002546:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002548:	00d0      	lsls	r0, r2, #3
 800254a:	d425      	bmi.n	8002598 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_PWR_CLK_ENABLE();
 800254c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800254e:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002550:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002554:	641a      	str	r2, [r3, #64]	; 0x40
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255c:	9301      	str	r3, [sp, #4]
 800255e:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002560:	4d2d      	ldr	r5, [pc, #180]	; (8002618 <HAL_RCC_OscConfig+0x294>)
 8002562:	682b      	ldr	r3, [r5, #0]
 8002564:	05d9      	lsls	r1, r3, #23
 8002566:	d519      	bpl.n	800259c <HAL_RCC_OscConfig+0x218>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002568:	68a3      	ldr	r3, [r4, #8]
 800256a:	4d2a      	ldr	r5, [pc, #168]	; (8002614 <HAL_RCC_OscConfig+0x290>)
 800256c:	2b01      	cmp	r3, #1
 800256e:	d125      	bne.n	80025bc <HAL_RCC_OscConfig+0x238>
 8002570:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002578:	f7fe fa90 	bl	8000a9c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257c:	4d25      	ldr	r5, [pc, #148]	; (8002614 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 800257e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002580:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002582:	079b      	lsls	r3, r3, #30
 8002584:	d53e      	bpl.n	8002604 <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8002586:	2e00      	cmp	r6, #0
 8002588:	f43f af0c 	beq.w	80023a4 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_PWR_CLK_DISABLE();
 800258c:	4a21      	ldr	r2, [pc, #132]	; (8002614 <HAL_RCC_OscConfig+0x290>)
 800258e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002594:	6413      	str	r3, [r2, #64]	; 0x40
 8002596:	e705      	b.n	80023a4 <HAL_RCC_OscConfig+0x20>
  FlagStatus pwrclkchanged = RESET;
 8002598:	2600      	movs	r6, #0
 800259a:	e7e1      	b.n	8002560 <HAL_RCC_OscConfig+0x1dc>
      PWR->CR1 |= PWR_CR1_DBP;
 800259c:	682b      	ldr	r3, [r5, #0]
 800259e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80025a4:	f7fe fa7a 	bl	8000a9c <HAL_GetTick>
 80025a8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025aa:	682b      	ldr	r3, [r5, #0]
 80025ac:	05da      	lsls	r2, r3, #23
 80025ae:	d4db      	bmi.n	8002568 <HAL_RCC_OscConfig+0x1e4>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80025b0:	f7fe fa74 	bl	8000a9c <HAL_GetTick>
 80025b4:	1bc0      	subs	r0, r0, r7
 80025b6:	2864      	cmp	r0, #100	; 0x64
 80025b8:	d9f7      	bls.n	80025aa <HAL_RCC_OscConfig+0x226>
 80025ba:	e726      	b.n	800240a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025bc:	b9a3      	cbnz	r3, 80025e8 <HAL_RCC_OscConfig+0x264>
 80025be:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	672b      	str	r3, [r5, #112]	; 0x70
 80025c6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80025c8:	f023 0304 	bic.w	r3, r3, #4
 80025cc:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80025ce:	f7fe fa65 	bl	8000a9c <HAL_GetTick>
 80025d2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80025d6:	0798      	lsls	r0, r3, #30
 80025d8:	d5d5      	bpl.n	8002586 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025da:	f7fe fa5f 	bl	8000a9c <HAL_GetTick>
 80025de:	1bc0      	subs	r0, r0, r7
 80025e0:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80025e4:	d9f6      	bls.n	80025d4 <HAL_RCC_OscConfig+0x250>
 80025e6:	e710      	b.n	800240a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e8:	2b05      	cmp	r3, #5
 80025ea:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80025ec:	d103      	bne.n	80025f6 <HAL_RCC_OscConfig+0x272>
 80025ee:	f043 0304 	orr.w	r3, r3, #4
 80025f2:	672b      	str	r3, [r5, #112]	; 0x70
 80025f4:	e7bc      	b.n	8002570 <HAL_RCC_OscConfig+0x1ec>
 80025f6:	f023 0301 	bic.w	r3, r3, #1
 80025fa:	672b      	str	r3, [r5, #112]	; 0x70
 80025fc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80025fe:	f023 0304 	bic.w	r3, r3, #4
 8002602:	e7b8      	b.n	8002576 <HAL_RCC_OscConfig+0x1f2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002604:	f7fe fa4a 	bl	8000a9c <HAL_GetTick>
 8002608:	1bc0      	subs	r0, r0, r7
 800260a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800260e:	d9b7      	bls.n	8002580 <HAL_RCC_OscConfig+0x1fc>
 8002610:	e6fb      	b.n	800240a <HAL_RCC_OscConfig+0x86>
 8002612:	bf00      	nop
 8002614:	40023800 	.word	0x40023800
 8002618:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800261c:	4d2e      	ldr	r5, [pc, #184]	; (80026d8 <HAL_RCC_OscConfig+0x354>)
 800261e:	68ab      	ldr	r3, [r5, #8]
 8002620:	f003 030c 	and.w	r3, r3, #12
 8002624:	2b08      	cmp	r3, #8
 8002626:	f43f aed8 	beq.w	80023da <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_PLL_DISABLE();
 800262a:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800262c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800262e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002632:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002634:	d142      	bne.n	80026bc <HAL_RCC_OscConfig+0x338>
        tickstart = HAL_GetTick();
 8002636:	f7fe fa31 	bl	8000a9c <HAL_GetTick>
 800263a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263c:	682b      	ldr	r3, [r5, #0]
 800263e:	0199      	lsls	r1, r3, #6
 8002640:	d436      	bmi.n	80026b0 <HAL_RCC_OscConfig+0x32c>
 8002642:	f647 76c0 	movw	r6, #32704	; 0x7fc0
 8002646:	fa96 f6a6 	rbit	r6, r6
 800264a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800264e:	fab6 f686 	clz	r6, r6
 8002652:	fa92 f2a2 	rbit	r2, r2
 8002656:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800265a:	fab2 f082 	clz	r0, r2
 800265e:	fa91 f1a1 	rbit	r1, r1
 8002662:	6a22      	ldr	r2, [r4, #32]
 8002664:	fab1 f181 	clz	r1, r1
 8002668:	69e3      	ldr	r3, [r4, #28]
 800266a:	4313      	orrs	r3, r2
 800266c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800266e:	fa02 f606 	lsl.w	r6, r2, r6
 8002672:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002674:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002678:	0852      	lsrs	r2, r2, #1
 800267a:	4333      	orrs	r3, r6
 800267c:	3a01      	subs	r2, #1
 800267e:	4082      	lsls	r2, r0
 8002680:	4313      	orrs	r3, r2
 8002682:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002684:	4c14      	ldr	r4, [pc, #80]	; (80026d8 <HAL_RCC_OscConfig+0x354>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002686:	fa02 f101 	lsl.w	r1, r2, r1
 800268a:	430b      	orrs	r3, r1
 800268c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800268e:	682b      	ldr	r3, [r5, #0]
 8002690:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002694:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002696:	f7fe fa01 	bl	8000a9c <HAL_GetTick>
 800269a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	019a      	lsls	r2, r3, #6
 80026a0:	f53f ae84 	bmi.w	80023ac <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a4:	f7fe f9fa 	bl	8000a9c <HAL_GetTick>
 80026a8:	1b40      	subs	r0, r0, r5
 80026aa:	2802      	cmp	r0, #2
 80026ac:	d9f6      	bls.n	800269c <HAL_RCC_OscConfig+0x318>
 80026ae:	e6ac      	b.n	800240a <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b0:	f7fe f9f4 	bl	8000a9c <HAL_GetTick>
 80026b4:	1b80      	subs	r0, r0, r6
 80026b6:	2802      	cmp	r0, #2
 80026b8:	d9c0      	bls.n	800263c <HAL_RCC_OscConfig+0x2b8>
 80026ba:	e6a6      	b.n	800240a <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80026bc:	f7fe f9ee 	bl	8000a9c <HAL_GetTick>
 80026c0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c2:	682b      	ldr	r3, [r5, #0]
 80026c4:	019b      	lsls	r3, r3, #6
 80026c6:	f57f ae71 	bpl.w	80023ac <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ca:	f7fe f9e7 	bl	8000a9c <HAL_GetTick>
 80026ce:	1b00      	subs	r0, r0, r4
 80026d0:	2802      	cmp	r0, #2
 80026d2:	d9f6      	bls.n	80026c2 <HAL_RCC_OscConfig+0x33e>
 80026d4:	e699      	b.n	800240a <HAL_RCC_OscConfig+0x86>
 80026d6:	bf00      	nop
 80026d8:	40023800 	.word	0x40023800

080026dc <HAL_RCC_EnableCSS>:
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 80026dc:	4a02      	ldr	r2, [pc, #8]	; (80026e8 <HAL_RCC_EnableCSS+0xc>)
 80026de:	6813      	ldr	r3, [r2, #0]
 80026e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	4770      	bx	lr
 80026e8:	40023800 	.word	0x40023800

080026ec <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026ec:	4a19      	ldr	r2, [pc, #100]	; (8002754 <HAL_RCC_GetSysClockFreq+0x68>)
 80026ee:	6893      	ldr	r3, [r2, #8]
 80026f0:	f003 030c 	and.w	r3, r3, #12
 80026f4:	2b04      	cmp	r3, #4
{
 80026f6:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026f8:	d003      	beq.n	8002702 <HAL_RCC_GetSysClockFreq+0x16>
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d003      	beq.n	8002706 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026fe:	4816      	ldr	r0, [pc, #88]	; (8002758 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002700:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8002702:	4816      	ldr	r0, [pc, #88]	; (800275c <HAL_RCC_GetSysClockFreq+0x70>)
 8002704:	bd10      	pop	{r4, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002706:	6851      	ldr	r1, [r2, #4]
 8002708:	f647 74c0 	movw	r4, #32704	; 0x7fc0
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800270c:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800270e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002712:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8002716:	6853      	ldr	r3, [r2, #4]
 8002718:	fa94 f0a4 	rbit	r0, r4
 800271c:	fab0 f080 	clz	r0, r0
 8002720:	ea03 0304 	and.w	r3, r3, r4
 8002724:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002728:	fa23 f300 	lsr.w	r3, r3, r0
 800272c:	bf14      	ite	ne
 800272e:	480b      	ldrne	r0, [pc, #44]	; (800275c <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8002730:	4809      	ldreq	r0, [pc, #36]	; (8002758 <HAL_RCC_GetSysClockFreq+0x6c>)
 8002732:	fbb0 f0f1 	udiv	r0, r0, r1
 8002736:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_RCC_GetSysClockFreq+0x68>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	fa92 f2a2 	rbit	r2, r2
 8002740:	fab2 f282 	clz	r2, r2
 8002744:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002748:	40d3      	lsrs	r3, r2
 800274a:	3301      	adds	r3, #1
 800274c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800274e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002752:	bd10      	pop	{r4, pc}
 8002754:	40023800 	.word	0x40023800
 8002758:	00f42400 	.word	0x00f42400
 800275c:	007a1200 	.word	0x007a1200

08002760 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002760:	4a51      	ldr	r2, [pc, #324]	; (80028a8 <HAL_RCC_ClockConfig+0x148>)
 8002762:	6813      	ldr	r3, [r2, #0]
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	428b      	cmp	r3, r1
{
 800276a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800276e:	4604      	mov	r4, r0
 8002770:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002772:	d32f      	bcc.n	80027d4 <HAL_RCC_ClockConfig+0x74>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002774:	6822      	ldr	r2, [r4, #0]
 8002776:	0796      	lsls	r6, r2, #30
 8002778:	d439      	bmi.n	80027ee <HAL_RCC_ClockConfig+0x8e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800277a:	07d0      	lsls	r0, r2, #31
 800277c:	d43f      	bmi.n	80027fe <HAL_RCC_ClockConfig+0x9e>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800277e:	4a4a      	ldr	r2, [pc, #296]	; (80028a8 <HAL_RCC_ClockConfig+0x148>)
 8002780:	6813      	ldr	r3, [r2, #0]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	429d      	cmp	r5, r3
 8002788:	d37b      	bcc.n	8002882 <HAL_RCC_ClockConfig+0x122>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278a:	6822      	ldr	r2, [r4, #0]
 800278c:	0751      	lsls	r1, r2, #29
 800278e:	f100 8083 	bmi.w	8002898 <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002792:	0713      	lsls	r3, r2, #28
 8002794:	d507      	bpl.n	80027a6 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002796:	4a45      	ldr	r2, [pc, #276]	; (80028ac <HAL_RCC_ClockConfig+0x14c>)
 8002798:	6921      	ldr	r1, [r4, #16]
 800279a:	6893      	ldr	r3, [r2, #8]
 800279c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80027a0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80027a4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80027a6:	f7ff ffa1 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 80027aa:	4b40      	ldr	r3, [pc, #256]	; (80028ac <HAL_RCC_ClockConfig+0x14c>)
 80027ac:	22f0      	movs	r2, #240	; 0xf0
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	fa92 f2a2 	rbit	r2, r2
 80027b4:	fab2 f282 	clz	r2, r2
 80027b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027bc:	40d3      	lsrs	r3, r2
 80027be:	4a3c      	ldr	r2, [pc, #240]	; (80028b0 <HAL_RCC_ClockConfig+0x150>)
 80027c0:	5cd3      	ldrb	r3, [r2, r3]
 80027c2:	40d8      	lsrs	r0, r3
 80027c4:	4b3b      	ldr	r3, [pc, #236]	; (80028b4 <HAL_RCC_ClockConfig+0x154>)
 80027c6:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80027c8:	2000      	movs	r0, #0
 80027ca:	f7fe f93f 	bl	8000a4c <HAL_InitTick>
  return HAL_OK;
 80027ce:	2000      	movs	r0, #0
}
 80027d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d4:	6813      	ldr	r3, [r2, #0]
 80027d6:	f023 030f 	bic.w	r3, r3, #15
 80027da:	430b      	orrs	r3, r1
 80027dc:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027de:	6813      	ldr	r3, [r2, #0]
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	4299      	cmp	r1, r3
 80027e6:	d0c5      	beq.n	8002774 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80027e8:	2001      	movs	r0, #1
 80027ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ee:	492f      	ldr	r1, [pc, #188]	; (80028ac <HAL_RCC_ClockConfig+0x14c>)
 80027f0:	68a0      	ldr	r0, [r4, #8]
 80027f2:	688b      	ldr	r3, [r1, #8]
 80027f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027f8:	4303      	orrs	r3, r0
 80027fa:	608b      	str	r3, [r1, #8]
 80027fc:	e7bd      	b.n	800277a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027fe:	6861      	ldr	r1, [r4, #4]
 8002800:	4b2a      	ldr	r3, [pc, #168]	; (80028ac <HAL_RCC_ClockConfig+0x14c>)
 8002802:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002804:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002806:	d11d      	bne.n	8002844 <HAL_RCC_ClockConfig+0xe4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002808:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280c:	d0ec      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x88>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800280e:	689a      	ldr	r2, [r3, #8]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002810:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002814:	4f25      	ldr	r7, [pc, #148]	; (80028ac <HAL_RCC_ClockConfig+0x14c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002816:	f022 0203 	bic.w	r2, r2, #3
 800281a:	430a      	orrs	r2, r1
 800281c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800281e:	f7fe f93d 	bl	8000a9c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002822:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002824:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002826:	2b01      	cmp	r3, #1
 8002828:	d114      	bne.n	8002854 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	f003 030c 	and.w	r3, r3, #12
 8002830:	2b04      	cmp	r3, #4
 8002832:	d0a4      	beq.n	800277e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002834:	f7fe f932 	bl	8000a9c <HAL_GetTick>
 8002838:	1b80      	subs	r0, r0, r6
 800283a:	4540      	cmp	r0, r8
 800283c:	d9f5      	bls.n	800282a <HAL_RCC_ClockConfig+0xca>
          return HAL_TIMEOUT;
 800283e:	2003      	movs	r0, #3
 8002840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002844:	2902      	cmp	r1, #2
 8002846:	d102      	bne.n	800284e <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002848:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800284c:	e7de      	b.n	800280c <HAL_RCC_ClockConfig+0xac>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284e:	f012 0f02 	tst.w	r2, #2
 8002852:	e7db      	b.n	800280c <HAL_RCC_ClockConfig+0xac>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002854:	2b02      	cmp	r3, #2
 8002856:	d10f      	bne.n	8002878 <HAL_RCC_ClockConfig+0x118>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b08      	cmp	r3, #8
 8002860:	d08d      	beq.n	800277e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002862:	f7fe f91b 	bl	8000a9c <HAL_GetTick>
 8002866:	1b80      	subs	r0, r0, r6
 8002868:	4540      	cmp	r0, r8
 800286a:	d9f5      	bls.n	8002858 <HAL_RCC_ClockConfig+0xf8>
 800286c:	e7e7      	b.n	800283e <HAL_RCC_ClockConfig+0xde>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800286e:	f7fe f915 	bl	8000a9c <HAL_GetTick>
 8002872:	1b80      	subs	r0, r0, r6
 8002874:	4540      	cmp	r0, r8
 8002876:	d8e2      	bhi.n	800283e <HAL_RCC_ClockConfig+0xde>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f013 0f0c 	tst.w	r3, #12
 800287e:	d1f6      	bne.n	800286e <HAL_RCC_ClockConfig+0x10e>
 8002880:	e77d      	b.n	800277e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002882:	6813      	ldr	r3, [r2, #0]
 8002884:	f023 030f 	bic.w	r3, r3, #15
 8002888:	432b      	orrs	r3, r5
 800288a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800288c:	6813      	ldr	r3, [r2, #0]
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	429d      	cmp	r5, r3
 8002894:	d1a8      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x88>
 8002896:	e778      	b.n	800278a <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002898:	4904      	ldr	r1, [pc, #16]	; (80028ac <HAL_RCC_ClockConfig+0x14c>)
 800289a:	68e0      	ldr	r0, [r4, #12]
 800289c:	688b      	ldr	r3, [r1, #8]
 800289e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80028a2:	4303      	orrs	r3, r0
 80028a4:	608b      	str	r3, [r1, #8]
 80028a6:	e774      	b.n	8002792 <HAL_RCC_ClockConfig+0x32>
 80028a8:	40023c00 	.word	0x40023c00
 80028ac:	40023800 	.word	0x40023800
 80028b0:	0800b970 	.word	0x0800b970
 80028b4:	20000024 	.word	0x20000024

080028b8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80028b8:	4b01      	ldr	r3, [pc, #4]	; (80028c0 <HAL_RCC_GetHCLKFreq+0x8>)
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000024 	.word	0x20000024

080028c4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80028c4:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028c6:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	fa92 f2a2 	rbit	r2, r2
 80028d0:	fab2 f282 	clz	r2, r2
 80028d4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80028d8:	40d3      	lsrs	r3, r2
 80028da:	4a04      	ldr	r2, [pc, #16]	; (80028ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80028dc:	5cd3      	ldrb	r3, [r2, r3]
 80028de:	4a04      	ldr	r2, [pc, #16]	; (80028f0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80028e0:	6810      	ldr	r0, [r2, #0]
}
 80028e2:	40d8      	lsrs	r0, r3
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800
 80028ec:	0800b980 	.word	0x0800b980
 80028f0:	20000024 	.word	0x20000024

080028f4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028f6:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	fa92 f2a2 	rbit	r2, r2
 8002900:	fab2 f282 	clz	r2, r2
 8002904:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002908:	40d3      	lsrs	r3, r2
 800290a:	4a04      	ldr	r2, [pc, #16]	; (800291c <HAL_RCC_GetPCLK2Freq+0x28>)
 800290c:	5cd3      	ldrb	r3, [r2, r3]
 800290e:	4a04      	ldr	r2, [pc, #16]	; (8002920 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8002910:	6810      	ldr	r0, [r2, #0]
} 
 8002912:	40d8      	lsrs	r0, r3
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40023800 	.word	0x40023800
 800291c:	0800b980 	.word	0x0800b980
 8002920:	20000024 	.word	0x20000024

08002924 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002924:	6803      	ldr	r3, [r0, #0]
{
 8002926:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800292a:	f013 0601 	ands.w	r6, r3, #1
{
 800292e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002930:	d00b      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002932:	4abd      	ldr	r2, [pc, #756]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002934:	6891      	ldr	r1, [r2, #8]
 8002936:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800293a:	6091      	str	r1, [r2, #8]
 800293c:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800293e:	6891      	ldr	r1, [r2, #8]
 8002940:	4331      	orrs	r1, r6
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002942:	fab6 f686 	clz	r6, r6
 8002946:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002948:	6091      	str	r1, [r2, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800294a:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800294e:	d012      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002950:	49b5      	ldr	r1, [pc, #724]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002952:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002954:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002958:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800295c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1; 
 8002960:	bf08      	it	eq
 8002962:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002964:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002968:	bf16      	itet	ne
 800296a:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800296e:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002970:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002972:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002976:	02d9      	lsls	r1, r3, #11
 8002978:	d510      	bpl.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800297a:	48ab      	ldr	r0, [pc, #684]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800297c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800297e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002982:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002986:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800298a:	ea42 0201 	orr.w	r2, r2, r1
 800298e:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002992:	f000 8200 	beq.w	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x472>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 8002996:	2900      	cmp	r1, #0
 8002998:	bf08      	it	eq
 800299a:	2501      	moveq	r5, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 800299c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80029a0:	bf18      	it	ne
 80029a2:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029a4:	069a      	lsls	r2, r3, #26
 80029a6:	d531      	bpl.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80029a8:	4b9f      	ldr	r3, [pc, #636]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029aa:	4fa0      	ldr	r7, [pc, #640]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x308>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80029ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029b2:	641a      	str	r2, [r3, #64]	; 0x40
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ba:	9301      	str	r3, [sp, #4]
 80029bc:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c4:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029c6:	f7fe f869 	bl	8000a9c <HAL_GetTick>
 80029ca:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	05db      	lsls	r3, r3, #23
 80029d0:	f140 81e3 	bpl.w	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x476>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029d4:	4f94      	ldr	r7, [pc, #592]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80029d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029d8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80029dc:	f040 81e8 	bne.w	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029e2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80029e6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80029ea:	4a8f      	ldr	r2, [pc, #572]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80029ec:	f040 8205 	bne.w	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x4d6>
 80029f0:	6891      	ldr	r1, [r2, #8]
 80029f2:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80029f6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80029fa:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80029fe:	4301      	orrs	r1, r0
 8002a00:	6091      	str	r1, [r2, #8]
 8002a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a06:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002a08:	430b      	orrs	r3, r1
 8002a0a:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a0c:	6823      	ldr	r3, [r4, #0]
 8002a0e:	06da      	lsls	r2, r3, #27
 8002a10:	d50c      	bpl.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a12:	4a85      	ldr	r2, [pc, #532]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a14:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002a18:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8002a1c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8002a20:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002a24:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002a26:	4301      	orrs	r1, r0
 8002a28:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a2c:	045f      	lsls	r7, r3, #17
 8002a2e:	d508      	bpl.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a30:	497d      	ldr	r1, [pc, #500]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a32:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002a34:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002a38:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002a3c:	4302      	orrs	r2, r0
 8002a3e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a42:	0418      	lsls	r0, r3, #16
 8002a44:	d508      	bpl.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a46:	4978      	ldr	r1, [pc, #480]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a48:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002a4a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002a4e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002a52:	4302      	orrs	r2, r0
 8002a54:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a58:	03d9      	lsls	r1, r3, #15
 8002a5a:	d508      	bpl.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a5c:	4972      	ldr	r1, [pc, #456]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a5e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002a60:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002a64:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002a68:	4302      	orrs	r2, r0
 8002a6a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a6e:	039a      	lsls	r2, r3, #14
 8002a70:	d508      	bpl.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a72:	496d      	ldr	r1, [pc, #436]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a74:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002a76:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002a7a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002a7e:	4302      	orrs	r2, r0
 8002a80:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a84:	065f      	lsls	r7, r3, #25
 8002a86:	d508      	bpl.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a88:	4967      	ldr	r1, [pc, #412]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a8a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002a8c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002a90:	f022 0203 	bic.w	r2, r2, #3
 8002a94:	4302      	orrs	r2, r0
 8002a96:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a9a:	0618      	lsls	r0, r3, #24
 8002a9c:	d508      	bpl.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a9e:	4962      	ldr	r1, [pc, #392]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002aa0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002aa2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002aa6:	f022 020c 	bic.w	r2, r2, #12
 8002aaa:	4302      	orrs	r2, r0
 8002aac:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ab0:	05d9      	lsls	r1, r3, #23
 8002ab2:	d508      	bpl.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ab4:	495c      	ldr	r1, [pc, #368]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ab6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002ab8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002abc:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002ac0:	4302      	orrs	r2, r0
 8002ac2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ac6:	059a      	lsls	r2, r3, #22
 8002ac8:	d508      	bpl.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002aca:	4957      	ldr	r1, [pc, #348]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002acc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002ace:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002ad2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002ad6:	4302      	orrs	r2, r0
 8002ad8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002adc:	055f      	lsls	r7, r3, #21
 8002ade:	d508      	bpl.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ae0:	4951      	ldr	r1, [pc, #324]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ae2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ae4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002ae8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002aec:	4302      	orrs	r2, r0
 8002aee:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002af2:	0518      	lsls	r0, r3, #20
 8002af4:	d508      	bpl.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002af6:	494c      	ldr	r1, [pc, #304]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002afa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002afe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b02:	4302      	orrs	r2, r0
 8002b04:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b08:	04d9      	lsls	r1, r3, #19
 8002b0a:	d508      	bpl.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b0c:	4946      	ldr	r1, [pc, #280]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b0e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002b10:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b14:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002b18:	4302      	orrs	r2, r0
 8002b1a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b1e:	049a      	lsls	r2, r3, #18
 8002b20:	d508      	bpl.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b22:	4941      	ldr	r1, [pc, #260]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b24:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002b26:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b2a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002b2e:	4302      	orrs	r2, r0
 8002b30:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b34:	025f      	lsls	r7, r3, #9
 8002b36:	d508      	bpl.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b38:	493b      	ldr	r1, [pc, #236]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b3a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002b3c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b40:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002b44:	4302      	orrs	r2, r0
 8002b46:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b4a:	0298      	lsls	r0, r3, #10
 8002b4c:	d50c      	bpl.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b4e:	4836      	ldr	r0, [pc, #216]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b50:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002b52:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8002b56:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b5a:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1; 
 8002b5e:	bf08      	it	eq
 8002b60:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b62:	430a      	orrs	r2, r1
 8002b64:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 8002b68:	f013 0f08 	tst.w	r3, #8
 8002b6c:	bf18      	it	ne
 8002b6e:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b70:	0359      	lsls	r1, r3, #13
 8002b72:	d508      	bpl.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b74:	492c      	ldr	r1, [pc, #176]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b76:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002b78:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b80:	4302      	orrs	r2, r0
 8002b82:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b86:	021a      	lsls	r2, r3, #8
 8002b88:	d509      	bpl.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b8a:	4927      	ldr	r1, [pc, #156]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b8c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002b90:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b94:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002b98:	4302      	orrs	r2, r0
 8002b9a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002b9e:	2e01      	cmp	r6, #1
 8002ba0:	f000 8132 	beq.w	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002ba4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ba8:	f000 812e 	beq.w	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002bac:	2d01      	cmp	r5, #1
 8002bae:	f040 80f0 	bne.w	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x46e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8002bb2:	4d1d      	ldr	r5, [pc, #116]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bb4:	682b      	ldr	r3, [r5, #0]
 8002bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bba:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bbc:	f7fd ff6e 	bl	8000a9c <HAL_GetTick>
 8002bc0:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bc2:	682b      	ldr	r3, [r5, #0]
 8002bc4:	009f      	lsls	r7, r3, #2
 8002bc6:	f100 823e 	bmi.w	8003046 <HAL_RCCEx_PeriphCLKConfig+0x722>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bca:	6821      	ldr	r1, [r4, #0]
 8002bcc:	030e      	lsls	r6, r1, #12
 8002bce:	d501      	bpl.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002bd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002bd2:	b123      	cbz	r3, 8002bde <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002bd4:	02cd      	lsls	r5, r1, #11
 8002bd6:	d54c      	bpl.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x34e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d149      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8002bde:	4d12      	ldr	r5, [pc, #72]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002be0:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
 8002be4:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
 8002be8:	fa9e fcae 	rbit	ip, lr
 8002bec:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8002bf0:	fabc fc8c 	clz	ip, ip
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8002bf4:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8002bf8:	fa96 f7a6 	rbit	r7, r6
 8002bfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c00:	fab7 f787 	clz	r7, r7
 8002c04:	fa93 f3a3 	rbit	r3, r3
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c08:	fab3 f983 	clz	r9, r3
 8002c0c:	fa9e feae 	rbit	lr, lr
 8002c10:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 8002c14:	fabe fe8e 	clz	lr, lr
 8002c18:	fa98 f8a8 	rbit	r8, r8
 8002c1c:	fab8 f888 	clz	r8, r8
 8002c20:	fa96 f6a6 	rbit	r6, r6
 8002c24:	6963      	ldr	r3, [r4, #20]
 8002c26:	e003      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40007000 	.word	0x40007000
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8002c30:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8002c34:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c38:	fab6 f686 	clz	r6, r6
 8002c3c:	fa03 f909 	lsl.w	r9, r3, r9
 8002c40:	69a3      	ldr	r3, [r4, #24]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8002c42:	fa20 f00c 	lsr.w	r0, r0, ip
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8002c46:	40fa      	lsrs	r2, r7
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c48:	fa03 f808 	lsl.w	r8, r3, r8
 8002c4c:	fa00 f00e 	lsl.w	r0, r0, lr
 8002c50:	40b2      	lsls	r2, r6
 8002c52:	ea49 0308 	orr.w	r3, r9, r8
 8002c56:	4303      	orrs	r3, r0
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c5e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8002c62:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002c64:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002c68:	3a01      	subs	r2, #1
 8002c6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002c6e:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c72:	0288      	lsls	r0, r1, #10
 8002c74:	d53e      	bpl.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002c76:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002c78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c7c:	d13a      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8002c7e:	4d61      	ldr	r5, [pc, #388]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002c80:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
 8002c84:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
 8002c88:	fa9e fcae 	rbit	ip, lr
 8002c8c:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8002c90:	fabc fc8c 	clz	ip, ip
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8002c94:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8002c98:	fa96 f7a6 	rbit	r7, r6
 8002c9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ca0:	fab7 f787 	clz	r7, r7
 8002ca4:	fa93 f3a3 	rbit	r3, r3
 8002ca8:	f44f 3840 	mov.w	r8, #196608	; 0x30000
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002cac:	fab3 f983 	clz	r9, r3
 8002cb0:	fa98 f8a8 	rbit	r8, r8
 8002cb4:	fab8 f888 	clz	r8, r8
 8002cb8:	fa9e feae 	rbit	lr, lr
 8002cbc:	fabe fe8e 	clz	lr, lr
 8002cc0:	fa96 f6a6 	rbit	r6, r6
 8002cc4:	6963      	ldr	r3, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8002cc6:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8002cca:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002cce:	fab6 f686 	clz	r6, r6
 8002cd2:	fa03 f909 	lsl.w	r9, r3, r9
 8002cd6:	6a23      	ldr	r3, [r4, #32]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8002cd8:	fa20 f00c 	lsr.w	r0, r0, ip
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8002cdc:	40fa      	lsrs	r2, r7
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002cde:	fa03 f808 	lsl.w	r8, r3, r8
 8002ce2:	fa00 f00e 	lsl.w	r0, r0, lr
 8002ce6:	40b2      	lsls	r2, r6
 8002ce8:	ea49 0308 	orr.w	r3, r9, r8
 8002cec:	4303      	orrs	r3, r0
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002cf4:	070a      	lsls	r2, r1, #28
 8002cf6:	d540      	bpl.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x456>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8002cf8:	4842      	ldr	r0, [pc, #264]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002cfa:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 8002cfe:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002d02:	fa95 f6a5 	rbit	r6, r5
 8002d06:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
 8002d0a:	fab6 f686 	clz	r6, r6
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8002d0e:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8002d12:	fa9e f8ae 	rbit	r8, lr
 8002d16:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d1a:	fab8 f888 	clz	r8, r8
 8002d1e:	fa93 f3a3 	rbit	r3, r3
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d22:	fab3 f783 	clz	r7, r3
 8002d26:	fa9e feae 	rbit	lr, lr
 8002d2a:	fabe fe8e 	clz	lr, lr
 8002d2e:	fa95 f5a5 	rbit	r5, r5
 8002d32:	f04f 4ce0 	mov.w	ip, #1879048192	; 0x70000000
 8002d36:	fab5 f585 	clz	r5, r5
 8002d3a:	fa9c fcac 	rbit	ip, ip
 8002d3e:	6963      	ldr	r3, [r4, #20]
 8002d40:	fabc fc8c 	clz	ip, ip
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8002d44:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8002d48:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d4c:	40bb      	lsls	r3, r7
 8002d4e:	69e7      	ldr	r7, [r4, #28]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8002d50:	fa21 f108 	lsr.w	r1, r1, r8
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8002d54:	40f2      	lsrs	r2, r6
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d56:	fa07 f70c 	lsl.w	r7, r7, ip
 8002d5a:	fa01 f10e 	lsl.w	r1, r1, lr
 8002d5e:	40aa      	lsls	r2, r5
 8002d60:	433b      	orrs	r3, r7
 8002d62:	430b      	orrs	r3, r1
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002d6a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8002d6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d70:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d7a:	4c22      	ldr	r4, [pc, #136]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002d7c:	6823      	ldr	r3, [r4, #0]
 8002d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d82:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d84:	f7fd fe8a 	bl	8000a9c <HAL_GetTick>
 8002d88:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d8a:	6823      	ldr	r3, [r4, #0]
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	f140 8161 	bpl.w	8003054 <HAL_RCCEx_PeriphCLKConfig+0x730>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002d92:	2000      	movs	r0, #0
 8002d94:	e009      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x486>
      plli2sused = 1; 
 8002d96:	2601      	movs	r6, #1
 8002d98:	e600      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d9a:	f7fd fe7f 	bl	8000a9c <HAL_GetTick>
 8002d9e:	eba0 0008 	sub.w	r0, r0, r8
 8002da2:	2864      	cmp	r0, #100	; 0x64
 8002da4:	f67f ae12 	bls.w	80029cc <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8002da8:	2003      	movs	r0, #3
}
 8002daa:	b002      	add	sp, #8
 8002dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002db0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002db2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002db6:	4293      	cmp	r3, r2
 8002db8:	f43f ae12 	beq.w	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dbe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dc4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002dc8:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002dcc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002dd0:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002dd2:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002dd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dd6:	07d8      	lsls	r0, r3, #31
 8002dd8:	f57f ae02 	bpl.w	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8002ddc:	f7fd fe5e 	bl	8000a9c <HAL_GetTick>
 8002de0:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002de4:	0799      	lsls	r1, r3, #30
 8002de6:	f53f adfb 	bmi.w	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dea:	f7fd fe57 	bl	8000a9c <HAL_GetTick>
 8002dee:	eba0 0008 	sub.w	r0, r0, r8
 8002df2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8002df6:	d9f4      	bls.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8002df8:	e7d6      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dfa:	6891      	ldr	r1, [r2, #8]
 8002dfc:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002e00:	e5fe      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8002e02:	bf00      	nop
 8002e04:	40023800 	.word	0x40023800
    __HAL_RCC_PLLI2S_DISABLE();  
 8002e08:	4e96      	ldr	r6, [pc, #600]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x740>)
 8002e0a:	6833      	ldr	r3, [r6, #0]
 8002e0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e10:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002e12:	f7fd fe43 	bl	8000a9c <HAL_GetTick>
 8002e16:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e18:	6833      	ldr	r3, [r6, #0]
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	f100 810c 	bmi.w	8003038 <HAL_RCCEx_PeriphCLKConfig+0x714>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e20:	6822      	ldr	r2, [r4, #0]
 8002e22:	07d7      	lsls	r7, r2, #31
 8002e24:	d53c      	bpl.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002e26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e28:	bbd3      	cbnz	r3, 8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8002e2a:	f8d6 0084 	ldr.w	r0, [r6, #132]	; 0x84
 8002e2e:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 8002e32:	fa9c f8ac 	rbit	r8, ip
 8002e36:	f04f 6770 	mov.w	r7, #251658240	; 0xf000000
 8002e3a:	fab8 f888 	clz	r8, r8
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8002e3e:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
 8002e42:	fa97 fea7 	rbit	lr, r7
 8002e46:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e4a:	fabe fe8e 	clz	lr, lr
 8002e4e:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e52:	fab3 fa83 	clz	sl, r3
 8002e56:	fa9c fcac 	rbit	ip, ip
 8002e5a:	fabc fc8c 	clz	ip, ip
 8002e5e:	fa97 f7a7 	rbit	r7, r7
 8002e62:	f04f 49e0 	mov.w	r9, #1879048192	; 0x70000000
 8002e66:	fab7 f787 	clz	r7, r7
 8002e6a:	fa99 f9a9 	rbit	r9, r9
 8002e6e:	6863      	ldr	r3, [r4, #4]
 8002e70:	fab9 f989 	clz	r9, r9
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8002e74:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8002e78:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e7c:	fa03 fa0a 	lsl.w	sl, r3, sl
 8002e80:	68a3      	ldr	r3, [r4, #8]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8002e82:	fa20 f008 	lsr.w	r0, r0, r8
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8002e86:	fa21 f10e 	lsr.w	r1, r1, lr
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e8a:	fa03 f909 	lsl.w	r9, r3, r9
 8002e8e:	fa00 f00c 	lsl.w	r0, r0, ip
 8002e92:	40b9      	lsls	r1, r7
 8002e94:	ea4a 0309 	orr.w	r3, sl, r9
 8002e98:	4303      	orrs	r3, r0
 8002e9a:	430b      	orrs	r3, r1
 8002e9c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ea0:	0316      	lsls	r6, r2, #12
 8002ea2:	d503      	bpl.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002ea4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8002eac:	02d0      	lsls	r0, r2, #11
 8002eae:	d548      	bpl.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x61e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8002eb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eb6:	d144      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8002eb8:	4e6a      	ldr	r6, [pc, #424]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x740>)
 8002eba:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 8002ebe:	f8d6 0084 	ldr.w	r0, [r6, #132]	; 0x84
 8002ec2:	fa9c f8ac 	rbit	r8, ip
 8002ec6:	f04f 47e0 	mov.w	r7, #1879048192	; 0x70000000
 8002eca:	fab8 f888 	clz	r8, r8
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8002ece:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
 8002ed2:	fa97 fea7 	rbit	lr, r7
 8002ed6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002eda:	fabe fe8e 	clz	lr, lr
 8002ede:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002ee2:	fab3 fa83 	clz	sl, r3
 8002ee6:	fa9c fcac 	rbit	ip, ip
 8002eea:	f04f 6970 	mov.w	r9, #251658240	; 0xf000000
 8002eee:	fabc fc8c 	clz	ip, ip
 8002ef2:	fa99 f9a9 	rbit	r9, r9
 8002ef6:	fab9 f989 	clz	r9, r9
 8002efa:	fa97 f7a7 	rbit	r7, r7
 8002efe:	6863      	ldr	r3, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8002f00:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8002f04:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f08:	fab7 f787 	clz	r7, r7
 8002f0c:	fa03 fa0a 	lsl.w	sl, r3, sl
 8002f10:	68e3      	ldr	r3, [r4, #12]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8002f12:	fa20 f008 	lsr.w	r0, r0, r8
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8002f16:	fa21 f10e 	lsr.w	r1, r1, lr
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f1a:	fa03 f909 	lsl.w	r9, r3, r9
 8002f1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8002f22:	40b9      	lsls	r1, r7
 8002f24:	ea4a 0309 	orr.w	r3, sl, r9
 8002f28:	4303      	orrs	r3, r0
 8002f2a:	430b      	orrs	r3, r1
 8002f2c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8002f30:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8002f34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f36:	f021 011f 	bic.w	r1, r1, #31
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f42:	01d1      	lsls	r1, r2, #7
 8002f44:	d53b      	bpl.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x69a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8002f46:	4e47      	ldr	r6, [pc, #284]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x740>)
 8002f48:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 8002f4c:	f8d6 0084 	ldr.w	r0, [r6, #132]	; 0x84
 8002f50:	fa9c f8ac 	rbit	r8, ip
 8002f54:	f04f 47e0 	mov.w	r7, #1879048192	; 0x70000000
 8002f58:	fab8 f888 	clz	r8, r8
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8002f5c:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
 8002f60:	fa97 fea7 	rbit	lr, r7
 8002f64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f68:	fabe fe8e 	clz	lr, lr
 8002f6c:	fa93 f3a3 	rbit	r3, r3
 8002f70:	f44f 3940 	mov.w	r9, #196608	; 0x30000
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f74:	fab3 fa83 	clz	sl, r3
 8002f78:	fa99 f9a9 	rbit	r9, r9
 8002f7c:	fab9 f989 	clz	r9, r9
 8002f80:	fa9c fcac 	rbit	ip, ip
 8002f84:	fabc fc8c 	clz	ip, ip
 8002f88:	fa97 f7a7 	rbit	r7, r7
 8002f8c:	6863      	ldr	r3, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8002f8e:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8002f92:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f96:	fab7 f787 	clz	r7, r7
 8002f9a:	fa03 fa0a 	lsl.w	sl, r3, sl
 8002f9e:	6923      	ldr	r3, [r4, #16]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8002fa0:	fa20 f008 	lsr.w	r0, r0, r8
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8002fa4:	fa21 f10e 	lsr.w	r1, r1, lr
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002fa8:	fa03 f909 	lsl.w	r9, r3, r9
 8002fac:	fa00 f00c 	lsl.w	r0, r0, ip
 8002fb0:	40b9      	lsls	r1, r7
 8002fb2:	ea4a 0309 	orr.w	r3, sl, r9
 8002fb6:	4303      	orrs	r3, r0
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002fbe:	0192      	lsls	r2, r2, #6
 8002fc0:	d528      	bpl.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8002fc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fc6:	fa93 f3a3 	rbit	r3, r3
 8002fca:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fce:	fab3 f683 	clz	r6, r3
 8002fd2:	fa90 f0a0 	rbit	r0, r0
 8002fd6:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8002fda:	fab0 f080 	clz	r0, r0
 8002fde:	fa91 f1a1 	rbit	r1, r1
 8002fe2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002fe6:	fab1 f181 	clz	r1, r1
 8002fea:	fa92 f2a2 	rbit	r2, r2
 8002fee:	6863      	ldr	r3, [r4, #4]
 8002ff0:	fab2 f282 	clz	r2, r2
 8002ff4:	40b3      	lsls	r3, r6
 8002ff6:	6926      	ldr	r6, [r4, #16]
 8002ff8:	fa06 f000 	lsl.w	r0, r6, r0
 8002ffc:	4303      	orrs	r3, r0
 8002ffe:	68e0      	ldr	r0, [r4, #12]
 8003000:	fa00 f101 	lsl.w	r1, r0, r1
 8003004:	430b      	orrs	r3, r1
 8003006:	68a1      	ldr	r1, [r4, #8]
 8003008:	fa01 f202 	lsl.w	r2, r1, r2
 800300c:	4313      	orrs	r3, r2
 800300e:	4a15      	ldr	r2, [pc, #84]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x740>)
 8003010:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003014:	4e13      	ldr	r6, [pc, #76]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x740>)
 8003016:	6833      	ldr	r3, [r6, #0]
 8003018:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800301c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800301e:	f7fd fd3d 	bl	8000a9c <HAL_GetTick>
 8003022:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003024:	6833      	ldr	r3, [r6, #0]
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	f53f adc0 	bmi.w	8002bac <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800302c:	f7fd fd36 	bl	8000a9c <HAL_GetTick>
 8003030:	1bc0      	subs	r0, r0, r7
 8003032:	2864      	cmp	r0, #100	; 0x64
 8003034:	d9f6      	bls.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003036:	e6b7      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x484>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003038:	f7fd fd30 	bl	8000a9c <HAL_GetTick>
 800303c:	1bc0      	subs	r0, r0, r7
 800303e:	2864      	cmp	r0, #100	; 0x64
 8003040:	f67f aeea 	bls.w	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003044:	e6b0      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x484>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003046:	f7fd fd29 	bl	8000a9c <HAL_GetTick>
 800304a:	1b80      	subs	r0, r0, r6
 800304c:	2864      	cmp	r0, #100	; 0x64
 800304e:	f67f adb8 	bls.w	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
 8003052:	e6a9      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x484>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003054:	f7fd fd22 	bl	8000a9c <HAL_GetTick>
 8003058:	1b40      	subs	r0, r0, r5
 800305a:	2864      	cmp	r0, #100	; 0x64
 800305c:	f67f ae95 	bls.w	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003060:	e6a2      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003062:	bf00      	nop
 8003064:	40023800 	.word	0x40023800

08003068 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003068:	6803      	ldr	r3, [r0, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003070:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003072:	6842      	ldr	r2, [r0, #4]
 8003074:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003078:	d10a      	bne.n	8003090 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 800307a:	6882      	ldr	r2, [r0, #8]
 800307c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003080:	d002      	beq.n	8003088 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003082:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003086:	d103      	bne.n	8003090 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800308e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003090:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003092:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003096:	d109      	bne.n	80030ac <SPI_WaitFifoStateUntilTimeout.part.1+0x44>
        {
          SPI_RESET_CRC(hspi);
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800309e:	0412      	lsls	r2, r2, #16
 80030a0:	0c12      	lsrs	r2, r2, #16
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030ac:	2301      	movs	r3, #1
 80030ae:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030b2:	2300      	movs	r3, #0
 80030b4:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 80030b8:	2003      	movs	r0, #3
 80030ba:	4770      	bx	lr

080030bc <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 80030bc:	b570      	push	{r4, r5, r6, lr}
 80030be:	4605      	mov	r5, r0
 80030c0:	460c      	mov	r4, r1
 80030c2:	4616      	mov	r6, r2
  while ((hspi->Instance->SR & Flag) != State)
 80030c4:	682b      	ldr	r3, [r5, #0]
 80030c6:	6898      	ldr	r0, [r3, #8]
 80030c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80030cc:	d100      	bne.n	80030d0 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x14>
}
 80030ce:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 80030d0:	1c62      	adds	r2, r4, #1
 80030d2:	d0f8      	beq.n	80030c6 <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80030d4:	b924      	cbnz	r4, 80030e0 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x24>
 80030d6:	4628      	mov	r0, r5
}
 80030d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80030dc:	f7ff bfc4 	b.w	8003068 <SPI_WaitFifoStateUntilTimeout.part.1>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80030e0:	f7fd fcdc 	bl	8000a9c <HAL_GetTick>
 80030e4:	1b80      	subs	r0, r0, r6
 80030e6:	4284      	cmp	r4, r0
 80030e8:	d8ec      	bhi.n	80030c4 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 80030ea:	e7f4      	b.n	80030d6 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x1a>

080030ec <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80030ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030ee:	4606      	mov	r6, r0
 80030f0:	460c      	mov	r4, r1
 80030f2:	4615      	mov	r5, r2
 80030f4:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 80030f6:	6831      	ldr	r1, [r6, #0]
 80030f8:	6888      	ldr	r0, [r1, #8]
 80030fa:	4020      	ands	r0, r4
 80030fc:	d00e      	beq.n	800311c <SPI_WaitFifoStateUntilTimeout.constprop.11+0x30>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80030fe:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8003102:	d105      	bne.n	8003110 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x24>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8003104:	7b0a      	ldrb	r2, [r1, #12]
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	f88d 2007 	strb.w	r2, [sp, #7]
      UNUSED(tmpreg);
 800310c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (Timeout != HAL_MAX_DELAY)
 8003110:	1c6b      	adds	r3, r5, #1
 8003112:	d0f1      	beq.n	80030f8 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if ((Timeout == 0) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8003114:	b925      	cbnz	r5, 8003120 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x34>
 8003116:	4630      	mov	r0, r6
 8003118:	f7ff ffa6 	bl	8003068 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 800311c:	b003      	add	sp, #12
 800311e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8003120:	f7fd fcbc 	bl	8000a9c <HAL_GetTick>
 8003124:	1bc0      	subs	r0, r0, r7
 8003126:	4285      	cmp	r5, r0
 8003128:	d8e5      	bhi.n	80030f6 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 800312a:	e7f4      	b.n	8003116 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x2a>

0800312c <SPI_EndRxTxTransaction>:
  * @param hspi: SPI handle
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800312c:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800312e:	4613      	mov	r3, r2
{
 8003130:	460d      	mov	r5, r1
 8003132:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003134:	460a      	mov	r2, r1
 8003136:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 800313a:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800313c:	f7ff ffd6 	bl	80030ec <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8003140:	b128      	cbz	r0, 800314e <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003142:	6e23      	ldr	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8003144:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003146:	f043 0320 	orr.w	r3, r3, #32
 800314a:	6623      	str	r3, [r4, #96]	; 0x60
 800314c:	e00f      	b.n	800316e <SPI_EndRxTxTransaction+0x42>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800314e:	4632      	mov	r2, r6
 8003150:	4629      	mov	r1, r5
 8003152:	4620      	mov	r0, r4
 8003154:	f7ff ffb2 	bl	80030bc <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8003158:	2800      	cmp	r0, #0
 800315a:	d1f2      	bne.n	8003142 <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800315c:	4633      	mov	r3, r6
 800315e:	462a      	mov	r2, r5
 8003160:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003164:	4620      	mov	r0, r4
 8003166:	f7ff ffc1 	bl	80030ec <SPI_WaitFifoStateUntilTimeout.constprop.11>
 800316a:	2800      	cmp	r0, #0
 800316c:	d1e9      	bne.n	8003142 <SPI_EndRxTxTransaction+0x16>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 800316e:	bd70      	pop	{r4, r5, r6, pc}

08003170 <HAL_SPI_Init>:
{
 8003170:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8003172:	4604      	mov	r4, r0
 8003174:	2800      	cmp	r0, #0
 8003176:	d04e      	beq.n	8003216 <HAL_SPI_Init+0xa6>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003178:	2300      	movs	r3, #0
 800317a:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800317c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8003180:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003184:	b91b      	cbnz	r3, 800318e <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8003186:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800318a:	f006 ff15 	bl	8009fb8 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800318e:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8003190:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003192:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003194:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003198:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800319a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800319e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a2:	600b      	str	r3, [r1, #0]
 80031a4:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031a8:	d932      	bls.n	8003210 <HAL_SPI_Init+0xa0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80031aa:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80031ac:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031b0:	bf18      	it	ne
 80031b2:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80031b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80031b6:	b92b      	cbnz	r3, 80031c4 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031b8:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80031bc:	bf8c      	ite	hi
 80031be:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80031c0:	2301      	movls	r3, #1
 80031c2:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80031c4:	68a6      	ldr	r6, [r4, #8]
 80031c6:	6863      	ldr	r3, [r4, #4]
 80031c8:	69a5      	ldr	r5, [r4, #24]
 80031ca:	4333      	orrs	r3, r6
 80031cc:	6926      	ldr	r6, [r4, #16]
 80031ce:	4333      	orrs	r3, r6
 80031d0:	6966      	ldr	r6, [r4, #20]
 80031d2:	4333      	orrs	r3, r6
 80031d4:	69e6      	ldr	r6, [r4, #28]
 80031d6:	4333      	orrs	r3, r6
 80031d8:	6a26      	ldr	r6, [r4, #32]
 80031da:	4333      	orrs	r3, r6
 80031dc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80031de:	4333      	orrs	r3, r6
 80031e0:	f405 7600 	and.w	r6, r5, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80031e4:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80031e6:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80031e8:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80031ec:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80031ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031f0:	431a      	orrs	r2, r3
 80031f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80031f4:	431a      	orrs	r2, r3
 80031f6:	432a      	orrs	r2, r5
 80031f8:	4302      	orrs	r2, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031fa:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80031fc:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031fe:	69cb      	ldr	r3, [r1, #28]
 8003200:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003204:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8003206:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003208:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800320a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 800320e:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003210:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003214:	e7cc      	b.n	80031b0 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8003216:	2001      	movs	r0, #1
}
 8003218:	bd70      	pop	{r4, r5, r6, pc}

0800321a <HAL_SPI_Transmit>:
{
 800321a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800321e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8003220:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8003224:	4604      	mov	r4, r0
 8003226:	460d      	mov	r5, r1
  __HAL_LOCK(hspi);
 8003228:	2b01      	cmp	r3, #1
{
 800322a:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800322c:	f000 8097 	beq.w	800335e <HAL_SPI_Transmit+0x144>
 8003230:	2301      	movs	r3, #1
 8003232:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003236:	f7fd fc31 	bl	8000a9c <HAL_GetTick>
 800323a:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800323c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8003240:	b2c0      	uxtb	r0, r0
 8003242:	2801      	cmp	r0, #1
 8003244:	f040 8089 	bne.w	800335a <HAL_SPI_Transmit+0x140>
  if ((pData == NULL) || (Size == 0U))
 8003248:	2d00      	cmp	r5, #0
 800324a:	d060      	beq.n	800330e <HAL_SPI_Transmit+0xf4>
 800324c:	f1b8 0f00 	cmp.w	r8, #0
 8003250:	d05d      	beq.n	800330e <HAL_SPI_Transmit+0xf4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003252:	2303      	movs	r3, #3
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003254:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003256:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800325a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800325e:	2300      	movs	r3, #0
 8003260:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003262:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8003264:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8003268:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800326c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003270:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003272:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003274:	68a3      	ldr	r3, [r4, #8]
 8003276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800327a:	6823      	ldr	r3, [r4, #0]
 800327c:	d103      	bne.n	8003286 <HAL_SPI_Transmit+0x6c>
    SPI_1LINE_TX(hspi);
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003284:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	0652      	lsls	r2, r2, #25
 800328a:	d403      	bmi.n	8003294 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003292:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003294:	68e3      	ldr	r3, [r4, #12]
 8003296:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800329a:	d81d      	bhi.n	80032d8 <HAL_SPI_Transmit+0xbe>
    while (hspi->TxXferCount > 0U)
 800329c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800329e:	b29b      	uxth	r3, r3
 80032a0:	b1f3      	cbz	r3, 80032e0 <HAL_SPI_Transmit+0xc6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032a2:	6823      	ldr	r3, [r4, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	0792      	lsls	r2, r2, #30
 80032a8:	d54a      	bpl.n	8003340 <HAL_SPI_Transmit+0x126>
        if (hspi->TxXferCount > 1U)
 80032aa:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80032ac:	b292      	uxth	r2, r2
 80032ae:	2a01      	cmp	r2, #1
 80032b0:	d93e      	bls.n	8003330 <HAL_SPI_Transmit+0x116>
          hspi->Instance->DR = *((uint16_t *)pData);
 80032b2:	f835 2b02 	ldrh.w	r2, [r5], #2
 80032b6:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 80032b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032ba:	3b02      	subs	r3, #2
 80032bc:	b29b      	uxth	r3, r3
 80032be:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80032c0:	e7ec      	b.n	800329c <HAL_SPI_Transmit+0x82>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	0790      	lsls	r0, r2, #30
 80032c8:	d51f      	bpl.n	800330a <HAL_SPI_Transmit+0xf0>
        hspi->Instance->DR = *((uint16_t *)pData);
 80032ca:	f835 2b02 	ldrh.w	r2, [r5], #2
 80032ce:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80032d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80032d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032da:	b29b      	uxth	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f0      	bne.n	80032c2 <HAL_SPI_Transmit+0xa8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032e0:	463a      	mov	r2, r7
 80032e2:	4631      	mov	r1, r6
 80032e4:	4620      	mov	r0, r4
 80032e6:	f7ff ff21 	bl	800312c <SPI_EndRxTxTransaction>
 80032ea:	2800      	cmp	r0, #0
 80032ec:	d132      	bne.n	8003354 <HAL_SPI_Transmit+0x13a>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032ee:	68a3      	ldr	r3, [r4, #8]
 80032f0:	b933      	cbnz	r3, 8003300 <HAL_SPI_Transmit+0xe6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032f2:	9301      	str	r3, [sp, #4]
 80032f4:	6823      	ldr	r3, [r4, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	9201      	str	r2, [sp, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	9301      	str	r3, [sp, #4]
 80032fe:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003300:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8003302:	3000      	adds	r0, #0
 8003304:	bf18      	it	ne
 8003306:	2001      	movne	r0, #1
 8003308:	e001      	b.n	800330e <HAL_SPI_Transmit+0xf4>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800330a:	b94e      	cbnz	r6, 8003320 <HAL_SPI_Transmit+0x106>
          errorcode = HAL_TIMEOUT;
 800330c:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800330e:	2301      	movs	r3, #1
 8003310:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003314:	2300      	movs	r3, #0
 8003316:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800331a:	b002      	add	sp, #8
 800331c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003320:	1c71      	adds	r1, r6, #1
 8003322:	d0d9      	beq.n	80032d8 <HAL_SPI_Transmit+0xbe>
 8003324:	f7fd fbba 	bl	8000a9c <HAL_GetTick>
 8003328:	1bc0      	subs	r0, r0, r7
 800332a:	4286      	cmp	r6, r0
 800332c:	d8d4      	bhi.n	80032d8 <HAL_SPI_Transmit+0xbe>
 800332e:	e7ed      	b.n	800330c <HAL_SPI_Transmit+0xf2>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8003330:	782a      	ldrb	r2, [r5, #0]
 8003332:	3501      	adds	r5, #1
 8003334:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8003336:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003338:	3b01      	subs	r3, #1
 800333a:	b29b      	uxth	r3, r3
 800333c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800333e:	e7ad      	b.n	800329c <HAL_SPI_Transmit+0x82>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003340:	2e00      	cmp	r6, #0
 8003342:	d0e3      	beq.n	800330c <HAL_SPI_Transmit+0xf2>
 8003344:	1c73      	adds	r3, r6, #1
 8003346:	d0a9      	beq.n	800329c <HAL_SPI_Transmit+0x82>
 8003348:	f7fd fba8 	bl	8000a9c <HAL_GetTick>
 800334c:	1bc0      	subs	r0, r0, r7
 800334e:	4286      	cmp	r6, r0
 8003350:	d8a4      	bhi.n	800329c <HAL_SPI_Transmit+0x82>
 8003352:	e7db      	b.n	800330c <HAL_SPI_Transmit+0xf2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003354:	2320      	movs	r3, #32
 8003356:	6623      	str	r3, [r4, #96]	; 0x60
 8003358:	e7c9      	b.n	80032ee <HAL_SPI_Transmit+0xd4>
    errorcode = HAL_BUSY;
 800335a:	2002      	movs	r0, #2
 800335c:	e7d7      	b.n	800330e <HAL_SPI_Transmit+0xf4>
  __HAL_LOCK(hspi);
 800335e:	2002      	movs	r0, #2
 8003360:	e7db      	b.n	800331a <HAL_SPI_Transmit+0x100>

08003362 <TIM_TI1_ConfigInputStage>:
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003362:	6a03      	ldr	r3, [r0, #32]
{
 8003364:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003366:	6a04      	ldr	r4, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003368:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800336c:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 8003370:	430b      	orrs	r3, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003372:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8003374:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003376:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 800337a:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800337e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003380:	6203      	str	r3, [r0, #32]
 8003382:	bd10      	pop	{r4, pc}

08003384 <TIM_TI2_ConfigInputStage>:
{
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003384:	6a03      	ldr	r3, [r0, #32]
 8003386:	f023 0310 	bic.w	r3, r3, #16
{
 800338a:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800338c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800338e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003390:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003392:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003396:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 800339a:	ea44 3202 	orr.w	r2, r4, r2, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 800339e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033a2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80033a4:	6203      	str	r3, [r0, #32]
 80033a6:	bd10      	pop	{r4, pc}

080033a8 <HAL_TIM_Base_Start>:
  __HAL_TIM_ENABLE(htim);
 80033a8:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80033aa:	2302      	movs	r3, #2
 80033ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 80033b0:	6813      	ldr	r3, [r2, #0]
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 80033b8:	2301      	movs	r3, #1
 80033ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80033be:	2000      	movs	r0, #0
 80033c0:	4770      	bx	lr

080033c2 <HAL_TIM_Base_Stop>:
  htim->State= HAL_TIM_STATE_BUSY;
 80033c2:	2302      	movs	r3, #2
  __HAL_TIM_DISABLE(htim);
 80033c4:	f241 1211 	movw	r2, #4369	; 0x1111
  htim->State= HAL_TIM_STATE_BUSY;
 80033c8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 80033cc:	6803      	ldr	r3, [r0, #0]
 80033ce:	6a19      	ldr	r1, [r3, #32]
 80033d0:	4211      	tst	r1, r2
 80033d2:	d108      	bne.n	80033e6 <HAL_TIM_Base_Stop+0x24>
 80033d4:	6a19      	ldr	r1, [r3, #32]
 80033d6:	f240 4244 	movw	r2, #1092	; 0x444
 80033da:	4211      	tst	r1, r2
 80033dc:	d103      	bne.n	80033e6 <HAL_TIM_Base_Stop+0x24>
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	f022 0201 	bic.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]
  htim->State= HAL_TIM_STATE_READY;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80033ec:	2000      	movs	r0, #0
 80033ee:	4770      	bx	lr

080033f0 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033f0:	6803      	ldr	r3, [r0, #0]
}
 80033f2:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]
}
 8003404:	4770      	bx	lr

08003406 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003406:	6803      	ldr	r3, [r0, #0]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	f022 0201 	bic.w	r2, r2, #1
 800340e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8003410:	f241 1211 	movw	r2, #4369	; 0x1111
 8003414:	6a19      	ldr	r1, [r3, #32]
 8003416:	4211      	tst	r1, r2
 8003418:	d108      	bne.n	800342c <HAL_TIM_Base_Stop_IT+0x26>
 800341a:	6a19      	ldr	r1, [r3, #32]
 800341c:	f240 4244 	movw	r2, #1092	; 0x444
 8003420:	4211      	tst	r1, r2
 8003422:	d103      	bne.n	800342c <HAL_TIM_Base_Stop_IT+0x26>
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	f022 0201 	bic.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]
}
 800342c:	2000      	movs	r0, #0
 800342e:	4770      	bx	lr

08003430 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003430:	4a30      	ldr	r2, [pc, #192]	; (80034f4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8003432:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003434:	4290      	cmp	r0, r2
 8003436:	d012      	beq.n	800345e <TIM_Base_SetConfig+0x2e>
 8003438:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800343c:	d00f      	beq.n	800345e <TIM_Base_SetConfig+0x2e>
 800343e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003442:	4290      	cmp	r0, r2
 8003444:	d00b      	beq.n	800345e <TIM_Base_SetConfig+0x2e>
 8003446:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800344a:	4290      	cmp	r0, r2
 800344c:	d007      	beq.n	800345e <TIM_Base_SetConfig+0x2e>
 800344e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003452:	4290      	cmp	r0, r2
 8003454:	d003      	beq.n	800345e <TIM_Base_SetConfig+0x2e>
 8003456:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800345a:	4290      	cmp	r0, r2
 800345c:	d11d      	bne.n	800349a <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800345e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003464:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003466:	4a23      	ldr	r2, [pc, #140]	; (80034f4 <TIM_Base_SetConfig+0xc4>)
 8003468:	4290      	cmp	r0, r2
 800346a:	d104      	bne.n	8003476 <TIM_Base_SetConfig+0x46>
    tmpcr1 &= ~TIM_CR1_CKD;
 800346c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003470:	68ca      	ldr	r2, [r1, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	e028      	b.n	80034c8 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003476:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800347a:	d0f7      	beq.n	800346c <TIM_Base_SetConfig+0x3c>
 800347c:	4a1e      	ldr	r2, [pc, #120]	; (80034f8 <TIM_Base_SetConfig+0xc8>)
 800347e:	4290      	cmp	r0, r2
 8003480:	d0f4      	beq.n	800346c <TIM_Base_SetConfig+0x3c>
 8003482:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003486:	4290      	cmp	r0, r2
 8003488:	d0f0      	beq.n	800346c <TIM_Base_SetConfig+0x3c>
 800348a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800348e:	4290      	cmp	r0, r2
 8003490:	d0ec      	beq.n	800346c <TIM_Base_SetConfig+0x3c>
 8003492:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003496:	4290      	cmp	r0, r2
 8003498:	d0e8      	beq.n	800346c <TIM_Base_SetConfig+0x3c>
 800349a:	4a18      	ldr	r2, [pc, #96]	; (80034fc <TIM_Base_SetConfig+0xcc>)
 800349c:	4290      	cmp	r0, r2
 800349e:	d0e5      	beq.n	800346c <TIM_Base_SetConfig+0x3c>
 80034a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034a4:	4290      	cmp	r0, r2
 80034a6:	d0e1      	beq.n	800346c <TIM_Base_SetConfig+0x3c>
 80034a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034ac:	4290      	cmp	r0, r2
 80034ae:	d0dd      	beq.n	800346c <TIM_Base_SetConfig+0x3c>
 80034b0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80034b4:	4290      	cmp	r0, r2
 80034b6:	d0d9      	beq.n	800346c <TIM_Base_SetConfig+0x3c>
 80034b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034bc:	4290      	cmp	r0, r2
 80034be:	d0d5      	beq.n	800346c <TIM_Base_SetConfig+0x3c>
 80034c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034c4:	4290      	cmp	r0, r2
 80034c6:	d0d1      	beq.n	800346c <TIM_Base_SetConfig+0x3c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034c8:	694a      	ldr	r2, [r1, #20]
 80034ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034ce:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80034d0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034d2:	688b      	ldr	r3, [r1, #8]
 80034d4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80034d6:	680b      	ldr	r3, [r1, #0]
 80034d8:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80034da:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <TIM_Base_SetConfig+0xc4>)
 80034dc:	4298      	cmp	r0, r3
 80034de:	d006      	beq.n	80034ee <TIM_Base_SetConfig+0xbe>
 80034e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034e4:	4298      	cmp	r0, r3
 80034e6:	d002      	beq.n	80034ee <TIM_Base_SetConfig+0xbe>
  TIMx->EGR = TIM_EGR_UG;
 80034e8:	2301      	movs	r3, #1
 80034ea:	6143      	str	r3, [r0, #20]
}
 80034ec:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80034ee:	690b      	ldr	r3, [r1, #16]
 80034f0:	6303      	str	r3, [r0, #48]	; 0x30
 80034f2:	e7f9      	b.n	80034e8 <TIM_Base_SetConfig+0xb8>
 80034f4:	40010000 	.word	0x40010000
 80034f8:	40000400 	.word	0x40000400
 80034fc:	40014000 	.word	0x40014000

08003500 <HAL_TIM_Base_Init>:
{ 
 8003500:	b510      	push	{r4, lr}
  if(htim == NULL)
 8003502:	4604      	mov	r4, r0
 8003504:	b1a0      	cbz	r0, 8003530 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8003506:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800350a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800350e:	b91b      	cbnz	r3, 8003518 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003510:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003514:	f006 fdd6 	bl	800a0c4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8003518:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800351a:	6820      	ldr	r0, [r4, #0]
 800351c:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 800351e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003522:	f7ff ff85 	bl	8003430 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003526:	2301      	movs	r3, #1
  return HAL_OK;
 8003528:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800352a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800352e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003530:	2001      	movs	r0, #1
}
 8003532:	bd10      	pop	{r4, pc}

08003534 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003534:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003536:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 8003538:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800353a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800353e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003542:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003544:	6083      	str	r3, [r0, #8]
 8003546:	bd10      	pop	{r4, pc}

08003548 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003548:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800354c:	2b01      	cmp	r3, #1
{
 800354e:	b510      	push	{r4, lr}
 8003550:	4604      	mov	r4, r0
 8003552:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003556:	d018      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800355c:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 800355e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8003560:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003564:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003566:	4b3e      	ldr	r3, [pc, #248]	; (8003660 <HAL_TIM_ConfigClockSource+0x118>)
 8003568:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800356a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800356c:	680b      	ldr	r3, [r1, #0]
 800356e:	2b40      	cmp	r3, #64	; 0x40
 8003570:	d059      	beq.n	8003626 <HAL_TIM_ConfigClockSource+0xde>
 8003572:	d815      	bhi.n	80035a0 <HAL_TIM_ConfigClockSource+0x58>
 8003574:	2b10      	cmp	r3, #16
 8003576:	d067      	beq.n	8003648 <HAL_TIM_ConfigClockSource+0x100>
 8003578:	d808      	bhi.n	800358c <HAL_TIM_ConfigClockSource+0x44>
 800357a:	2b00      	cmp	r3, #0
 800357c:	d05e      	beq.n	800363c <HAL_TIM_ConfigClockSource+0xf4>
  htim->State = HAL_TIM_STATE_READY;
 800357e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003580:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003582:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003586:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800358a:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800358c:	2b20      	cmp	r3, #32
 800358e:	d061      	beq.n	8003654 <HAL_TIM_ConfigClockSource+0x10c>
 8003590:	2b30      	cmp	r3, #48	; 0x30
 8003592:	d1f4      	bne.n	800357e <HAL_TIM_ConfigClockSource+0x36>
   tmpsmcr = TIMx->SMCR;
 8003594:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800359a:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 800359e:	e026      	b.n	80035ee <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 80035a0:	2b70      	cmp	r3, #112	; 0x70
 80035a2:	d026      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0xaa>
 80035a4:	d80e      	bhi.n	80035c4 <HAL_TIM_ConfigClockSource+0x7c>
 80035a6:	2b50      	cmp	r3, #80	; 0x50
 80035a8:	d032      	beq.n	8003610 <HAL_TIM_ConfigClockSource+0xc8>
 80035aa:	2b60      	cmp	r3, #96	; 0x60
 80035ac:	d1e7      	bne.n	800357e <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80035ae:	68ca      	ldr	r2, [r1, #12]
 80035b0:	6849      	ldr	r1, [r1, #4]
 80035b2:	f7ff fee7 	bl	8003384 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035b6:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 80035b8:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80035ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80035be:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80035c2:	e023      	b.n	800360c <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 80035c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c8:	d00c      	beq.n	80035e4 <HAL_TIM_ConfigClockSource+0x9c>
 80035ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ce:	d1d6      	bne.n	800357e <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 80035d0:	68cb      	ldr	r3, [r1, #12]
 80035d2:	684a      	ldr	r2, [r1, #4]
 80035d4:	6889      	ldr	r1, [r1, #8]
 80035d6:	f7ff ffad 	bl	8003534 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035da:	6822      	ldr	r2, [r4, #0]
 80035dc:	6893      	ldr	r3, [r2, #8]
 80035de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035e2:	e013      	b.n	800360c <HAL_TIM_ConfigClockSource+0xc4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80035e4:	6883      	ldr	r3, [r0, #8]
 80035e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ea:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 80035ee:	6083      	str	r3, [r0, #8]
 80035f0:	e7c5      	b.n	800357e <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 80035f2:	68cb      	ldr	r3, [r1, #12]
 80035f4:	684a      	ldr	r2, [r1, #4]
 80035f6:	6889      	ldr	r1, [r1, #8]
 80035f8:	f7ff ff9c 	bl	8003534 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035fc:	6822      	ldr	r2, [r4, #0]
 80035fe:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003604:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003608:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800360c:	6093      	str	r3, [r2, #8]
    break;
 800360e:	e7b6      	b.n	800357e <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003610:	68ca      	ldr	r2, [r1, #12]
 8003612:	6849      	ldr	r1, [r1, #4]
 8003614:	f7ff fea5 	bl	8003362 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003618:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 800361a:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800361c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003620:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8003624:	e7f2      	b.n	800360c <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003626:	68ca      	ldr	r2, [r1, #12]
 8003628:	6849      	ldr	r1, [r1, #4]
 800362a:	f7ff fe9a 	bl	8003362 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800362e:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8003630:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003636:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800363a:	e7e7      	b.n	800360c <HAL_TIM_ConfigClockSource+0xc4>
   tmpsmcr = TIMx->SMCR;
 800363c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800363e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003642:	f043 0307 	orr.w	r3, r3, #7
 8003646:	e7d2      	b.n	80035ee <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 8003648:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800364a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800364e:	f043 0317 	orr.w	r3, r3, #23
 8003652:	e7cc      	b.n	80035ee <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 8003654:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800365a:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 800365e:	e7c6      	b.n	80035ee <HAL_TIM_ConfigClockSource+0xa6>
 8003660:	fffe0088 	.word	0xfffe0088

08003664 <HAL_TIM_SlaveConfigSynchronization>:
{
 8003664:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003666:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800366a:	4604      	mov	r4, r0
 800366c:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800366e:	2b01      	cmp	r3, #1
 8003670:	d01e      	beq.n	80036b0 <HAL_TIM_SlaveConfigSynchronization+0x4c>
  htim->State = HAL_TIM_STATE_BUSY;
 8003672:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003676:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 8003678:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800367a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800367e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003680:	684a      	ldr	r2, [r1, #4]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003686:	680d      	ldr	r5, [r1, #0]
  switch (sSlaveConfig->InputTrigger)
 8003688:	2a50      	cmp	r2, #80	; 0x50
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800368a:	ea43 0302 	orr.w	r3, r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 800368e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003692:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003696:	ea43 0305 	orr.w	r3, r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800369a:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 800369c:	d021      	beq.n	80036e2 <HAL_TIM_SlaveConfigSynchronization+0x7e>
 800369e:	d808      	bhi.n	80036b2 <HAL_TIM_SlaveConfigSynchronization+0x4e>
 80036a0:	2a40      	cmp	r2, #64	; 0x40
 80036a2:	d010      	beq.n	80036c6 <HAL_TIM_SlaveConfigSynchronization+0x62>
  htim->State = HAL_TIM_STATE_READY;
 80036a4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);  
 80036a6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80036a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);  
 80036ac:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
} 
 80036b0:	bd38      	pop	{r3, r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 80036b2:	2a60      	cmp	r2, #96	; 0x60
 80036b4:	d01a      	beq.n	80036ec <HAL_TIM_SlaveConfigSynchronization+0x88>
 80036b6:	2a70      	cmp	r2, #112	; 0x70
 80036b8:	d1f4      	bne.n	80036a4 <HAL_TIM_SlaveConfigSynchronization+0x40>
      TIM_ETR_SetConfig(htim->Instance, 
 80036ba:	690b      	ldr	r3, [r1, #16]
 80036bc:	688a      	ldr	r2, [r1, #8]
 80036be:	68c9      	ldr	r1, [r1, #12]
 80036c0:	f7ff ff38 	bl	8003534 <TIM_ETR_SetConfig>
    break;
 80036c4:	e7ee      	b.n	80036a4 <HAL_TIM_SlaveConfigSynchronization+0x40>
      tmpccer = htim->Instance->CCER;
 80036c6:	6a02      	ldr	r2, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80036c8:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4);
 80036ca:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80036cc:	f023 0301 	bic.w	r3, r3, #1
 80036d0:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 80036d2:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4);
 80036d8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80036dc:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;                               
 80036de:	6202      	str	r2, [r0, #32]
    break;
 80036e0:	e7e0      	b.n	80036a4 <HAL_TIM_SlaveConfigSynchronization+0x40>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036e2:	690a      	ldr	r2, [r1, #16]
 80036e4:	6889      	ldr	r1, [r1, #8]
 80036e6:	f7ff fe3c 	bl	8003362 <TIM_TI1_ConfigInputStage>
    break;
 80036ea:	e7db      	b.n	80036a4 <HAL_TIM_SlaveConfigSynchronization+0x40>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036ec:	690a      	ldr	r2, [r1, #16]
 80036ee:	6889      	ldr	r1, [r1, #8]
 80036f0:	f7ff fe48 	bl	8003384 <TIM_TI2_ConfigInputStage>
    break;
 80036f4:	e7d6      	b.n	80036a4 <HAL_TIM_SlaveConfigSynchronization+0x40>

080036f6 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036f6:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80036f8:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036fa:	6a03      	ldr	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80036fc:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << Channel;
 80036fe:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8003700:	ea23 0304 	bic.w	r3, r3, r4
 8003704:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8003706:	6a03      	ldr	r3, [r0, #32]
 8003708:	431a      	orrs	r2, r3
 800370a:	6202      	str	r2, [r0, #32]
 800370c:	bd10      	pop	{r4, pc}
	...

08003710 <HAL_TIM_PWM_Stop>:
{ 
 8003710:	b510      	push	{r4, lr}
 8003712:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003714:	2200      	movs	r2, #0
 8003716:	6800      	ldr	r0, [r0, #0]
 8003718:	f7ff ffed 	bl	80036f6 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	4a14      	ldr	r2, [pc, #80]	; (8003770 <HAL_TIM_PWM_Stop+0x60>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d003      	beq.n	800372c <HAL_TIM_PWM_Stop+0x1c>
 8003724:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003728:	4293      	cmp	r3, r2
 800372a:	d10d      	bne.n	8003748 <HAL_TIM_PWM_Stop+0x38>
    __HAL_TIM_MOE_DISABLE(htim);
 800372c:	6a19      	ldr	r1, [r3, #32]
 800372e:	f241 1211 	movw	r2, #4369	; 0x1111
 8003732:	4211      	tst	r1, r2
 8003734:	d108      	bne.n	8003748 <HAL_TIM_PWM_Stop+0x38>
 8003736:	6a19      	ldr	r1, [r3, #32]
 8003738:	f240 4244 	movw	r2, #1092	; 0x444
 800373c:	4211      	tst	r1, r2
 800373e:	d103      	bne.n	8003748 <HAL_TIM_PWM_Stop+0x38>
 8003740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003742:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003746:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8003748:	6a19      	ldr	r1, [r3, #32]
 800374a:	f241 1211 	movw	r2, #4369	; 0x1111
 800374e:	4211      	tst	r1, r2
 8003750:	d108      	bne.n	8003764 <HAL_TIM_PWM_Stop+0x54>
 8003752:	6a19      	ldr	r1, [r3, #32]
 8003754:	f240 4244 	movw	r2, #1092	; 0x444
 8003758:	4211      	tst	r1, r2
 800375a:	d103      	bne.n	8003764 <HAL_TIM_PWM_Stop+0x54>
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	f022 0201 	bic.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003764:	2301      	movs	r3, #1
} 
 8003766:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003768:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
} 
 800376c:	bd10      	pop	{r4, pc}
 800376e:	bf00      	nop
 8003770:	40010000 	.word	0x40010000

08003774 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8003774:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003778:	2b01      	cmp	r3, #1
{
 800377a:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800377c:	d01c      	beq.n	80037b8 <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800377e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003780:	4d0e      	ldr	r5, [pc, #56]	; (80037bc <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 8003782:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003784:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8003786:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003788:	d003      	beq.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 800378a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800378e:	42aa      	cmp	r2, r5
 8003790:	d103      	bne.n	800379a <HAL_TIMEx_MasterConfigSynchronization+0x26>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003792:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003796:	684d      	ldr	r5, [r1, #4]
 8003798:	432b      	orrs	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800379a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800379c:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037a0:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 80037a2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037a6:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037a8:	4321      	orrs	r1, r4
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037aa:	6053      	str	r3, [r2, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 80037ac:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 80037ae:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80037b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 80037b4:	4618      	mov	r0, r3
 80037b6:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80037b8:	2002      	movs	r0, #2
} 
 80037ba:	bd30      	pop	{r4, r5, pc}
 80037bc:	40010000 	.word	0x40010000

080037c0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037c0:	6803      	ldr	r3, [r0, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037c8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	f022 0201 	bic.w	r2, r2, #1
 80037d0:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037d2:	2320      	movs	r3, #32
 80037d4:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 80037d8:	4770      	bx	lr

080037da <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 80037da:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80037de:	2b20      	cmp	r3, #32
 80037e0:	d11a      	bne.n	8003818 <HAL_UART_Transmit_IT+0x3e>
    if((pData == NULL ) || (Size == 0U))
 80037e2:	b1b9      	cbz	r1, 8003814 <HAL_UART_Transmit_IT+0x3a>
 80037e4:	b1b2      	cbz	r2, 8003814 <HAL_UART_Transmit_IT+0x3a>
    __HAL_LOCK(huart);
 80037e6:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d014      	beq.n	8003818 <HAL_UART_Transmit_IT+0x3e>
    huart->TxXferCount = Size;
 80037ee:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f2:	2300      	movs	r3, #0
    huart->pTxBuffPtr = pData;
 80037f4:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 80037f6:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037fa:	2221      	movs	r2, #33	; 0x21
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80037fc:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fe:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003800:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003804:	680a      	ldr	r2, [r1, #0]
    __HAL_UNLOCK(huart);
 8003806:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    return HAL_OK;
 800380a:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800380c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003810:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8003812:	4770      	bx	lr
      return HAL_ERROR;
 8003814:	2001      	movs	r0, #1
 8003816:	4770      	bx	lr
    return HAL_BUSY;
 8003818:	2002      	movs	r0, #2
}
 800381a:	4770      	bx	lr

0800381c <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 800381c:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8003820:	2b20      	cmp	r3, #32
 8003822:	d13d      	bne.n	80038a0 <HAL_UART_Receive_IT+0x84>
    if((pData == NULL ) || (Size == 0U))
 8003824:	2900      	cmp	r1, #0
 8003826:	d039      	beq.n	800389c <HAL_UART_Receive_IT+0x80>
 8003828:	2a00      	cmp	r2, #0
 800382a:	d037      	beq.n	800389c <HAL_UART_Receive_IT+0x80>
    __HAL_LOCK(huart);
 800382c:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003830:	2b01      	cmp	r3, #1
 8003832:	d035      	beq.n	80038a0 <HAL_UART_Receive_IT+0x84>
 8003834:	2301      	movs	r3, #1
    huart->pRxBuffPtr = pData;
 8003836:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8003838:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    __HAL_LOCK(huart);
 800383c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 8003840:	6883      	ldr	r3, [r0, #8]
    huart->RxXferCount = Size;
 8003842:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8003846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800384a:	d119      	bne.n	8003880 <HAL_UART_Receive_IT+0x64>
 800384c:	6903      	ldr	r3, [r0, #16]
 800384e:	b9ab      	cbnz	r3, 800387c <HAL_UART_Receive_IT+0x60>
 8003850:	f240 13ff 	movw	r3, #511	; 0x1ff
 8003854:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003858:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800385a:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800385c:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800385e:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003862:	6802      	ldr	r2, [r0, #0]
    __HAL_UNLOCK(huart);
 8003864:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    return HAL_OK;
 8003868:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386a:	6891      	ldr	r1, [r2, #8]
 800386c:	f041 0101 	orr.w	r1, r1, #1
 8003870:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003872:	6811      	ldr	r1, [r2, #0]
 8003874:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 8003878:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 800387a:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 800387c:	23ff      	movs	r3, #255	; 0xff
 800387e:	e7e9      	b.n	8003854 <HAL_UART_Receive_IT+0x38>
 8003880:	b923      	cbnz	r3, 800388c <HAL_UART_Receive_IT+0x70>
 8003882:	6903      	ldr	r3, [r0, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0f9      	beq.n	800387c <HAL_UART_Receive_IT+0x60>
 8003888:	237f      	movs	r3, #127	; 0x7f
 800388a:	e7e3      	b.n	8003854 <HAL_UART_Receive_IT+0x38>
 800388c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003890:	d1e2      	bne.n	8003858 <HAL_UART_Receive_IT+0x3c>
 8003892:	6903      	ldr	r3, [r0, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0f7      	beq.n	8003888 <HAL_UART_Receive_IT+0x6c>
 8003898:	233f      	movs	r3, #63	; 0x3f
 800389a:	e7db      	b.n	8003854 <HAL_UART_Receive_IT+0x38>
      return HAL_ERROR;
 800389c:	2001      	movs	r0, #1
 800389e:	4770      	bx	lr
    return HAL_BUSY;
 80038a0:	2002      	movs	r0, #2
}
 80038a2:	4770      	bx	lr

080038a4 <UART_WaitOnFlagUntilTimeout>:
{
 80038a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038a8:	9d06      	ldr	r5, [sp, #24]
 80038aa:	4604      	mov	r4, r0
 80038ac:	460f      	mov	r7, r1
 80038ae:	4616      	mov	r6, r2
 80038b0:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038b2:	6821      	ldr	r1, [r4, #0]
 80038b4:	69ca      	ldr	r2, [r1, #28]
 80038b6:	ea37 0302 	bics.w	r3, r7, r2
 80038ba:	bf0c      	ite	eq
 80038bc:	2201      	moveq	r2, #1
 80038be:	2200      	movne	r2, #0
 80038c0:	42b2      	cmp	r2, r6
 80038c2:	d002      	beq.n	80038ca <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80038c4:	2000      	movs	r0, #0
}
 80038c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80038ca:	1c6b      	adds	r3, r5, #1
 80038cc:	d0f2      	beq.n	80038b4 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80038ce:	b99d      	cbnz	r5, 80038f8 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038d0:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80038d2:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038da:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	f022 0201 	bic.w	r2, r2, #1
 80038e2:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80038e4:	2320      	movs	r3, #32
 80038e6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80038ea:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80038ee:	2300      	movs	r3, #0
 80038f0:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80038f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80038f8:	f7fd f8d0 	bl	8000a9c <HAL_GetTick>
 80038fc:	eba0 0008 	sub.w	r0, r0, r8
 8003900:	4285      	cmp	r5, r0
 8003902:	d8d6      	bhi.n	80038b2 <UART_WaitOnFlagUntilTimeout+0xe>
 8003904:	e7e4      	b.n	80038d0 <UART_WaitOnFlagUntilTimeout+0x2c>

08003906 <HAL_UART_Transmit>:
{
 8003906:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800390a:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800390c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 8003910:	4604      	mov	r4, r0
 8003912:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_READY)
 8003914:	2b20      	cmp	r3, #32
{
 8003916:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8003918:	d14c      	bne.n	80039b4 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 800391a:	2900      	cmp	r1, #0
 800391c:	d048      	beq.n	80039b0 <HAL_UART_Transmit+0xaa>
 800391e:	2a00      	cmp	r2, #0
 8003920:	d046      	beq.n	80039b0 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8003922:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003926:	2b01      	cmp	r3, #1
 8003928:	d044      	beq.n	80039b4 <HAL_UART_Transmit+0xae>
 800392a:	2301      	movs	r3, #1
 800392c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003930:	2300      	movs	r3, #0
 8003932:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003934:	2321      	movs	r3, #33	; 0x21
 8003936:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 800393a:	f7fd f8af 	bl	8000a9c <HAL_GetTick>
 800393e:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8003940:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8003944:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8003948:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800394c:	b292      	uxth	r2, r2
 800394e:	b962      	cbnz	r2, 800396a <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003950:	9700      	str	r7, [sp, #0]
 8003952:	4633      	mov	r3, r6
 8003954:	2140      	movs	r1, #64	; 0x40
 8003956:	4620      	mov	r0, r4
 8003958:	f7ff ffa4 	bl	80038a4 <UART_WaitOnFlagUntilTimeout>
 800395c:	b998      	cbnz	r0, 8003986 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 800395e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8003960:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8003964:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    return HAL_OK;
 8003968:	e00e      	b.n	8003988 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 800396a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800396e:	2200      	movs	r2, #0
 8003970:	9700      	str	r7, [sp, #0]
 8003972:	2180      	movs	r1, #128	; 0x80
      huart->TxXferCount--;
 8003974:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003976:	4620      	mov	r0, r4
      huart->TxXferCount--;
 8003978:	b29b      	uxth	r3, r3
 800397a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800397e:	4633      	mov	r3, r6
 8003980:	f7ff ff90 	bl	80038a4 <UART_WaitOnFlagUntilTimeout>
 8003984:	b118      	cbz	r0, 800398e <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8003986:	2003      	movs	r0, #3
}
 8003988:	b002      	add	sp, #8
 800398a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800398e:	68a3      	ldr	r3, [r4, #8]
 8003990:	6822      	ldr	r2, [r4, #0]
 8003992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003996:	d107      	bne.n	80039a8 <HAL_UART_Transmit+0xa2>
 8003998:	6923      	ldr	r3, [r4, #16]
 800399a:	b92b      	cbnz	r3, 80039a8 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800399c:	f835 3b02 	ldrh.w	r3, [r5], #2
 80039a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a4:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 80039a6:	e7cf      	b.n	8003948 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80039a8:	782b      	ldrb	r3, [r5, #0]
 80039aa:	3501      	adds	r5, #1
 80039ac:	6293      	str	r3, [r2, #40]	; 0x28
 80039ae:	e7cb      	b.n	8003948 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80039b0:	2001      	movs	r0, #1
 80039b2:	e7e9      	b.n	8003988 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 80039b4:	2002      	movs	r0, #2
 80039b6:	e7e7      	b.n	8003988 <HAL_UART_Transmit+0x82>

080039b8 <HAL_UART_Receive>:
{
 80039b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80039bc:	4698      	mov	r8, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 80039be:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
{
 80039c2:	4604      	mov	r4, r0
 80039c4:	460d      	mov	r5, r1
  if(huart->RxState == HAL_UART_STATE_READY)
 80039c6:	2b20      	cmp	r3, #32
{
 80039c8:	4616      	mov	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 80039ca:	d161      	bne.n	8003a90 <HAL_UART_Receive+0xd8>
    if((pData == NULL ) || (Size == 0U))
 80039cc:	2900      	cmp	r1, #0
 80039ce:	d05d      	beq.n	8003a8c <HAL_UART_Receive+0xd4>
 80039d0:	2a00      	cmp	r2, #0
 80039d2:	d05b      	beq.n	8003a8c <HAL_UART_Receive+0xd4>
    __HAL_LOCK(huart);
 80039d4:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d059      	beq.n	8003a90 <HAL_UART_Receive+0xd8>
 80039dc:	2301      	movs	r3, #1
 80039de:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e2:	2300      	movs	r3, #0
 80039e4:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039e6:	2322      	movs	r3, #34	; 0x22
 80039e8:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    tickstart = HAL_GetTick();
 80039ec:	f7fd f856 	bl	8000a9c <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 80039f0:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80039f2:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 80039f4:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 80039f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 80039fc:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8003a00:	d115      	bne.n	8003a2e <HAL_UART_Receive+0x76>
 8003a02:	6923      	ldr	r3, [r4, #16]
 8003a04:	b98b      	cbnz	r3, 8003a2a <HAL_UART_Receive+0x72>
 8003a06:	f240 13ff 	movw	r3, #511	; 0x1ff
 8003a0a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8003a0e:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 8003a12:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8003a16:	b280      	uxth	r0, r0
 8003a18:	b9b8      	cbnz	r0, 8003a4a <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 8003a1a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8003a1c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->RxState = HAL_UART_STATE_READY;
 8003a20:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 8003a24:	b002      	add	sp, #8
 8003a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8003a2a:	23ff      	movs	r3, #255	; 0xff
 8003a2c:	e7ed      	b.n	8003a0a <HAL_UART_Receive+0x52>
 8003a2e:	b923      	cbnz	r3, 8003a3a <HAL_UART_Receive+0x82>
 8003a30:	6923      	ldr	r3, [r4, #16]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f9      	beq.n	8003a2a <HAL_UART_Receive+0x72>
 8003a36:	237f      	movs	r3, #127	; 0x7f
 8003a38:	e7e7      	b.n	8003a0a <HAL_UART_Receive+0x52>
 8003a3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a3e:	d1e6      	bne.n	8003a0e <HAL_UART_Receive+0x56>
 8003a40:	6923      	ldr	r3, [r4, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f7      	beq.n	8003a36 <HAL_UART_Receive+0x7e>
 8003a46:	233f      	movs	r3, #63	; 0x3f
 8003a48:	e7df      	b.n	8003a0a <HAL_UART_Receive+0x52>
      huart->RxXferCount--;
 8003a4a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f8cd 8000 	str.w	r8, [sp]
 8003a54:	2120      	movs	r1, #32
      huart->RxXferCount--;
 8003a56:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a58:	4620      	mov	r0, r4
      huart->RxXferCount--;
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a60:	463b      	mov	r3, r7
 8003a62:	f7ff ff1f 	bl	80038a4 <UART_WaitOnFlagUntilTimeout>
 8003a66:	b9a8      	cbnz	r0, 8003a94 <HAL_UART_Receive+0xdc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a68:	68a3      	ldr	r3, [r4, #8]
 8003a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	d106      	bne.n	8003a80 <HAL_UART_Receive+0xc8>
 8003a72:	6922      	ldr	r2, [r4, #16]
 8003a74:	b922      	cbnz	r2, 8003a80 <HAL_UART_Receive+0xc8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	4033      	ands	r3, r6
 8003a7a:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8003a7e:	e7c8      	b.n	8003a12 <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	3501      	adds	r5, #1
 8003a84:	4033      	ands	r3, r6
 8003a86:	f805 3c01 	strb.w	r3, [r5, #-1]
 8003a8a:	e7c2      	b.n	8003a12 <HAL_UART_Receive+0x5a>
      return  HAL_ERROR;
 8003a8c:	2001      	movs	r0, #1
 8003a8e:	e7c9      	b.n	8003a24 <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 8003a90:	2002      	movs	r0, #2
 8003a92:	e7c7      	b.n	8003a24 <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 8003a94:	2003      	movs	r0, #3
 8003a96:	e7c5      	b.n	8003a24 <HAL_UART_Receive+0x6c>

08003a98 <HAL_UART_TxCpltCallback>:
 8003a98:	4770      	bx	lr

08003a9a <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a9a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8003a9e:	6802      	ldr	r2, [r0, #0]
 8003aa0:	2b22      	cmp	r3, #34	; 0x22
{
 8003aa2:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003aa4:	d12a      	bne.n	8003afc <UART_Receive_IT+0x62>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa6:	6883      	ldr	r3, [r0, #8]
  uint16_t uhMask = huart->Mask;
 8003aa8:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003ab2:	d11d      	bne.n	8003af0 <UART_Receive_IT+0x56>
 8003ab4:	6904      	ldr	r4, [r0, #16]
 8003ab6:	b9dc      	cbnz	r4, 8003af0 <UART_Receive_IT+0x56>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8003ab8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003aba:	4011      	ands	r1, r2
 8003abc:	f823 1b02 	strh.w	r1, [r3], #2
      huart->pRxBuffPtr +=2;
 8003ac0:	6543      	str	r3, [r0, #84]	; 0x54
    if(--huart->RxXferCount == 0)
 8003ac2:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8003ac6:	3c01      	subs	r4, #1
 8003ac8:	b2a4      	uxth	r4, r4
 8003aca:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 8003ace:	b96c      	cbnz	r4, 8003aec <UART_Receive_IT+0x52>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ad0:	6803      	ldr	r3, [r0, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ad8:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	f022 0201 	bic.w	r2, r2, #1
 8003ae0:	609a      	str	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8003ae2:	2320      	movs	r3, #32
 8003ae4:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8003ae8:	f005 fa84 	bl	8008ff4 <HAL_UART_RxCpltCallback>
    return HAL_OK;
 8003aec:	2000      	movs	r0, #0
}
 8003aee:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003af0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003af2:	1c5c      	adds	r4, r3, #1
 8003af4:	4011      	ands	r1, r2
 8003af6:	6544      	str	r4, [r0, #84]	; 0x54
 8003af8:	7019      	strb	r1, [r3, #0]
 8003afa:	e7e2      	b.n	8003ac2 <UART_Receive_IT+0x28>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003afc:	6993      	ldr	r3, [r2, #24]
    return HAL_BUSY;
 8003afe:	2002      	movs	r0, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b00:	f043 0308 	orr.w	r3, r3, #8
 8003b04:	6193      	str	r3, [r2, #24]
    return HAL_BUSY;
 8003b06:	bd10      	pop	{r4, pc}

08003b08 <HAL_UART_ErrorCallback>:
{
 8003b08:	4770      	bx	lr
	...

08003b0c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b0c:	6803      	ldr	r3, [r0, #0]
 8003b0e:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b10:	6819      	ldr	r1, [r3, #0]
{
 8003b12:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8003b14:	0716      	lsls	r6, r2, #28
{
 8003b16:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b18:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 8003b1a:	d107      	bne.n	8003b2c <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b1c:	0695      	lsls	r5, r2, #26
 8003b1e:	d563      	bpl.n	8003be8 <HAL_UART_IRQHandler+0xdc>
 8003b20:	068e      	lsls	r6, r1, #26
 8003b22:	d561      	bpl.n	8003be8 <HAL_UART_IRQHandler+0xdc>
}
 8003b24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8003b28:	f7ff bfb7 	b.w	8003a9a <UART_Receive_IT>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003b2c:	f015 0001 	ands.w	r0, r5, #1
 8003b30:	d102      	bne.n	8003b38 <HAL_UART_IRQHandler+0x2c>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8003b32:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003b36:	d057      	beq.n	8003be8 <HAL_UART_IRQHandler+0xdc>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b38:	07d5      	lsls	r5, r2, #31
 8003b3a:	d507      	bpl.n	8003b4c <HAL_UART_IRQHandler+0x40>
 8003b3c:	05ce      	lsls	r6, r1, #23
 8003b3e:	d505      	bpl.n	8003b4c <HAL_UART_IRQHandler+0x40>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003b40:	2501      	movs	r5, #1
 8003b42:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b44:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8003b46:	f045 0501 	orr.w	r5, r5, #1
 8003b4a:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b4c:	0795      	lsls	r5, r2, #30
 8003b4e:	d506      	bpl.n	8003b5e <HAL_UART_IRQHandler+0x52>
 8003b50:	b128      	cbz	r0, 8003b5e <HAL_UART_IRQHandler+0x52>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8003b52:	2502      	movs	r5, #2
 8003b54:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b56:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8003b58:	f045 0504 	orr.w	r5, r5, #4
 8003b5c:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b5e:	0756      	lsls	r6, r2, #29
 8003b60:	d506      	bpl.n	8003b70 <HAL_UART_IRQHandler+0x64>
 8003b62:	b128      	cbz	r0, 8003b70 <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8003b64:	2504      	movs	r5, #4
 8003b66:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b68:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8003b6a:	f045 0502 	orr.w	r5, r5, #2
 8003b6e:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003b70:	0715      	lsls	r5, r2, #28
 8003b72:	d507      	bpl.n	8003b84 <HAL_UART_IRQHandler+0x78>
 8003b74:	068e      	lsls	r6, r1, #26
 8003b76:	d400      	bmi.n	8003b7a <HAL_UART_IRQHandler+0x6e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b78:	b120      	cbz	r0, 8003b84 <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003b7a:	2008      	movs	r0, #8
 8003b7c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b7e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003b80:	4303      	orrs	r3, r0
 8003b82:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b84:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d06a      	beq.n	8003c60 <HAL_UART_IRQHandler+0x154>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b8a:	0695      	lsls	r5, r2, #26
 8003b8c:	d504      	bpl.n	8003b98 <HAL_UART_IRQHandler+0x8c>
 8003b8e:	0688      	lsls	r0, r1, #26
 8003b90:	d502      	bpl.n	8003b98 <HAL_UART_IRQHandler+0x8c>
        UART_Receive_IT(huart);
 8003b92:	4620      	mov	r0, r4
 8003b94:	f7ff ff81 	bl	8003a9a <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003b98:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 8003b9a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003b9c:	0719      	lsls	r1, r3, #28
 8003b9e:	d404      	bmi.n	8003baa <HAL_UART_IRQHandler+0x9e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003ba0:	6823      	ldr	r3, [r4, #0]
 8003ba2:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003ba4:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8003ba8:	d01a      	beq.n	8003be0 <HAL_UART_IRQHandler+0xd4>
        UART_EndRxTransfer(huart);
 8003baa:	f7ff fe09 	bl	80037c0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	0652      	lsls	r2, r2, #25
 8003bb4:	d510      	bpl.n	8003bd8 <HAL_UART_IRQHandler+0xcc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb6:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003bb8:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bbe:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003bc0:	b150      	cbz	r0, 8003bd8 <HAL_UART_IRQHandler+0xcc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bc2:	4b28      	ldr	r3, [pc, #160]	; (8003c64 <HAL_UART_IRQHandler+0x158>)
 8003bc4:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bc6:	f7fd fc27 	bl	8001418 <HAL_DMA_Abort_IT>
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	d048      	beq.n	8003c60 <HAL_UART_IRQHandler+0x154>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bce:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 8003bd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bd4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003bd6:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003bd8:	4620      	mov	r0, r4
 8003bda:	f7ff ff95 	bl	8003b08 <HAL_UART_ErrorCallback>
 8003bde:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8003be0:	f7ff ff92 	bl	8003b08 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be4:	66e5      	str	r5, [r4, #108]	; 0x6c
 8003be6:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003be8:	0616      	lsls	r6, r2, #24
 8003bea:	d52b      	bpl.n	8003c44 <HAL_UART_IRQHandler+0x138>
 8003bec:	060d      	lsls	r5, r1, #24
 8003bee:	d529      	bpl.n	8003c44 <HAL_UART_IRQHandler+0x138>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bf0:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8003bf4:	2a21      	cmp	r2, #33	; 0x21
 8003bf6:	d133      	bne.n	8003c60 <HAL_UART_IRQHandler+0x154>
    if(huart->TxXferCount == 0U)
 8003bf8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8003bfc:	b292      	uxth	r2, r2
 8003bfe:	b942      	cbnz	r2, 8003c12 <HAL_UART_IRQHandler+0x106>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c06:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	bd70      	pop	{r4, r5, r6, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c12:	68a2      	ldr	r2, [r4, #8]
 8003c14:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003c18:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003c1a:	d10e      	bne.n	8003c3a <HAL_UART_IRQHandler+0x12e>
 8003c1c:	6921      	ldr	r1, [r4, #16]
 8003c1e:	b961      	cbnz	r1, 8003c3a <HAL_UART_IRQHandler+0x12e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003c20:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003c24:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003c28:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003c2a:	64e2      	str	r2, [r4, #76]	; 0x4c
      huart->TxXferCount--;
 8003c2c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8003c38:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8003c3a:	1c51      	adds	r1, r2, #1
 8003c3c:	64e1      	str	r1, [r4, #76]	; 0x4c
 8003c3e:	7812      	ldrb	r2, [r2, #0]
 8003c40:	629a      	str	r2, [r3, #40]	; 0x28
 8003c42:	e7f3      	b.n	8003c2c <HAL_UART_IRQHandler+0x120>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c44:	0650      	lsls	r0, r2, #25
 8003c46:	d50b      	bpl.n	8003c60 <HAL_UART_IRQHandler+0x154>
 8003c48:	064a      	lsls	r2, r1, #25
 8003c4a:	d509      	bpl.n	8003c60 <HAL_UART_IRQHandler+0x154>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c4c:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 8003c4e:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c54:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003c56:	2320      	movs	r3, #32
 8003c58:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 8003c5c:	f7ff ff1c 	bl	8003a98 <HAL_UART_TxCpltCallback>
 8003c60:	bd70      	pop	{r4, r5, r6, pc}
 8003c62:	bf00      	nop
 8003c64:	08003c69 	.word	0x08003c69

08003c68 <UART_DMAAbortOnError>:
{
 8003c68:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003c6a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003c72:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8003c76:	f7ff ff47 	bl	8003b08 <HAL_UART_ErrorCallback>
 8003c7a:	bd08      	pop	{r3, pc}

08003c7c <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c7c:	b538      	push	{r3, r4, r5, lr}
 8003c7e:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003c80:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c82:	69c3      	ldr	r3, [r0, #28]
 8003c84:	6921      	ldr	r1, [r4, #16]
 8003c86:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003c88:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	6961      	ldr	r1, [r4, #20]
 8003c8e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003c90:	4993      	ldr	r1, [pc, #588]	; (8003ee0 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c92:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003c94:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003c96:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003c98:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c9a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003c9c:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c9e:	686a      	ldr	r2, [r5, #4]
 8003ca0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003ca8:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003caa:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003cac:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003cae:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cb6:	4a8b      	ldr	r2, [pc, #556]	; (8003ee4 <UART_SetConfig+0x268>)
 8003cb8:	4295      	cmp	r5, r2
 8003cba:	d119      	bne.n	8003cf0 <UART_SetConfig+0x74>
 8003cbc:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003cc0:	4989      	ldr	r1, [pc, #548]	; (8003ee8 <UART_SetConfig+0x26c>)
 8003cc2:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003cc6:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cce:	5c8a      	ldrb	r2, [r1, r2]
 8003cd0:	f040 80b3 	bne.w	8003e3a <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 8003cd4:	2a08      	cmp	r2, #8
 8003cd6:	f200 80ad 	bhi.w	8003e34 <UART_SetConfig+0x1b8>
 8003cda:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003cde:	0026      	.short	0x0026
 8003ce0:	00e9007b 	.word	0x00e9007b
 8003ce4:	00f500ab 	.word	0x00f500ab
 8003ce8:	00ab00ab 	.word	0x00ab00ab
 8003cec:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cf0:	4a7e      	ldr	r2, [pc, #504]	; (8003eec <UART_SetConfig+0x270>)
 8003cf2:	4295      	cmp	r5, r2
 8003cf4:	d107      	bne.n	8003d06 <UART_SetConfig+0x8a>
 8003cf6:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8003cfa:	497d      	ldr	r1, [pc, #500]	; (8003ef0 <UART_SetConfig+0x274>)
 8003cfc:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003d00:	f002 020c 	and.w	r2, r2, #12
 8003d04:	e7e1      	b.n	8003cca <UART_SetConfig+0x4e>
 8003d06:	4a7b      	ldr	r2, [pc, #492]	; (8003ef4 <UART_SetConfig+0x278>)
 8003d08:	4295      	cmp	r5, r2
 8003d0a:	d12b      	bne.n	8003d64 <UART_SetConfig+0xe8>
 8003d0c:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8003d10:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003d14:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8003d18:	2a10      	cmp	r2, #16
 8003d1a:	f000 80d2 	beq.w	8003ec2 <UART_SetConfig+0x246>
 8003d1e:	d816      	bhi.n	8003d4e <UART_SetConfig+0xd2>
 8003d20:	b9da      	cbnz	r2, 8003d5a <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d26:	f040 809f 	bne.w	8003e68 <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003d2a:	f7fe fdcb 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003d2e:	6861      	ldr	r1, [r4, #4]
 8003d30:	084a      	lsrs	r2, r1, #1
 8003d32:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8003d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d3a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d3c:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003d3e:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d42:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8003d46:	6821      	ldr	r1, [r4, #0]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60cb      	str	r3, [r1, #12]
 8003d4c:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d4e:	2a20      	cmp	r2, #32
 8003d50:	f000 80ab 	beq.w	8003eaa <UART_SetConfig+0x22e>
 8003d54:	2a30      	cmp	r2, #48	; 0x30
 8003d56:	f000 80ba 	beq.w	8003ece <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d5e:	d069      	beq.n	8003e34 <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8003d60:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8003d62:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d64:	4a64      	ldr	r2, [pc, #400]	; (8003ef8 <UART_SetConfig+0x27c>)
 8003d66:	4295      	cmp	r5, r2
 8003d68:	d10e      	bne.n	8003d88 <UART_SetConfig+0x10c>
 8003d6a:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8003d6e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003d72:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8003d76:	2a40      	cmp	r2, #64	; 0x40
 8003d78:	f000 80a3 	beq.w	8003ec2 <UART_SetConfig+0x246>
 8003d7c:	d9d0      	bls.n	8003d20 <UART_SetConfig+0xa4>
 8003d7e:	2a80      	cmp	r2, #128	; 0x80
 8003d80:	f000 8093 	beq.w	8003eaa <UART_SetConfig+0x22e>
 8003d84:	2ac0      	cmp	r2, #192	; 0xc0
 8003d86:	e7e6      	b.n	8003d56 <UART_SetConfig+0xda>
 8003d88:	4a5c      	ldr	r2, [pc, #368]	; (8003efc <UART_SetConfig+0x280>)
 8003d8a:	4295      	cmp	r5, r2
 8003d8c:	d110      	bne.n	8003db0 <UART_SetConfig+0x134>
 8003d8e:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8003d92:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003d96:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003d9a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003d9e:	f000 8090 	beq.w	8003ec2 <UART_SetConfig+0x246>
 8003da2:	d9bd      	bls.n	8003d20 <UART_SetConfig+0xa4>
 8003da4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003da8:	d07f      	beq.n	8003eaa <UART_SetConfig+0x22e>
 8003daa:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003dae:	e7d2      	b.n	8003d56 <UART_SetConfig+0xda>
 8003db0:	4a53      	ldr	r2, [pc, #332]	; (8003f00 <UART_SetConfig+0x284>)
 8003db2:	4295      	cmp	r5, r2
 8003db4:	d117      	bne.n	8003de6 <UART_SetConfig+0x16a>
 8003db6:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8003dba:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003dbe:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8003dc2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003dc6:	d07c      	beq.n	8003ec2 <UART_SetConfig+0x246>
 8003dc8:	d807      	bhi.n	8003dda <UART_SetConfig+0x15e>
 8003dca:	2a00      	cmp	r2, #0
 8003dcc:	d1c5      	bne.n	8003d5a <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd2:	d154      	bne.n	8003e7e <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003dd4:	f7fe fd8e 	bl	80028f4 <HAL_RCC_GetPCLK2Freq>
 8003dd8:	e7a9      	b.n	8003d2e <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dda:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003dde:	d064      	beq.n	8003eaa <UART_SetConfig+0x22e>
 8003de0:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8003de4:	e7b7      	b.n	8003d56 <UART_SetConfig+0xda>
 8003de6:	4a47      	ldr	r2, [pc, #284]	; (8003f04 <UART_SetConfig+0x288>)
 8003de8:	4295      	cmp	r5, r2
 8003dea:	d10f      	bne.n	8003e0c <UART_SetConfig+0x190>
 8003dec:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8003df0:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003df4:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8003df8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003dfc:	d061      	beq.n	8003ec2 <UART_SetConfig+0x246>
 8003dfe:	d98f      	bls.n	8003d20 <UART_SetConfig+0xa4>
 8003e00:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003e04:	d051      	beq.n	8003eaa <UART_SetConfig+0x22e>
 8003e06:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8003e0a:	e7a4      	b.n	8003d56 <UART_SetConfig+0xda>
 8003e0c:	4a3e      	ldr	r2, [pc, #248]	; (8003f08 <UART_SetConfig+0x28c>)
 8003e0e:	4295      	cmp	r5, r2
 8003e10:	d1a3      	bne.n	8003d5a <UART_SetConfig+0xde>
 8003e12:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 8003e16:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003e1a:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8003e1e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003e22:	d04e      	beq.n	8003ec2 <UART_SetConfig+0x246>
 8003e24:	f67f af7c 	bls.w	8003d20 <UART_SetConfig+0xa4>
 8003e28:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003e2c:	d03d      	beq.n	8003eaa <UART_SetConfig+0x22e>
 8003e2e:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8003e32:	e790      	b.n	8003d56 <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 8003e34:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	e781      	b.n	8003d3e <UART_SetConfig+0xc2>
    switch (clocksource)
 8003e3a:	2a08      	cmp	r2, #8
 8003e3c:	d890      	bhi.n	8003d60 <UART_SetConfig+0xe4>
 8003e3e:	a301      	add	r3, pc, #4	; (adr r3, 8003e44 <UART_SetConfig+0x1c8>)
 8003e40:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8003e44:	08003e69 	.word	0x08003e69
 8003e48:	08003e7f 	.word	0x08003e7f
 8003e4c:	08003e85 	.word	0x08003e85
 8003e50:	08003d61 	.word	0x08003d61
 8003e54:	08003e9b 	.word	0x08003e9b
 8003e58:	08003d61 	.word	0x08003d61
 8003e5c:	08003d61 	.word	0x08003d61
 8003e60:	08003d61 	.word	0x08003d61
 8003e64:	08003ea1 	.word	0x08003ea1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003e68:	f7fe fd2c 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003e6c:	6863      	ldr	r3, [r4, #4]
 8003e6e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003e72:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e76:	b280      	uxth	r0, r0
 8003e78:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e7a:	2000      	movs	r0, #0
      break;
 8003e7c:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003e7e:	f7fe fd39 	bl	80028f4 <HAL_RCC_GetPCLK2Freq>
 8003e82:	e7f3      	b.n	8003e6c <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003e84:	6862      	ldr	r2, [r4, #4]
 8003e86:	0853      	lsrs	r3, r2, #1
 8003e88:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003e8c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003e90:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	60eb      	str	r3, [r5, #12]
 8003e98:	e7ef      	b.n	8003e7a <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003e9a:	f7fe fc27 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 8003e9e:	e7e5      	b.n	8003e6c <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003ea0:	6862      	ldr	r2, [r4, #4]
 8003ea2:	0853      	lsrs	r3, r2, #1
 8003ea4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003ea8:	e7f2      	b.n	8003e90 <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eae:	d1e9      	bne.n	8003e84 <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003eb0:	6860      	ldr	r0, [r4, #4]
 8003eb2:	0843      	lsrs	r3, r0, #1
 8003eb4:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003eb8:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003ebc:	fbb3 f3f0 	udiv	r3, r3, r0
 8003ec0:	e73b      	b.n	8003d3a <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec6:	d1e8      	bne.n	8003e9a <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003ec8:	f7fe fc10 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 8003ecc:	e72f      	b.n	8003d2e <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed2:	d1e5      	bne.n	8003ea0 <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003ed4:	6860      	ldr	r0, [r4, #4]
 8003ed6:	0843      	lsrs	r3, r0, #1
 8003ed8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003edc:	e7ee      	b.n	8003ebc <UART_SetConfig+0x240>
 8003ede:	bf00      	nop
 8003ee0:	efff69f3 	.word	0xefff69f3
 8003ee4:	40011000 	.word	0x40011000
 8003ee8:	0800b87e 	.word	0x0800b87e
 8003eec:	40004400 	.word	0x40004400
 8003ef0:	0800b882 	.word	0x0800b882
 8003ef4:	40004800 	.word	0x40004800
 8003ef8:	40004c00 	.word	0x40004c00
 8003efc:	40005000 	.word	0x40005000
 8003f00:	40011400 	.word	0x40011400
 8003f04:	40007800 	.word	0x40007800
 8003f08:	40007c00 	.word	0x40007c00

08003f0c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f0e:	07da      	lsls	r2, r3, #31
{
 8003f10:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f12:	d506      	bpl.n	8003f22 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f14:	6801      	ldr	r1, [r0, #0]
 8003f16:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003f18:	684a      	ldr	r2, [r1, #4]
 8003f1a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003f1e:	4322      	orrs	r2, r4
 8003f20:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f22:	079c      	lsls	r4, r3, #30
 8003f24:	d506      	bpl.n	8003f34 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f26:	6801      	ldr	r1, [r0, #0]
 8003f28:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003f2a:	684a      	ldr	r2, [r1, #4]
 8003f2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003f30:	4322      	orrs	r2, r4
 8003f32:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f34:	0759      	lsls	r1, r3, #29
 8003f36:	d506      	bpl.n	8003f46 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f38:	6801      	ldr	r1, [r0, #0]
 8003f3a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003f3c:	684a      	ldr	r2, [r1, #4]
 8003f3e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f42:	4322      	orrs	r2, r4
 8003f44:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f46:	071a      	lsls	r2, r3, #28
 8003f48:	d506      	bpl.n	8003f58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f4a:	6801      	ldr	r1, [r0, #0]
 8003f4c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003f4e:	684a      	ldr	r2, [r1, #4]
 8003f50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f54:	4322      	orrs	r2, r4
 8003f56:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f58:	06dc      	lsls	r4, r3, #27
 8003f5a:	d506      	bpl.n	8003f6a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f5c:	6801      	ldr	r1, [r0, #0]
 8003f5e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003f60:	688a      	ldr	r2, [r1, #8]
 8003f62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f66:	4322      	orrs	r2, r4
 8003f68:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f6a:	0699      	lsls	r1, r3, #26
 8003f6c:	d506      	bpl.n	8003f7c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f6e:	6801      	ldr	r1, [r0, #0]
 8003f70:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003f72:	688a      	ldr	r2, [r1, #8]
 8003f74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f78:	4322      	orrs	r2, r4
 8003f7a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f7c:	065a      	lsls	r2, r3, #25
 8003f7e:	d510      	bpl.n	8003fa2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f80:	6801      	ldr	r1, [r0, #0]
 8003f82:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003f84:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f86:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f8a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003f8e:	ea42 0204 	orr.w	r2, r2, r4
 8003f92:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f94:	d105      	bne.n	8003fa2 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f96:	684a      	ldr	r2, [r1, #4]
 8003f98:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003f9a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003f9e:	4322      	orrs	r2, r4
 8003fa0:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fa2:	061b      	lsls	r3, r3, #24
 8003fa4:	d506      	bpl.n	8003fb4 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fa6:	6802      	ldr	r2, [r0, #0]
 8003fa8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003faa:	6853      	ldr	r3, [r2, #4]
 8003fac:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	6053      	str	r3, [r2, #4]
 8003fb4:	bd10      	pop	{r4, pc}

08003fb6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb8:	2500      	movs	r5, #0
{
 8003fba:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fbc:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003fbe:	f7fc fd6d 	bl	8000a9c <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fc2:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8003fc4:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	0712      	lsls	r2, r2, #28
 8003fca:	d409      	bmi.n	8003fe0 <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8003fcc:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fce:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8003fd0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8003fd4:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 8003fd8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 8003fdc:	b003      	add	sp, #12
 8003fde:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fe0:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003fe4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fe8:	4620      	mov	r0, r4
 8003fea:	9200      	str	r2, [sp, #0]
 8003fec:	462a      	mov	r2, r5
 8003fee:	f7ff fc59 	bl	80038a4 <UART_WaitOnFlagUntilTimeout>
 8003ff2:	2800      	cmp	r0, #0
 8003ff4:	d0ea      	beq.n	8003fcc <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8003ff6:	2003      	movs	r0, #3
 8003ff8:	e7f0      	b.n	8003fdc <UART_CheckIdleState+0x26>

08003ffa <HAL_UART_Init>:
{
 8003ffa:	b510      	push	{r4, lr}
  if(huart == NULL)
 8003ffc:	4604      	mov	r4, r0
 8003ffe:	b360      	cbz	r0, 800405a <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8004000:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8004004:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004008:	b91b      	cbnz	r3, 8004012 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800400a:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800400e:	f006 f88d 	bl	800a12c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004012:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004014:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004016:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8004018:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800401c:	6813      	ldr	r3, [r2, #0]
 800401e:	f023 0301 	bic.w	r3, r3, #1
 8004022:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004024:	f7ff fe2a 	bl	8003c7c <UART_SetConfig>
 8004028:	2801      	cmp	r0, #1
 800402a:	d016      	beq.n	800405a <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800402c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800402e:	b113      	cbz	r3, 8004036 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8004030:	4620      	mov	r0, r4
 8004032:	f7ff ff6b 	bl	8003f0c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004036:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8004038:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004040:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004048:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	f042 0201 	orr.w	r2, r2, #1
}
 8004050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8004054:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004056:	f7ff bfae 	b.w	8003fb6 <UART_CheckIdleState>
}
 800405a:	2001      	movs	r0, #1
 800405c:	bd10      	pop	{r4, pc}

0800405e <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 800405e:	ba40      	rev16	r0, r0
}
 8004060:	b280      	uxth	r0, r0
 8004062:	4770      	bx	lr

08004064 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 8004064:	ba00      	rev	r0, r0
 8004066:	4770      	bx	lr

08004068 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004068:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800406a:	f000 fed7 	bl	8004e1c <mem_init>
  memp_init();
 800406e:	f000 fffd 	bl	800506c <memp_init>
  pbuf_init();
  netif_init();
 8004072:	f001 f830 	bl	80050d6 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004076:	f003 ff3b 	bl	8007ef0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800407a:	f001 facd 	bl	8005618 <tcp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 800407e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8004082:	f003 bedb 	b.w	8007e3c <sys_timeouts_init>
	...

08004088 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8004088:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800408a:	2618      	movs	r6, #24
 800408c:	4c07      	ldr	r4, [pc, #28]	; (80040ac <etharp_free_entry+0x24>)
{
 800408e:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 8004090:	4346      	muls	r6, r0
 8004092:	59a0      	ldr	r0, [r4, r6]
 8004094:	b118      	cbz	r0, 800409e <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8004096:	f001 f91f 	bl	80052d8 <pbuf_free>
    arp_table[i].q = NULL;
 800409a:	2300      	movs	r3, #0
 800409c:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800409e:	2318      	movs	r3, #24
 80040a0:	fb03 4405 	mla	r4, r3, r5, r4
 80040a4:	2300      	movs	r3, #0
 80040a6:	7523      	strb	r3, [r4, #20]
 80040a8:	bd70      	pop	{r4, r5, r6, pc}
 80040aa:	bf00      	nop
 80040ac:	20000214 	.word	0x20000214

080040b0 <etharp_find_entry.isra.0>:
 *
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 80040b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b4:	4b30      	ldr	r3, [pc, #192]	; (8004178 <etharp_find_entry.isra.0+0xc8>)
{
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 80040b6:	220a      	movs	r2, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 80040b8:	4605      	mov	r5, r0
 80040ba:	2000      	movs	r0, #0
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80040bc:	4616      	mov	r6, r2
 80040be:	4696      	mov	lr, r2
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80040c0:	4681      	mov	r9, r0
 80040c2:	4684      	mov	ip, r0
 80040c4:	4683      	mov	fp, r0
  s8_t empty = ARP_TABLE_SIZE;
 80040c6:	4614      	mov	r4, r2
 80040c8:	4698      	mov	r8, r3
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 80040ca:	9101      	str	r1, [sp, #4]
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80040cc:	2c0a      	cmp	r4, #10
    u8_t state = arp_table[i].state;
 80040ce:	7d1f      	ldrb	r7, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80040d0:	d10f      	bne.n	80040f2 <etharp_find_entry.isra.0+0x42>
 80040d2:	b987      	cbnz	r7, 80040f6 <etharp_find_entry.isra.0+0x46>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 80040d4:	b244      	sxtb	r4, r0
 80040d6:	3001      	adds	r0, #1
 80040d8:	3318      	adds	r3, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80040da:	280a      	cmp	r0, #10
 80040dc:	d1f6      	bne.n	80040cc <etharp_find_entry.isra.0+0x1c>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80040de:	9b01      	ldr	r3, [sp, #4]
 80040e0:	0799      	lsls	r1, r3, #30
 80040e2:	d403      	bmi.n	80040ec <etharp_find_entry.isra.0+0x3c>
 80040e4:	2c0a      	cmp	r4, #10
 80040e6:	d11b      	bne.n	8004120 <etharp_find_entry.isra.0+0x70>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80040e8:	07db      	lsls	r3, r3, #31
 80040ea:	d428      	bmi.n	800413e <etharp_find_entry.isra.0+0x8e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 80040ec:	f04f 30ff 	mov.w	r0, #4294967295
 80040f0:	e008      	b.n	8004104 <etharp_find_entry.isra.0+0x54>
    } else if (state != ETHARP_STATE_EMPTY) {
 80040f2:	2f00      	cmp	r7, #0
 80040f4:	d0ef      	beq.n	80040d6 <etharp_find_entry.isra.0+0x26>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80040f6:	b39d      	cbz	r5, 8004160 <etharp_find_entry.isra.0+0xb0>
 80040f8:	6829      	ldr	r1, [r5, #0]
 80040fa:	468a      	mov	sl, r1
 80040fc:	6859      	ldr	r1, [r3, #4]
 80040fe:	458a      	cmp	sl, r1
 8004100:	d12e      	bne.n	8004160 <etharp_find_entry.isra.0+0xb0>
        return i;
 8004102:	b240      	sxtb	r0, r0
  arp_table[i].ctime = 0;
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
}
 8004104:	b003      	add	sp, #12
 8004106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 800410a:	45e2      	cmp	sl, ip
 800410c:	d3e3      	bcc.n	80040d6 <etharp_find_entry.isra.0+0x26>
            old_pending = i;
 800410e:	b246      	sxtb	r6, r0
 8004110:	46d4      	mov	ip, sl
 8004112:	e7e0      	b.n	80040d6 <etharp_find_entry.isra.0+0x26>
          if (arp_table[i].ctime >= age_stable) {
 8004114:	45ca      	cmp	sl, r9
            old_stable = i;
 8004116:	bf24      	itt	cs
 8004118:	fa4f fe80 	sxtbcs.w	lr, r0
 800411c:	46d1      	movcs	r9, sl
 800411e:	e7da      	b.n	80040d6 <etharp_find_entry.isra.0+0x26>
    i = empty;
 8004120:	b2e4      	uxtb	r4, r4
  if (ipaddr != NULL) {
 8004122:	b125      	cbz	r5, 800412e <etharp_find_entry.isra.0+0x7e>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8004124:	2318      	movs	r3, #24
 8004126:	682a      	ldr	r2, [r5, #0]
 8004128:	fb03 8304 	mla	r3, r3, r4, r8
 800412c:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 800412e:	2318      	movs	r3, #24
  return (err_t)i;
 8004130:	b260      	sxtb	r0, r4
  arp_table[i].ctime = 0;
 8004132:	fb03 8804 	mla	r8, r3, r4, r8
 8004136:	2300      	movs	r3, #0
 8004138:	f8a8 3012 	strh.w	r3, [r8, #18]
 800413c:	e7e2      	b.n	8004104 <etharp_find_entry.isra.0+0x54>
    if (old_stable < ARP_TABLE_SIZE) {
 800413e:	f1be 0f0a 	cmp.w	lr, #10
 8004142:	d005      	beq.n	8004150 <etharp_find_entry.isra.0+0xa0>
      i = old_stable;
 8004144:	fa5f f48e 	uxtb.w	r4, lr
    etharp_free_entry(i);
 8004148:	4620      	mov	r0, r4
 800414a:	f7ff ff9d 	bl	8004088 <etharp_free_entry>
 800414e:	e7e8      	b.n	8004122 <etharp_find_entry.isra.0+0x72>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8004150:	2e0a      	cmp	r6, #10
 8004152:	d001      	beq.n	8004158 <etharp_find_entry.isra.0+0xa8>
      i = old_pending;
 8004154:	b2f4      	uxtb	r4, r6
 8004156:	e7f7      	b.n	8004148 <etharp_find_entry.isra.0+0x98>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8004158:	2a0a      	cmp	r2, #10
 800415a:	d0c7      	beq.n	80040ec <etharp_find_entry.isra.0+0x3c>
      i = old_queue;
 800415c:	b2d4      	uxtb	r4, r2
 800415e:	e7f3      	b.n	8004148 <etharp_find_entry.isra.0+0x98>
      if (state == ETHARP_STATE_PENDING) {
 8004160:	2f01      	cmp	r7, #1
 8004162:	f8b3 a012 	ldrh.w	sl, [r3, #18]
 8004166:	d1d5      	bne.n	8004114 <etharp_find_entry.isra.0+0x64>
        if (arp_table[i].q != NULL) {
 8004168:	681f      	ldr	r7, [r3, #0]
 800416a:	2f00      	cmp	r7, #0
 800416c:	d0cd      	beq.n	800410a <etharp_find_entry.isra.0+0x5a>
          if (arp_table[i].ctime >= age_queue) {
 800416e:	45da      	cmp	sl, fp
 8004170:	d3b1      	bcc.n	80040d6 <etharp_find_entry.isra.0+0x26>
            old_queue = i;
 8004172:	b242      	sxtb	r2, r0
 8004174:	46d3      	mov	fp, sl
 8004176:	e7ae      	b.n	80040d6 <etharp_find_entry.isra.0+0x26>
 8004178:	20000214 	.word	0x20000214

0800417c <etharp_raw.constprop.1>:
 * @return ERR_OK if the ARP packet has been sent
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
 800417c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004180:	4607      	mov	r7, r0
 8004182:	4688      	mov	r8, r1
 8004184:	4691      	mov	r9, r2
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8004186:	211c      	movs	r1, #28
 8004188:	2200      	movs	r2, #0
 800418a:	2002      	movs	r0, #2
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
 800418c:	461d      	mov	r5, r3
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800418e:	f001 f8cb 	bl	8005328 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8004192:	4606      	mov	r6, r0
 8004194:	b380      	cbz	r0, 80041f8 <etharp_raw.constprop.1+0x7c>
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8004196:	6844      	ldr	r4, [r0, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8004198:	2001      	movs	r0, #1
 800419a:	f7ff ff60 	bl	800405e <lwip_htons>
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800419e:	4631      	mov	r1, r6
  hdr->opcode = lwip_htons(opcode);
 80041a0:	80e0      	strh	r0, [r4, #6]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80041a2:	4638      	mov	r0, r7
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80041a4:	682b      	ldr	r3, [r5, #0]
 80041a6:	60a3      	str	r3, [r4, #8]
 80041a8:	88ab      	ldrh	r3, [r5, #4]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80041aa:	2500      	movs	r5, #0
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80041ac:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80041ae:	4b14      	ldr	r3, [pc, #80]	; (8004200 <etharp_raw.constprop.1+0x84>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	889b      	ldrh	r3, [r3, #4]
 80041b4:	f8c4 2012 	str.w	r2, [r4, #18]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80041b8:	4642      	mov	r2, r8
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80041ba:	82e3      	strh	r3, [r4, #22]
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80041bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80041c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041c6:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80041c8:	7025      	strb	r5, [r4, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80041ca:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80041cc:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80041ce:	70e5      	strb	r5, [r4, #3]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80041d0:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80041d2:	2308      	movs	r3, #8
 80041d4:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 80041d6:	2306      	movs	r3, #6
 80041d8:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80041da:	2304      	movs	r3, #4
 80041dc:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80041de:	f640 0306 	movw	r3, #2054	; 0x806
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	464b      	mov	r3, r9
 80041e6:	f003 fffd 	bl	80081e4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80041ea:	4630      	mov	r0, r6
 80041ec:	f001 f874 	bl	80052d8 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 80041f0:	4628      	mov	r0, r5
}
 80041f2:	b003      	add	sp, #12
 80041f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return ERR_MEM;
 80041f8:	f04f 30ff 	mov.w	r0, #4294967295
 80041fc:	e7f9      	b.n	80041f2 <etharp_raw.constprop.1+0x76>
 80041fe:	bf00      	nop
 8004200:	0800b96a 	.word	0x0800b96a

08004204 <etharp_cleanup_netif>:
{
 8004204:	b570      	push	{r4, r5, r6, lr}
 8004206:	4606      	mov	r6, r0
 8004208:	4d07      	ldr	r5, [pc, #28]	; (8004228 <etharp_cleanup_netif+0x24>)
 800420a:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800420c:	7d2b      	ldrb	r3, [r5, #20]
 800420e:	b12b      	cbz	r3, 800421c <etharp_cleanup_netif+0x18>
 8004210:	68ab      	ldr	r3, [r5, #8]
 8004212:	42b3      	cmp	r3, r6
 8004214:	d102      	bne.n	800421c <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 8004216:	4620      	mov	r0, r4
 8004218:	f7ff ff36 	bl	8004088 <etharp_free_entry>
 800421c:	3401      	adds	r4, #1
 800421e:	3518      	adds	r5, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004220:	2c0a      	cmp	r4, #10
 8004222:	d1f3      	bne.n	800420c <etharp_cleanup_netif+0x8>
}
 8004224:	bd70      	pop	{r4, r5, r6, pc}
 8004226:	bf00      	nop
 8004228:	20000214 	.word	0x20000214

0800422c <etharp_input>:
{
 800422c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004230:	4680      	mov	r8, r0
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8004232:	460d      	mov	r5, r1
 8004234:	b181      	cbz	r1, 8004258 <etharp_input+0x2c>
  hdr = (struct etharp_hdr *)p->payload;
 8004236:	6844      	ldr	r4, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8004238:	8823      	ldrh	r3, [r4, #0]
 800423a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800423e:	d108      	bne.n	8004252 <etharp_input+0x26>
 8004240:	7923      	ldrb	r3, [r4, #4]
 8004242:	2b06      	cmp	r3, #6
 8004244:	d105      	bne.n	8004252 <etharp_input+0x26>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8004246:	7963      	ldrb	r3, [r4, #5]
 8004248:	2b04      	cmp	r3, #4
 800424a:	d102      	bne.n	8004252 <etharp_input+0x26>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800424c:	8863      	ldrh	r3, [r4, #2]
 800424e:	2b08      	cmp	r3, #8
 8004250:	d005      	beq.n	800425e <etharp_input+0x32>
  pbuf_free(p);
 8004252:	4640      	mov	r0, r8
 8004254:	f001 f840 	bl	80052d8 <pbuf_free>
}
 8004258:	b004      	add	sp, #16
 800425a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800425e:	f8d4 000e 	ldr.w	r0, [r4, #14]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004262:	684f      	ldr	r7, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8004264:	9003      	str	r0, [sp, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8004266:	69a3      	ldr	r3, [r4, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004268:	b117      	cbz	r7, 8004270 <etharp_input+0x44>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800426a:	1bdb      	subs	r3, r3, r7
 800426c:	425f      	negs	r7, r3
 800426e:	415f      	adcs	r7, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8004270:	2f00      	cmp	r7, #0
 8004272:	f104 0608 	add.w	r6, r4, #8
 8004276:	bf14      	ite	ne
 8004278:	f04f 0901 	movne.w	r9, #1
 800427c:	f04f 0902 	moveq.w	r9, #2
  if (ip4_addr_isany(ipaddr) ||
 8004280:	2800      	cmp	r0, #0
 8004282:	d03c      	beq.n	80042fe <etharp_input+0xd2>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8004284:	4629      	mov	r1, r5
 8004286:	f000 fb0c 	bl	80048a2 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800428a:	4682      	mov	sl, r0
 800428c:	bbb8      	cbnz	r0, 80042fe <etharp_input+0xd2>
      ip4_addr_ismulticast(ipaddr)) {
 800428e:	9b03      	ldr	r3, [sp, #12]
 8004290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8004294:	2be0      	cmp	r3, #224	; 0xe0
 8004296:	d032      	beq.n	80042fe <etharp_input+0xd2>
  i = etharp_find_entry(ipaddr, flags, netif);
 8004298:	4649      	mov	r1, r9
 800429a:	a803      	add	r0, sp, #12
 800429c:	f7ff ff08 	bl	80040b0 <etharp_find_entry.isra.0>
  if (i < 0) {
 80042a0:	2800      	cmp	r0, #0
 80042a2:	db2c      	blt.n	80042fe <etharp_input+0xd2>
    arp_table[i].state = ETHARP_STATE_STABLE;
 80042a4:	2218      	movs	r2, #24
 80042a6:	4b29      	ldr	r3, [pc, #164]	; (800434c <etharp_input+0x120>)
 80042a8:	f04f 0c02 	mov.w	ip, #2
 80042ac:	fb02 f100 	mul.w	r1, r2, r0
 80042b0:	eb03 0e01 	add.w	lr, r3, r1
 80042b4:	f88e c014 	strb.w	ip, [lr, #20]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80042b8:	f04f 0c0c 	mov.w	ip, #12
  arp_table[i].netif = netif;
 80042bc:	f8ce 5008 	str.w	r5, [lr, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80042c0:	fb12 c200 	smlabb	r2, r2, r0, ip
 80042c4:	6830      	ldr	r0, [r6, #0]
 80042c6:	eb03 0c02 	add.w	ip, r3, r2
 80042ca:	5098      	str	r0, [r3, r2]
 80042cc:	88b2      	ldrh	r2, [r6, #4]
 80042ce:	f8ac 2004 	strh.w	r2, [ip, #4]
  if (arp_table[i].q != NULL) {
 80042d2:	f853 9001 	ldr.w	r9, [r3, r1]
  arp_table[i].ctime = 0;
 80042d6:	f8ae a012 	strh.w	sl, [lr, #18]
  if (arp_table[i].q != NULL) {
 80042da:	f1b9 0f00 	cmp.w	r9, #0
 80042de:	d00e      	beq.n	80042fe <etharp_input+0xd2>
    arp_table[i].q = NULL;
 80042e0:	f843 a001 	str.w	sl, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80042e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042e8:	f105 0225 	add.w	r2, r5, #37	; 0x25
 80042ec:	4649      	mov	r1, r9
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	4628      	mov	r0, r5
 80042f2:	4633      	mov	r3, r6
 80042f4:	f003 ff76 	bl	80081e4 <ethernet_output>
    pbuf_free(p);
 80042f8:	4648      	mov	r0, r9
 80042fa:	f000 ffed 	bl	80052d8 <pbuf_free>
  switch (hdr->opcode) {
 80042fe:	88e3      	ldrh	r3, [r4, #6]
 8004300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004304:	d1a5      	bne.n	8004252 <etharp_input+0x26>
    if (for_us) {
 8004306:	2f00      	cmp	r7, #0
 8004308:	d0a3      	beq.n	8004252 <etharp_input+0x26>
      hdr->opcode = lwip_htons(ARP_REPLY);
 800430a:	2002      	movs	r0, #2
 800430c:	f7ff fea7 	bl	800405e <lwip_htons>
      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
 8004310:	f8d4 300e 	ldr.w	r3, [r4, #14]
      hdr->opcode = lwip_htons(ARP_REPLY);
 8004314:	80e0      	strh	r0, [r4, #6]
        ethernet_output(netif, p, &hdr->shwaddr, &hdr->dhwaddr, ETHTYPE_ARP);
 8004316:	4628      	mov	r0, r5
      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
 8004318:	61a3      	str	r3, [r4, #24]
      IPADDR2_COPY(&hdr->sipaddr, netif_ip4_addr(netif));
 800431a:	686b      	ldr	r3, [r5, #4]
 800431c:	f8c4 300e 	str.w	r3, [r4, #14]
      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
 8004320:	f104 0312 	add.w	r3, r4, #18
 8004324:	6832      	ldr	r2, [r6, #0]
 8004326:	f8c4 2012 	str.w	r2, [r4, #18]
 800432a:	88b2      	ldrh	r2, [r6, #4]
 800432c:	809a      	strh	r2, [r3, #4]
      ETHADDR16_COPY(&hdr->shwaddr, netif->hwaddr);
 800432e:	462a      	mov	r2, r5
 8004330:	f852 1f25 	ldr.w	r1, [r2, #37]!
 8004334:	60a1      	str	r1, [r4, #8]
        ethernet_output(netif, p, &hdr->shwaddr, &hdr->dhwaddr, ETHTYPE_ARP);
 8004336:	4641      	mov	r1, r8
      ETHADDR16_COPY(&hdr->shwaddr, netif->hwaddr);
 8004338:	8892      	ldrh	r2, [r2, #4]
 800433a:	80b2      	strh	r2, [r6, #4]
        ethernet_output(netif, p, &hdr->shwaddr, &hdr->dhwaddr, ETHTYPE_ARP);
 800433c:	f640 0206 	movw	r2, #2054	; 0x806
 8004340:	9200      	str	r2, [sp, #0]
 8004342:	4632      	mov	r2, r6
 8004344:	f003 ff4e 	bl	80081e4 <ethernet_output>
 8004348:	e783      	b.n	8004252 <etharp_input+0x26>
 800434a:	bf00      	nop
 800434c:	20000214 	.word	0x20000214

08004350 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8004350:	b507      	push	{r0, r1, r2, lr}
 8004352:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8004354:	f100 0325 	add.w	r3, r0, #37	; 0x25
 8004358:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800435a:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800435c:	4619      	mov	r1, r3
 800435e:	9200      	str	r2, [sp, #0]
 8004360:	4a02      	ldr	r2, [pc, #8]	; (800436c <etharp_request+0x1c>)
 8004362:	f7ff ff0b 	bl	800417c <etharp_raw.constprop.1>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8004366:	b003      	add	sp, #12
 8004368:	f85d fb04 	ldr.w	pc, [sp], #4
 800436c:	0800b964 	.word	0x0800b964

08004370 <etharp_tmr>:
{
 8004370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004372:	4c13      	ldr	r4, [pc, #76]	; (80043c0 <etharp_tmr+0x50>)
 8004374:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8004376:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8004378:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 800437a:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 800437c:	b16a      	cbz	r2, 800439a <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 800437e:	89e3      	ldrh	r3, [r4, #14]
 8004380:	3301      	adds	r3, #1
 8004382:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8004384:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8004388:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800438a:	d203      	bcs.n	8004394 <etharp_tmr+0x24>
 800438c:	2a01      	cmp	r2, #1
 800438e:	d109      	bne.n	80043a4 <etharp_tmr+0x34>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8004390:	2b04      	cmp	r3, #4
 8004392:	d90b      	bls.n	80043ac <etharp_tmr+0x3c>
        etharp_free_entry(i);
 8004394:	4628      	mov	r0, r5
 8004396:	f7ff fe77 	bl	8004088 <etharp_free_entry>
 800439a:	3501      	adds	r5, #1
 800439c:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800439e:	2d0a      	cmp	r5, #10
 80043a0:	d1eb      	bne.n	800437a <etharp_tmr+0xa>
 80043a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80043a4:	2a03      	cmp	r2, #3
 80043a6:	d106      	bne.n	80043b6 <etharp_tmr+0x46>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80043a8:	7427      	strb	r7, [r4, #16]
 80043aa:	e7f6      	b.n	800439a <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80043ac:	4621      	mov	r1, r4
 80043ae:	6860      	ldr	r0, [r4, #4]
 80043b0:	f7ff ffce 	bl	8004350 <etharp_request>
 80043b4:	e7f1      	b.n	800439a <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80043b6:	2a04      	cmp	r2, #4
 80043b8:	d1ef      	bne.n	800439a <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 80043ba:	7426      	strb	r6, [r4, #16]
 80043bc:	e7ed      	b.n	800439a <etharp_tmr+0x2a>
 80043be:	bf00      	nop
 80043c0:	20000218 	.word	0x20000218

080043c4 <etharp_output_to_arp_index>:
{
 80043c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80043c8:	4689      	mov	r9, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80043ca:	4d1c      	ldr	r5, [pc, #112]	; (800443c <etharp_output_to_arp_index+0x78>)
 80043cc:	2118      	movs	r1, #24
{
 80043ce:	4607      	mov	r7, r0
 80043d0:	4614      	mov	r4, r2
 80043d2:	f100 0825 	add.w	r8, r0, #37	; 0x25
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80043d6:	fb01 5602 	mla	r6, r1, r2, r5
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80043da:	7d33      	ldrb	r3, [r6, #20]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d10a      	bne.n	80043f6 <etharp_output_to_arp_index+0x32>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80043e0:	8a73      	ldrh	r3, [r6, #18]
 80043e2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80043e6:	d915      	bls.n	8004414 <etharp_output_to_arp_index+0x50>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80043e8:	4631      	mov	r1, r6
 80043ea:	3104      	adds	r1, #4
 80043ec:	f7ff ffb0 	bl	8004350 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80043f0:	b908      	cbnz	r0, 80043f6 <etharp_output_to_arp_index+0x32>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80043f2:	2303      	movs	r3, #3
 80043f4:	7533      	strb	r3, [r6, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80043f6:	2318      	movs	r3, #24
 80043f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043fc:	4649      	mov	r1, r9
 80043fe:	4638      	mov	r0, r7
 8004400:	fb03 5304 	mla	r3, r3, r4, r5
 8004404:	9200      	str	r2, [sp, #0]
 8004406:	4642      	mov	r2, r8
 8004408:	330c      	adds	r3, #12
 800440a:	f003 feeb 	bl	80081e4 <ethernet_output>
}
 800440e:	b003      	add	sp, #12
 8004410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8004414:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8004418:	d3ed      	bcc.n	80043f6 <etharp_output_to_arp_index+0x32>
 800441a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800441e:	1d03      	adds	r3, r0, #4
 8004420:	00c9      	lsls	r1, r1, #3
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	4643      	mov	r3, r8
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8004426:	f101 020c 	add.w	r2, r1, #12
 800442a:	3104      	adds	r1, #4
 800442c:	4429      	add	r1, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800442e:	442a      	add	r2, r5
 8004430:	9101      	str	r1, [sp, #4]
 8004432:	4641      	mov	r1, r8
 8004434:	f7ff fea2 	bl	800417c <etharp_raw.constprop.1>
 8004438:	e7da      	b.n	80043f0 <etharp_output_to_arp_index+0x2c>
 800443a:	bf00      	nop
 800443c:	20000214 	.word	0x20000214

08004440 <etharp_query>:
{
 8004440:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004444:	4688      	mov	r8, r1
 8004446:	4607      	mov	r7, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8004448:	4601      	mov	r1, r0
{
 800444a:	4614      	mov	r4, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800444c:	f8d8 0000 	ldr.w	r0, [r8]
 8004450:	f000 fa27 	bl	80048a2 <ip4_addr_isbroadcast_u32>
 8004454:	2800      	cmp	r0, #0
 8004456:	d14e      	bne.n	80044f6 <etharp_query+0xb6>
      ip4_addr_ismulticast(ipaddr) ||
 8004458:	f8d8 3000 	ldr.w	r3, [r8]
 800445c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8004460:	2ae0      	cmp	r2, #224	; 0xe0
 8004462:	d048      	beq.n	80044f6 <etharp_query+0xb6>
      ip4_addr_isany(ipaddr)) {
 8004464:	2b00      	cmp	r3, #0
 8004466:	d046      	beq.n	80044f6 <etharp_query+0xb6>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8004468:	2101      	movs	r1, #1
 800446a:	4640      	mov	r0, r8
 800446c:	f7ff fe20 	bl	80040b0 <etharp_find_entry.isra.0>
  if (i < 0) {
 8004470:	1e05      	subs	r5, r0, #0
 8004472:	db43      	blt.n	80044fc <etharp_query+0xbc>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8004474:	4e2e      	ldr	r6, [pc, #184]	; (8004530 <etharp_query+0xf0>)
 8004476:	2318      	movs	r3, #24
 8004478:	fb03 6305 	mla	r3, r3, r5, r6
 800447c:	7d1a      	ldrb	r2, [r3, #20]
 800447e:	2a00      	cmp	r2, #0
 8004480:	d13e      	bne.n	8004500 <etharp_query+0xc0>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8004482:	2201      	movs	r2, #1
    arp_table[i].netif = netif;
 8004484:	609f      	str	r7, [r3, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8004486:	751a      	strb	r2, [r3, #20]
    result = etharp_request(netif, ipaddr);
 8004488:	4641      	mov	r1, r8
 800448a:	4638      	mov	r0, r7
 800448c:	f7ff ff60 	bl	8004350 <etharp_request>
    if (q == NULL) {
 8004490:	b1a4      	cbz	r4, 80044bc <etharp_query+0x7c>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8004492:	2318      	movs	r3, #24
 8004494:	fb03 6205 	mla	r2, r3, r5, r6
 8004498:	7d12      	ldrb	r2, [r2, #20]
 800449a:	2a01      	cmp	r2, #1
 800449c:	d911      	bls.n	80044c2 <etharp_query+0x82>
    ETHARP_SET_HINT(netif, i);
 800449e:	4a25      	ldr	r2, [pc, #148]	; (8004534 <etharp_query+0xf4>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80044a0:	4621      	mov	r1, r4
 80044a2:	4638      	mov	r0, r7
    ETHARP_SET_HINT(netif, i);
 80044a4:	7015      	strb	r5, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80044a6:	220c      	movs	r2, #12
 80044a8:	fb13 2305 	smlabb	r3, r3, r5, r2
 80044ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044b0:	4433      	add	r3, r6
 80044b2:	9200      	str	r2, [sp, #0]
 80044b4:	f107 0225 	add.w	r2, r7, #37	; 0x25
 80044b8:	f003 fe94 	bl	80081e4 <ethernet_output>
}
 80044bc:	b002      	add	sp, #8
 80044be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80044c2:	d1fb      	bne.n	80044bc <etharp_query+0x7c>
 80044c4:	4623      	mov	r3, r4
    while (p) {
 80044c6:	b98b      	cbnz	r3, 80044ec <etharp_query+0xac>
      pbuf_ref(p);
 80044c8:	4620      	mov	r0, r4
 80044ca:	f000 ffea 	bl	80054a2 <pbuf_ref>
    if (p != NULL) {
 80044ce:	b35c      	cbz	r4, 8004528 <etharp_query+0xe8>
 80044d0:	4627      	mov	r7, r4
      if (arp_table[i].q != NULL) {
 80044d2:	2318      	movs	r3, #24
 80044d4:	fb03 f205 	mul.w	r2, r3, r5
 80044d8:	461c      	mov	r4, r3
 80044da:	58b0      	ldr	r0, [r6, r2]
 80044dc:	b108      	cbz	r0, 80044e2 <etharp_query+0xa2>
        pbuf_free(arp_table[i].q);
 80044de:	f000 fefb 	bl	80052d8 <pbuf_free>
      arp_table[i].q = p;
 80044e2:	fb04 f305 	mul.w	r3, r4, r5
      result = ERR_OK;
 80044e6:	2000      	movs	r0, #0
      arp_table[i].q = p;
 80044e8:	50f7      	str	r7, [r6, r3]
 80044ea:	e7e7      	b.n	80044bc <etharp_query+0x7c>
      if (p->type != PBUF_ROM) {
 80044ec:	7b1a      	ldrb	r2, [r3, #12]
 80044ee:	2a01      	cmp	r2, #1
 80044f0:	d10b      	bne.n	800450a <etharp_query+0xca>
      p = p->next;
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	e7e7      	b.n	80044c6 <etharp_query+0x86>
    return ERR_ARG;
 80044f6:	f06f 000f 	mvn.w	r0, #15
 80044fa:	e7df      	b.n	80044bc <etharp_query+0x7c>
 80044fc:	4628      	mov	r0, r5
 80044fe:	e7dd      	b.n	80044bc <etharp_query+0x7c>
  if (is_new_entry || (q == NULL)) {
 8004500:	2c00      	cmp	r4, #0
 8004502:	d0c1      	beq.n	8004488 <etharp_query+0x48>
  err_t result = ERR_MEM;
 8004504:	f04f 30ff 	mov.w	r0, #4294967295
 8004508:	e7c3      	b.n	8004492 <etharp_query+0x52>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800450a:	2200      	movs	r2, #0
 800450c:	8919      	ldrh	r1, [r3, #8]
 800450e:	2002      	movs	r0, #2
 8004510:	f000 ff0a 	bl	8005328 <pbuf_alloc>
      if (p != NULL) {
 8004514:	4607      	mov	r7, r0
 8004516:	b138      	cbz	r0, 8004528 <etharp_query+0xe8>
        if (pbuf_copy(p, q) != ERR_OK) {
 8004518:	4621      	mov	r1, r4
 800451a:	f000 ffd5 	bl	80054c8 <pbuf_copy>
 800451e:	2800      	cmp	r0, #0
 8004520:	d0d7      	beq.n	80044d2 <etharp_query+0x92>
          pbuf_free(p);
 8004522:	4638      	mov	r0, r7
 8004524:	f000 fed8 	bl	80052d8 <pbuf_free>
      result = ERR_MEM;
 8004528:	f04f 30ff 	mov.w	r0, #4294967295
 800452c:	e7c6      	b.n	80044bc <etharp_query+0x7c>
 800452e:	bf00      	nop
 8004530:	20000214 	.word	0x20000214
 8004534:	20000304 	.word	0x20000304

08004538 <etharp_output>:
{
 8004538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800453a:	4604      	mov	r4, r0
 800453c:	b085      	sub	sp, #20
 800453e:	460e      	mov	r6, r1
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8004540:	4601      	mov	r1, r0
 8004542:	6810      	ldr	r0, [r2, #0]
{
 8004544:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8004546:	f000 f9ac 	bl	80048a2 <ip4_addr_isbroadcast_u32>
 800454a:	2800      	cmp	r0, #0
 800454c:	d15a      	bne.n	8004604 <etharp_output+0xcc>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800454e:	682b      	ldr	r3, [r5, #0]
 8004550:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004554:	2ae0      	cmp	r2, #224	; 0xe0
 8004556:	d11d      	bne.n	8004594 <etharp_output+0x5c>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8004558:	2301      	movs	r3, #1
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800455a:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800455e:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8004562:	235e      	movs	r3, #94	; 0x5e
 8004564:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8004568:	786b      	ldrb	r3, [r5, #1]
 800456a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800456e:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8004572:	78ab      	ldrb	r3, [r5, #2]
 8004574:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8004578:	78eb      	ldrb	r3, [r5, #3]
 800457a:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800457e:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8004580:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004584:	4631      	mov	r1, r6
 8004586:	4620      	mov	r0, r4
 8004588:	9200      	str	r2, [sp, #0]
 800458a:	f104 0225 	add.w	r2, r4, #37	; 0x25
 800458e:	f003 fe29 	bl	80081e4 <ethernet_output>
 8004592:	e01f      	b.n	80045d4 <etharp_output+0x9c>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8004594:	6862      	ldr	r2, [r4, #4]
 8004596:	68a1      	ldr	r1, [r4, #8]
 8004598:	405a      	eors	r2, r3
 800459a:	420a      	tst	r2, r1
 800459c:	d008      	beq.n	80045b0 <etharp_output+0x78>
        !ip4_addr_islinklocal(ipaddr)) {
 800459e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80045a0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d003      	beq.n	80045b0 <etharp_output+0x78>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80045a8:	68e3      	ldr	r3, [r4, #12]
 80045aa:	b36b      	cbz	r3, 8004608 <etharp_output+0xd0>
            dst_addr = netif_ip4_gw(netif);
 80045ac:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80045b0:	4b17      	ldr	r3, [pc, #92]	; (8004610 <etharp_output+0xd8>)
 80045b2:	2018      	movs	r0, #24
 80045b4:	4917      	ldr	r1, [pc, #92]	; (8004614 <etharp_output+0xdc>)
 80045b6:	781a      	ldrb	r2, [r3, #0]
 80045b8:	fb00 1002 	mla	r0, r0, r2, r1
 80045bc:	7d01      	ldrb	r1, [r0, #20]
 80045be:	2901      	cmp	r1, #1
 80045c0:	4619      	mov	r1, r3
 80045c2:	d909      	bls.n	80045d8 <etharp_output+0xa0>
 80045c4:	682f      	ldr	r7, [r5, #0]
 80045c6:	6843      	ldr	r3, [r0, #4]
 80045c8:	429f      	cmp	r7, r3
 80045ca:	d105      	bne.n	80045d8 <etharp_output+0xa0>
        return etharp_output_to_arp_index(netif, q, i);
 80045cc:	4631      	mov	r1, r6
 80045ce:	4620      	mov	r0, r4
 80045d0:	f7ff fef8 	bl	80043c4 <etharp_output_to_arp_index>
}
 80045d4:	b005      	add	sp, #20
 80045d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d8:	4b0e      	ldr	r3, [pc, #56]	; (8004614 <etharp_output+0xdc>)
{
 80045da:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80045dc:	7d18      	ldrb	r0, [r3, #20]
 80045de:	2801      	cmp	r0, #1
 80045e0:	d906      	bls.n	80045f0 <etharp_output+0xb8>
 80045e2:	682f      	ldr	r7, [r5, #0]
 80045e4:	6858      	ldr	r0, [r3, #4]
 80045e6:	4287      	cmp	r7, r0
 80045e8:	d102      	bne.n	80045f0 <etharp_output+0xb8>
        ETHARP_SET_HINT(netif, i);
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	700a      	strb	r2, [r1, #0]
 80045ee:	e7ed      	b.n	80045cc <etharp_output+0x94>
 80045f0:	3201      	adds	r2, #1
 80045f2:	3318      	adds	r3, #24
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80045f4:	2a0a      	cmp	r2, #10
 80045f6:	d1f1      	bne.n	80045dc <etharp_output+0xa4>
    return etharp_query(netif, dst_addr, q);
 80045f8:	4632      	mov	r2, r6
 80045fa:	4629      	mov	r1, r5
 80045fc:	4620      	mov	r0, r4
 80045fe:	f7ff ff1f 	bl	8004440 <etharp_query>
 8004602:	e7e7      	b.n	80045d4 <etharp_output+0x9c>
    dest = (const struct eth_addr *)&ethbroadcast;
 8004604:	4b04      	ldr	r3, [pc, #16]	; (8004618 <etharp_output+0xe0>)
 8004606:	e7bb      	b.n	8004580 <etharp_output+0x48>
            return ERR_RTE;
 8004608:	f06f 0003 	mvn.w	r0, #3
 800460c:	e7e2      	b.n	80045d4 <etharp_output+0x9c>
 800460e:	bf00      	nop
 8004610:	20000304 	.word	0x20000304
 8004614:	20000214 	.word	0x20000214
 8004618:	0800b964 	.word	0x0800b964

0800461c <ip4_route>:
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800461c:	4b13      	ldr	r3, [pc, #76]	; (800466c <ip4_route+0x50>)
{
 800461e:	b530      	push	{r4, r5, lr}
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	b96b      	cbnz	r3, 8004640 <ip4_route+0x24>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8004624:	4a12      	ldr	r2, [pc, #72]	; (8004670 <ip4_route+0x54>)
 8004626:	6812      	ldr	r2, [r2, #0]
 8004628:	b1ea      	cbz	r2, 8004666 <ip4_route+0x4a>
 800462a:	f892 102b 	ldrb.w	r1, [r2, #43]	; 0x2b
 800462e:	f001 0105 	and.w	r1, r1, #5
 8004632:	2905      	cmp	r1, #5
 8004634:	d117      	bne.n	8004666 <ip4_route+0x4a>
 8004636:	6851      	ldr	r1, [r2, #4]
 8004638:	2900      	cmp	r1, #0
 800463a:	bf18      	it	ne
 800463c:	4613      	movne	r3, r2
 800463e:	e012      	b.n	8004666 <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004640:	f893 402b 	ldrb.w	r4, [r3, #43]	; 0x2b
 8004644:	f004 0205 	and.w	r2, r4, #5
 8004648:	2a05      	cmp	r2, #5
 800464a:	d1e9      	bne.n	8004620 <ip4_route+0x4>
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	2a00      	cmp	r2, #0
 8004650:	d0e6      	beq.n	8004620 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8004652:	6801      	ldr	r1, [r0, #0]
 8004654:	689d      	ldr	r5, [r3, #8]
 8004656:	404a      	eors	r2, r1
 8004658:	422a      	tst	r2, r5
 800465a:	d004      	beq.n	8004666 <ip4_route+0x4a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800465c:	07a2      	lsls	r2, r4, #30
 800465e:	d4df      	bmi.n	8004620 <ip4_route+0x4>
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	4291      	cmp	r1, r2
 8004664:	d1dc      	bne.n	8004620 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8004666:	4618      	mov	r0, r3
 8004668:	bd30      	pop	{r4, r5, pc}
 800466a:	bf00      	nop
 800466c:	2000b0a8 	.word	0x2000b0a8
 8004670:	2000b0ac 	.word	0x2000b0ac

08004674 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8004674:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8004678:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
 800467c:	4605      	mov	r5, r0
 800467e:	460f      	mov	r7, r1
  if (IPH_V(iphdr) != 4) {
 8004680:	f898 9000 	ldrb.w	r9, [r8]
 8004684:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8004688:	2b04      	cmp	r3, #4
 800468a:	d005      	beq.n	8004698 <ip4_input+0x24>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800468c:	4628      	mov	r0, r5
 800468e:	f000 fe23 	bl	80052d8 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8004692:	2000      	movs	r0, #0
 8004694:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8004698:	f8b8 0002 	ldrh.w	r0, [r8, #2]
  iphdr_hlen = IPH_HL(iphdr);
 800469c:	f009 090f 	and.w	r9, r9, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80046a0:	f7ff fcdd 	bl	800405e <lwip_htons>
  if (iphdr_len < p->tot_len) {
 80046a4:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen *= 4;
 80046a6:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80046aa:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 80046ac:	4283      	cmp	r3, r0
 80046ae:	d903      	bls.n	80046b8 <ip4_input+0x44>
    pbuf_realloc(p, iphdr_len);
 80046b0:	4601      	mov	r1, r0
 80046b2:	4628      	mov	r0, r5
 80046b4:	f000 fec4 	bl	8005440 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80046b8:	896b      	ldrh	r3, [r5, #10]
 80046ba:	454b      	cmp	r3, r9
 80046bc:	d3e6      	bcc.n	800468c <ip4_input+0x18>
 80046be:	892b      	ldrh	r3, [r5, #8]
 80046c0:	42a3      	cmp	r3, r4
 80046c2:	d3e3      	bcc.n	800468c <ip4_input+0x18>
 80046c4:	f1b9 0f13 	cmp.w	r9, #19
 80046c8:	d9e0      	bls.n	800468c <ip4_input+0x18>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80046ca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80046ce:	4c3c      	ldr	r4, [pc, #240]	; (80047c0 <ip4_input+0x14c>)
 80046d0:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80046d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80046d6:	f8d8 200c 	ldr.w	r2, [r8, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80046da:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80046dc:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80046de:	d140      	bne.n	8004762 <ip4_input+0xee>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80046e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046e4:	07da      	lsls	r2, r3, #31
 80046e6:	d502      	bpl.n	80046ee <ip4_input+0x7a>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d15d      	bne.n	80047aa <ip4_input+0x136>
      netif = NULL;
 80046ee:	2600      	movs	r6, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80046f0:	4639      	mov	r1, r7
 80046f2:	6920      	ldr	r0, [r4, #16]
 80046f4:	f000 f8d5 	bl	80048a2 <ip4_addr_isbroadcast_u32>
 80046f8:	2800      	cmp	r0, #0
 80046fa:	d1c7      	bne.n	800468c <ip4_input+0x18>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80046fc:	6923      	ldr	r3, [r4, #16]
 80046fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8004702:	2be0      	cmp	r3, #224	; 0xe0
 8004704:	d0c2      	beq.n	800468c <ip4_input+0x18>
  if (netif == NULL) {
 8004706:	2e00      	cmp	r6, #0
 8004708:	d0c0      	beq.n	800468c <ip4_input+0x18>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800470a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800470e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004712:	b13b      	cbz	r3, 8004724 <ip4_input+0xb0>
    p = ip4_reass(p);
 8004714:	4628      	mov	r0, r5
 8004716:	f000 f963 	bl	80049e0 <ip4_reass>
    if (p == NULL) {
 800471a:	4605      	mov	r5, r0
 800471c:	2800      	cmp	r0, #0
 800471e:	d0b8      	beq.n	8004692 <ip4_input+0x1e>
    iphdr = (struct ip_hdr *)p->payload;
 8004720:	f8d0 8004 	ldr.w	r8, [r0, #4]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8004724:	f1c9 0100 	rsb	r1, r9, #0
 8004728:	4628      	mov	r0, r5
  ip_data.current_ip4_header = iphdr;
 800472a:	e884 01c0 	stmia.w	r4, {r6, r7, r8}
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800472e:	f898 3000 	ldrb.w	r3, [r8]
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	81a3      	strh	r3, [r4, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800473a:	f000 fdc6 	bl	80052ca <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 800473e:	f898 3009 	ldrb.w	r3, [r8, #9]
 8004742:	2b06      	cmp	r3, #6
 8004744:	d033      	beq.n	80047ae <ip4_input+0x13a>
 8004746:	2b11      	cmp	r3, #17
 8004748:	d136      	bne.n	80047b8 <ip4_input+0x144>
      udp_input(p, inp);
 800474a:	4639      	mov	r1, r7
 800474c:	4628      	mov	r0, r5
 800474e:	f003 fbd1 	bl	8007ef4 <udp_input>
  ip_data.current_netif = NULL;
 8004752:	2300      	movs	r3, #0
 8004754:	6023      	str	r3, [r4, #0]
  ip_data.current_input_netif = NULL;
 8004756:	6063      	str	r3, [r4, #4]
  ip_data.current_ip4_header = NULL;
 8004758:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 800475a:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800475c:	6123      	str	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800475e:	6163      	str	r3, [r4, #20]
  return ERR_OK;
 8004760:	e797      	b.n	8004692 <ip4_input+0x1e>
 8004762:	463e      	mov	r6, r7
 8004764:	f04f 0a01 	mov.w	sl, #1
        netif = netif_list;
 8004768:	f8df b058 	ldr.w	fp, [pc, #88]	; 80047c4 <ip4_input+0x150>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800476c:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
 8004770:	07db      	lsls	r3, r3, #31
 8004772:	d404      	bmi.n	800477e <ip4_input+0x10a>
      if (first) {
 8004774:	f1ba 0f00 	cmp.w	sl, #0
 8004778:	d10d      	bne.n	8004796 <ip4_input+0x122>
        netif = netif->next;
 800477a:	6836      	ldr	r6, [r6, #0]
 800477c:	e00d      	b.n	800479a <ip4_input+0x126>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800477e:	6873      	ldr	r3, [r6, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0f7      	beq.n	8004774 <ip4_input+0x100>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8004784:	6960      	ldr	r0, [r4, #20]
 8004786:	4283      	cmp	r3, r0
 8004788:	d0b2      	beq.n	80046f0 <ip4_input+0x7c>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800478a:	4631      	mov	r1, r6
 800478c:	f000 f889 	bl	80048a2 <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8004790:	2800      	cmp	r0, #0
 8004792:	d0ef      	beq.n	8004774 <ip4_input+0x100>
 8004794:	e7ac      	b.n	80046f0 <ip4_input+0x7c>
        netif = netif_list;
 8004796:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 800479a:	42be      	cmp	r6, r7
 800479c:	f04f 0a00 	mov.w	sl, #0
        netif = netif->next;
 80047a0:	bf08      	it	eq
 80047a2:	6836      	ldreq	r6, [r6, #0]
    } while (netif != NULL);
 80047a4:	2e00      	cmp	r6, #0
 80047a6:	d1e1      	bne.n	800476c <ip4_input+0xf8>
 80047a8:	e7a1      	b.n	80046ee <ip4_input+0x7a>
 80047aa:	463e      	mov	r6, r7
 80047ac:	e7a0      	b.n	80046f0 <ip4_input+0x7c>
      tcp_input(p, inp);
 80047ae:	4639      	mov	r1, r7
 80047b0:	4628      	mov	r0, r5
 80047b2:	f002 f91f 	bl	80069f4 <tcp_input>
      break;
 80047b6:	e7cc      	b.n	8004752 <ip4_input+0xde>
      pbuf_free(p);
 80047b8:	4628      	mov	r0, r5
 80047ba:	f000 fd8d 	bl	80052d8 <pbuf_free>
 80047be:	e7c8      	b.n	8004752 <ip4_input+0xde>
 80047c0:	200003f8 	.word	0x200003f8
 80047c4:	2000b0a8 	.word	0x2000b0a8

080047c8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80047c8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80047cc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80047ce:	4606      	mov	r6, r0
 80047d0:	4689      	mov	r9, r1
 80047d2:	469a      	mov	sl, r3
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80047d4:	4615      	mov	r5, r2
 80047d6:	2a00      	cmp	r2, #0
 80047d8:	d03f      	beq.n	800485a <ip4_output_if_src+0x92>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 80047da:	2114      	movs	r1, #20
 80047dc:	f000 fd75 	bl	80052ca <pbuf_header>
 80047e0:	4680      	mov	r8, r0
 80047e2:	2800      	cmp	r0, #0
 80047e4:	d145      	bne.n	8004872 <ip4_output_if_src+0xaa>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 80047e6:	6874      	ldr	r4, [r6, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 80047e8:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 80047ec:	f884 a008 	strb.w	sl, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 80047f0:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80047f2:	682b      	ldr	r3, [r5, #0]
 80047f4:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80047f6:	2345      	movs	r3, #69	; 0x45
 80047f8:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 80047fa:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80047fe:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8004800:	8930      	ldrh	r0, [r6, #8]
 8004802:	f7ff fc2c 	bl	800405e <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8004806:	f884 8006 	strb.w	r8, [r4, #6]
 800480a:	f884 8007 	strb.w	r8, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800480e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800487c <ip4_output_if_src+0xb4>
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8004812:	8060      	strh	r0, [r4, #2]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8004814:	f8b8 0000 	ldrh.w	r0, [r8]
 8004818:	f7ff fc21 	bl	800405e <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800481c:	f8b8 3000 	ldrh.w	r3, [r8]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8004820:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 8004822:	3301      	adds	r3, #1
 8004824:	f8a8 3000 	strh.w	r3, [r8]

    if (src == NULL) {
 8004828:	f1b9 0f00 	cmp.w	r9, #0
 800482c:	d112      	bne.n	8004854 <ip4_output_if_src+0x8c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800482e:	4b12      	ldr	r3, [pc, #72]	; (8004878 <ip4_output_if_src+0xb0>)
 8004830:	681b      	ldr	r3, [r3, #0]
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8004832:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8004834:	2300      	movs	r3, #0
 8004836:	72a3      	strb	r3, [r4, #10]
 8004838:	72e3      	strb	r3, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800483a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800483c:	b19b      	cbz	r3, 8004866 <ip4_output_if_src+0x9e>
 800483e:	8932      	ldrh	r2, [r6, #8]
 8004840:	429a      	cmp	r2, r3
 8004842:	d910      	bls.n	8004866 <ip4_output_if_src+0x9e>
    return ip4_frag(p, netif, dest);
 8004844:	462a      	mov	r2, r5
 8004846:	4639      	mov	r1, r7
 8004848:	4630      	mov	r0, r6
 800484a:	f000 fa2d 	bl	8004ca8 <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 800484e:	b002      	add	sp, #8
 8004850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 8004854:	f8d9 3000 	ldr.w	r3, [r9]
 8004858:	e7eb      	b.n	8004832 <ip4_output_if_src+0x6a>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800485a:	6843      	ldr	r3, [r0, #4]
 800485c:	ad02      	add	r5, sp, #8
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	f845 3d04 	str.w	r3, [r5, #-4]!
 8004864:	e7e9      	b.n	800483a <ip4_output_if_src+0x72>
  return netif->output(netif, p, dest);
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	462a      	mov	r2, r5
 800486a:	4631      	mov	r1, r6
 800486c:	4638      	mov	r0, r7
 800486e:	4798      	blx	r3
 8004870:	e7ed      	b.n	800484e <ip4_output_if_src+0x86>
      return ERR_BUF;
 8004872:	f06f 0001 	mvn.w	r0, #1
 8004876:	e7ea      	b.n	800484e <ip4_output_if_src+0x86>
 8004878:	0800b890 	.word	0x0800b890
 800487c:	20000306 	.word	0x20000306

08004880 <ip4_output_if>:
{
 8004880:	b4f0      	push	{r4, r5, r6, r7}
 8004882:	9c06      	ldr	r4, [sp, #24]
 8004884:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8004888:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800488c:	b11a      	cbz	r2, 8004896 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 800488e:	b109      	cbz	r1, 8004894 <ip4_output_if+0x14>
 8004890:	680f      	ldr	r7, [r1, #0]
 8004892:	b907      	cbnz	r7, 8004896 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8004894:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8004896:	9406      	str	r4, [sp, #24]
 8004898:	9605      	str	r6, [sp, #20]
 800489a:	9504      	str	r5, [sp, #16]
}
 800489c:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800489e:	f7ff bf93 	b.w	80047c8 <ip4_output_if_src>

080048a2 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80048a2:	1e43      	subs	r3, r0, #1
 80048a4:	3303      	adds	r3, #3
 80048a6:	d811      	bhi.n	80048cc <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80048a8:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 80048ac:	f013 0302 	ands.w	r3, r3, #2
 80048b0:	d00e      	beq.n	80048d0 <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80048b2:	684a      	ldr	r2, [r1, #4]
 80048b4:	4290      	cmp	r0, r2
 80048b6:	d00b      	beq.n	80048d0 <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80048b8:	688b      	ldr	r3, [r1, #8]
 80048ba:	4042      	eors	r2, r0
 80048bc:	421a      	tst	r2, r3
 80048be:	d107      	bne.n	80048d0 <ip4_addr_isbroadcast_u32+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80048c0:	43db      	mvns	r3, r3
 80048c2:	4383      	bics	r3, r0
    return 1;
 80048c4:	bf0c      	ite	eq
 80048c6:	2001      	moveq	r0, #1
 80048c8:	2000      	movne	r0, #0
 80048ca:	4770      	bx	lr
 80048cc:	2001      	movs	r0, #1
 80048ce:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 80048d0:	2000      	movs	r0, #0
  }
}
 80048d2:	4770      	bx	lr

080048d4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80048d4:	b510      	push	{r4, lr}
 80048d6:	4604      	mov	r4, r0
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 80048d8:	6940      	ldr	r0, [r0, #20]
 80048da:	b108      	cbz	r0, 80048e0 <ipfrag_free_pbuf_custom+0xc>
    pbuf_free(pcr->original);
 80048dc:	f000 fcfc 	bl	80052d8 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 80048e0:	4621      	mov	r1, r4
 80048e2:	2005      	movs	r0, #5
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 80048e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 80048e8:	f000 bbde 	b.w	80050a8 <memp_free>

080048ec <ip_reass_free_complete_datagram>:
{
 80048ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048f0:	4606      	mov	r6, r0
 80048f2:	460f      	mov	r7, r1
  p = ipr->p;
 80048f4:	6845      	ldr	r5, [r0, #4]
  u16_t pbufs_freed = 0;
 80048f6:	2400      	movs	r4, #0
  while (p != NULL) {
 80048f8:	b98d      	cbnz	r5, 800491e <ip_reass_free_complete_datagram+0x32>
  if (reassdatagrams == ipr) {
 80048fa:	4a0f      	ldr	r2, [pc, #60]	; (8004938 <ip_reass_free_complete_datagram+0x4c>)
  memp_free(MEMP_REASSDATA, ipr);
 80048fc:	4631      	mov	r1, r6
 80048fe:	2004      	movs	r0, #4
  if (reassdatagrams == ipr) {
 8004900:	6813      	ldr	r3, [r2, #0]
 8004902:	429e      	cmp	r6, r3
 8004904:	6833      	ldr	r3, [r6, #0]
    prev->next = ipr->next;
 8004906:	bf14      	ite	ne
 8004908:	603b      	strne	r3, [r7, #0]
    reassdatagrams = ipr->next;
 800490a:	6013      	streq	r3, [r2, #0]
  memp_free(MEMP_REASSDATA, ipr);
 800490c:	f000 fbcc 	bl	80050a8 <memp_free>
  ip_reass_pbufcount -= pbufs_freed;
 8004910:	4a0a      	ldr	r2, [pc, #40]	; (800493c <ip_reass_free_complete_datagram+0x50>)
}
 8004912:	4620      	mov	r0, r4
  ip_reass_pbufcount -= pbufs_freed;
 8004914:	8813      	ldrh	r3, [r2, #0]
 8004916:	1b1b      	subs	r3, r3, r4
 8004918:	8013      	strh	r3, [r2, #0]
}
 800491a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    iprh = (struct ip_reass_helper *)p->payload;
 800491e:	686b      	ldr	r3, [r5, #4]
    clen = pbuf_clen(pcur);
 8004920:	4628      	mov	r0, r5
    p = iprh->next_pbuf;
 8004922:	f8d3 8000 	ldr.w	r8, [r3]
    clen = pbuf_clen(pcur);
 8004926:	f000 fdb4 	bl	8005492 <pbuf_clen>
    pbufs_freed += clen;
 800492a:	4404      	add	r4, r0
    pbuf_free(pcur);
 800492c:	4628      	mov	r0, r5
 800492e:	f000 fcd3 	bl	80052d8 <pbuf_free>
    p = iprh->next_pbuf;
 8004932:	4645      	mov	r5, r8
    pbufs_freed += clen;
 8004934:	b2a4      	uxth	r4, r4
 8004936:	e7df      	b.n	80048f8 <ip_reass_free_complete_datagram+0xc>
 8004938:	2000030c 	.word	0x2000030c
 800493c:	20000308 	.word	0x20000308

08004940 <ip_reass_remove_oldest_datagram>:
{
 8004940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004944:	4606      	mov	r6, r0
 8004946:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8004948:	2500      	movs	r5, #0
    r = reassdatagrams;
 800494a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80049b4 <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 800494e:	2400      	movs	r4, #0
    r = reassdatagrams;
 8004950:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 8004954:	4621      	mov	r1, r4
    prev = NULL;
 8004956:	46a6      	mov	lr, r4
    oldest = NULL;
 8004958:	4620      	mov	r0, r4
    while (r != NULL) {
 800495a:	b953      	cbnz	r3, 8004972 <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 800495c:	b110      	cbz	r0, 8004964 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800495e:	f7ff ffc5 	bl	80048ec <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8004962:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8004964:	42bd      	cmp	r5, r7
 8004966:	da01      	bge.n	800496c <ip_reass_remove_oldest_datagram+0x2c>
 8004968:	2c01      	cmp	r4, #1
 800496a:	dcf0      	bgt.n	800494e <ip_reass_remove_oldest_datagram+0xe>
}
 800496c:	4628      	mov	r0, r5
 800496e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8004972:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8004976:	695a      	ldr	r2, [r3, #20]
 8004978:	4562      	cmp	r2, ip
 800497a:	d109      	bne.n	8004990 <ip_reass_remove_oldest_datagram+0x50>
 800497c:	f8d6 c010 	ldr.w	ip, [r6, #16]
 8004980:	699a      	ldr	r2, [r3, #24]
 8004982:	4562      	cmp	r2, ip
 8004984:	d104      	bne.n	8004990 <ip_reass_remove_oldest_datagram+0x50>
 8004986:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 800498a:	88b2      	ldrh	r2, [r6, #4]
 800498c:	4594      	cmp	ip, r2
 800498e:	d008      	beq.n	80049a2 <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8004990:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8004992:	b160      	cbz	r0, 80049ae <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 8004994:	7fc2      	ldrb	r2, [r0, #31]
 8004996:	f893 c01f 	ldrb.w	ip, [r3, #31]
          oldest_prev = prev;
 800499a:	4594      	cmp	ip, r2
 800499c:	bf9c      	itt	ls
 800499e:	4671      	movls	r1, lr
 80049a0:	4618      	movls	r0, r3
      if (r->next != NULL) {
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	2a00      	cmp	r2, #0
 80049a6:	bf18      	it	ne
 80049a8:	469e      	movne	lr, r3
 80049aa:	4613      	mov	r3, r2
 80049ac:	e7d5      	b.n	800495a <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 80049ae:	4671      	mov	r1, lr
 80049b0:	4618      	mov	r0, r3
 80049b2:	e7f6      	b.n	80049a2 <ip_reass_remove_oldest_datagram+0x62>
 80049b4:	2000030c 	.word	0x2000030c

080049b8 <ip_reass_tmr>:
{
 80049b8:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 80049ba:	4b08      	ldr	r3, [pc, #32]	; (80049dc <ip_reass_tmr+0x24>)
  struct ip_reassdata *r, *prev = NULL;
 80049bc:	2400      	movs	r4, #0
  r = reassdatagrams;
 80049be:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 80049c0:	b900      	cbnz	r0, 80049c4 <ip_reass_tmr+0xc>
}
 80049c2:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 80049c4:	7fc3      	ldrb	r3, [r0, #31]
 80049c6:	6805      	ldr	r5, [r0, #0]
 80049c8:	b123      	cbz	r3, 80049d4 <ip_reass_tmr+0x1c>
      r->timer--;
 80049ca:	3b01      	subs	r3, #1
 80049cc:	4604      	mov	r4, r0
 80049ce:	77c3      	strb	r3, [r0, #31]
      r = r->next;
 80049d0:	4628      	mov	r0, r5
 80049d2:	e7f5      	b.n	80049c0 <ip_reass_tmr+0x8>
      ip_reass_free_complete_datagram(tmp, prev);
 80049d4:	4621      	mov	r1, r4
 80049d6:	f7ff ff89 	bl	80048ec <ip_reass_free_complete_datagram>
 80049da:	e7f9      	b.n	80049d0 <ip_reass_tmr+0x18>
 80049dc:	2000030c 	.word	0x2000030c

080049e0 <ip4_reass>:
{
 80049e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 80049e4:	6844      	ldr	r4, [r0, #4]
{
 80049e6:	4605      	mov	r5, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 80049e8:	7823      	ldrb	r3, [r4, #0]
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	2b05      	cmp	r3, #5
 80049f0:	f040 808b 	bne.w	8004b0a <ip4_reass+0x12a>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80049f4:	88e0      	ldrh	r0, [r4, #6]
 80049f6:	f7ff fb32 	bl	800405e <lwip_htons>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80049fa:	4ea9      	ldr	r6, [pc, #676]	; (8004ca0 <ip4_reass+0x2c0>)
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80049fc:	9001      	str	r0, [sp, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80049fe:	8860      	ldrh	r0, [r4, #2]
 8004a00:	f7ff fb2d 	bl	800405e <lwip_htons>
 8004a04:	4683      	mov	fp, r0
  clen = pbuf_clen(p);
 8004a06:	4628      	mov	r0, r5
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8004a08:	f894 8000 	ldrb.w	r8, [r4]
  clen = pbuf_clen(p);
 8004a0c:	f000 fd41 	bl	8005492 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8004a10:	8833      	ldrh	r3, [r6, #0]
  clen = pbuf_clen(p);
 8004a12:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8004a14:	4403      	add	r3, r0
 8004a16:	2b0a      	cmp	r3, #10
 8004a18:	dc6e      	bgt.n	8004af8 <ip4_reass+0x118>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8004a1a:	4fa2      	ldr	r7, [pc, #648]	; (8004ca4 <ip4_reass+0x2c4>)
 8004a1c:	f8d7 a000 	ldr.w	sl, [r7]
 8004a20:	f1ba 0f00 	cmp.w	sl, #0
 8004a24:	d176      	bne.n	8004b14 <ip4_reass+0x134>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8004a26:	2004      	movs	r0, #4
 8004a28:	f000 fb2e 	bl	8005088 <memp_malloc>
  if (ipr == NULL) {
 8004a2c:	4682      	mov	sl, r0
 8004a2e:	b958      	cbnz	r0, 8004a48 <ip4_reass+0x68>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8004a30:	4649      	mov	r1, r9
 8004a32:	4620      	mov	r0, r4
 8004a34:	f7ff ff84 	bl	8004940 <ip_reass_remove_oldest_datagram>
 8004a38:	4581      	cmp	r9, r0
 8004a3a:	dc66      	bgt.n	8004b0a <ip4_reass+0x12a>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8004a3c:	2004      	movs	r0, #4
 8004a3e:	f000 fb23 	bl	8005088 <memp_malloc>
    if (ipr == NULL)
 8004a42:	4682      	mov	sl, r0
 8004a44:	2800      	cmp	r0, #0
 8004a46:	d060      	beq.n	8004b0a <ip4_reass+0x12a>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8004a48:	2220      	movs	r2, #32
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	4650      	mov	r0, sl
 8004a4e:	f006 fd3b 	bl	800b4c8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8004a52:	2203      	movs	r2, #3
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8004a54:	f10a 0108 	add.w	r1, sl, #8
 8004a58:	f104 0014 	add.w	r0, r4, #20
  ipr->timer = IP_REASS_MAXAGE;
 8004a5c:	f88a 201f 	strb.w	r2, [sl, #31]
  ipr->next = reassdatagrams;
 8004a60:	683a      	ldr	r2, [r7, #0]
  reassdatagrams = ipr;
 8004a62:	f8c7 a000 	str.w	sl, [r7]
  ipr->next = reassdatagrams;
 8004a66:	f8ca 2000 	str.w	r2, [sl]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8004a6a:	4622      	mov	r2, r4
 8004a6c:	f852 eb04 	ldr.w	lr, [r2], #4
 8004a70:	4282      	cmp	r2, r0
 8004a72:	f841 eb04 	str.w	lr, [r1], #4
 8004a76:	d1f9      	bne.n	8004a6c <ip4_reass+0x8c>
  ip_reass_pbufcount += clen;
 8004a78:	8832      	ldrh	r2, [r6, #0]
 8004a7a:	4491      	add	r9, r2
 8004a7c:	f8a6 9000 	strh.w	r9, [r6]
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
 8004a80:	88e2      	ldrh	r2, [r4, #6]
 8004a82:	0693      	lsls	r3, r2, #26
 8004a84:	d40e      	bmi.n	8004aa4 <ip4_reass+0xc4>
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8004a86:	f008 080f 	and.w	r8, r8, #15
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8004a8a:	f89a 201e 	ldrb.w	r2, [sl, #30]
    ipr->datagram_len = offset + len;
 8004a8e:	9b01      	ldr	r3, [sp, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8004a90:	ebab 0b88 	sub.w	fp, fp, r8, lsl #2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8004a94:	f042 0201 	orr.w	r2, r2, #1
    ipr->datagram_len = offset + len;
 8004a98:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8004a9c:	f88a 201e 	strb.w	r2, [sl, #30]
    ipr->datagram_len = offset + len;
 8004aa0:	f8aa 301c 	strh.w	r3, [sl, #28]
  fraghdr = (struct ip_hdr*)new_p->payload;
 8004aa4:	f8d5 8004 	ldr.w	r8, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8004aa8:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8004aac:	f7ff fad7 	bl	800405e <lwip_htons>
 8004ab0:	f898 4000 	ldrb.w	r4, [r8]
 8004ab4:	f004 040f 	and.w	r4, r4, #15
 8004ab8:	eba0 0484 	sub.w	r4, r0, r4, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8004abc:	f8b8 0006 	ldrh.w	r0, [r8, #6]
 8004ac0:	f7ff facd 	bl	800405e <lwip_htons>
 8004ac4:	f3c0 000c 	ubfx	r0, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8004ac8:	b2a4      	uxth	r4, r4
  iprh = (struct ip_reass_helper*)new_p->payload;
 8004aca:	6869      	ldr	r1, [r5, #4]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8004acc:	00c0      	lsls	r0, r0, #3
  iprh->next_pbuf = NULL;
 8004ace:	2200      	movs	r2, #0
  for (q = ipr->p; q != NULL;) {
 8004ad0:	f8da c004 	ldr.w	ip, [sl, #4]
  int valid = 1;
 8004ad4:	2301      	movs	r3, #1
  iprh->end = offset + len;
 8004ad6:	4404      	add	r4, r0
  iprh->next_pbuf = NULL;
 8004ad8:	700a      	strb	r2, [r1, #0]
 8004ada:	704a      	strb	r2, [r1, #1]
  iprh->end = offset + len;
 8004adc:	b2a4      	uxth	r4, r4
  iprh->next_pbuf = NULL;
 8004ade:	708a      	strb	r2, [r1, #2]
 8004ae0:	70ca      	strb	r2, [r1, #3]
  iprh->start = offset;
 8004ae2:	8088      	strh	r0, [r1, #4]
  iprh->end = offset + len;
 8004ae4:	80cc      	strh	r4, [r1, #6]
  for (q = ipr->p; q != NULL;) {
 8004ae6:	f1bc 0f00 	cmp.w	ip, #0
 8004aea:	d126      	bne.n	8004b3a <ip4_reass+0x15a>
    if (iprh_prev != NULL) {
 8004aec:	2a00      	cmp	r2, #0
 8004aee:	f040 8088 	bne.w	8004c02 <ip4_reass+0x222>
      ipr->p = new_p;
 8004af2:	f8ca 5004 	str.w	r5, [sl, #4]
 8004af6:	e031      	b.n	8004b5c <ip4_reass+0x17c>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8004af8:	4601      	mov	r1, r0
 8004afa:	4620      	mov	r0, r4
 8004afc:	f7ff ff20 	bl	8004940 <ip_reass_remove_oldest_datagram>
 8004b00:	b118      	cbz	r0, 8004b0a <ip4_reass+0x12a>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8004b02:	8833      	ldrh	r3, [r6, #0]
 8004b04:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8004b06:	2b0a      	cmp	r3, #10
 8004b08:	dd87      	ble.n	8004a1a <ip4_reass+0x3a>
  pbuf_free(p);
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f000 fbe4 	bl	80052d8 <pbuf_free>
  return NULL;
 8004b10:	2400      	movs	r4, #0
 8004b12:	e064      	b.n	8004bde <ip4_reass+0x1fe>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8004b14:	68e2      	ldr	r2, [r4, #12]
 8004b16:	f8da 1014 	ldr.w	r1, [sl, #20]
 8004b1a:	4291      	cmp	r1, r2
 8004b1c:	d10a      	bne.n	8004b34 <ip4_reass+0x154>
 8004b1e:	6922      	ldr	r2, [r4, #16]
 8004b20:	f8da 1018 	ldr.w	r1, [sl, #24]
 8004b24:	4291      	cmp	r1, r2
 8004b26:	d105      	bne.n	8004b34 <ip4_reass+0x154>
 8004b28:	f8ba 100c 	ldrh.w	r1, [sl, #12]
 8004b2c:	88a2      	ldrh	r2, [r4, #4]
 8004b2e:	4291      	cmp	r1, r2
 8004b30:	f000 8095 	beq.w	8004c5e <ip4_reass+0x27e>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8004b34:	f8da a000 	ldr.w	sl, [sl]
 8004b38:	e772      	b.n	8004a20 <ip4_reass+0x40>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8004b3a:	f8dc 8004 	ldr.w	r8, [ip, #4]
    if (iprh->start < iprh_tmp->start) {
 8004b3e:	f8b8 9004 	ldrh.w	r9, [r8, #4]
 8004b42:	4548      	cmp	r0, r9
 8004b44:	d24f      	bcs.n	8004be6 <ip4_reass+0x206>
      iprh->next_pbuf = q;
 8004b46:	f8c1 c000 	str.w	ip, [r1]
      if (iprh_prev != NULL) {
 8004b4a:	2a00      	cmp	r2, #0
 8004b4c:	d0d1      	beq.n	8004af2 <ip4_reass+0x112>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8004b4e:	f8b2 c006 	ldrh.w	ip, [r2, #6]
 8004b52:	4584      	cmp	ip, r0
 8004b54:	d864      	bhi.n	8004c20 <ip4_reass+0x240>
 8004b56:	454c      	cmp	r4, r9
 8004b58:	d862      	bhi.n	8004c20 <ip4_reass+0x240>
        iprh_prev->next_pbuf = new_p;
 8004b5a:	6015      	str	r5, [r2, #0]
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
 8004b5c:	f89a 201e 	ldrb.w	r2, [sl, #30]
 8004b60:	f012 0401 	ands.w	r4, r2, #1
 8004b64:	d03b      	beq.n	8004bde <ip4_reass+0x1fe>
    if (valid) {
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0d2      	beq.n	8004b10 <ip4_reass+0x130>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8004b6a:	f8da 4004 	ldr.w	r4, [sl, #4]
 8004b6e:	2c00      	cmp	r4, #0
 8004b70:	d035      	beq.n	8004bde <ip4_reass+0x1fe>
 8004b72:	6864      	ldr	r4, [r4, #4]
 8004b74:	88a2      	ldrh	r2, [r4, #4]
 8004b76:	2a00      	cmp	r2, #0
 8004b78:	d1ca      	bne.n	8004b10 <ip4_reass+0x130>
        q = iprh->next_pbuf;
 8004b7a:	680a      	ldr	r2, [r1, #0]
        while (q != NULL) {
 8004b7c:	2a00      	cmp	r2, #0
 8004b7e:	d146      	bne.n	8004c0e <ip4_reass+0x22e>
    ipr->datagram_len += IP_HLEN;
 8004b80:	f8ba 201c 	ldrh.w	r2, [sl, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8004b84:	4621      	mov	r1, r4
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8004b86:	6825      	ldr	r5, [r4, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8004b88:	f10a 001c 	add.w	r0, sl, #28
    ipr->datagram_len += IP_HLEN;
 8004b8c:	3214      	adds	r2, #20
 8004b8e:	f8aa 201c 	strh.w	r2, [sl, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8004b92:	f10a 0208 	add.w	r2, sl, #8
 8004b96:	f852 eb04 	ldr.w	lr, [r2], #4
 8004b9a:	4282      	cmp	r2, r0
 8004b9c:	f841 eb04 	str.w	lr, [r1], #4
 8004ba0:	d1f9      	bne.n	8004b96 <ip4_reass+0x1b6>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8004ba2:	f8ba 001c 	ldrh.w	r0, [sl, #28]
 8004ba6:	f7ff fa5a 	bl	800405e <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8004baa:	2200      	movs	r2, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8004bac:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8004bae:	71a2      	strb	r2, [r4, #6]
 8004bb0:	71e2      	strb	r2, [r4, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8004bb2:	72a2      	strb	r2, [r4, #10]
 8004bb4:	72e2      	strb	r2, [r4, #11]
    p = ipr->p;
 8004bb6:	f8da 4004 	ldr.w	r4, [sl, #4]
    while (r != NULL) {
 8004bba:	2d00      	cmp	r5, #0
 8004bbc:	d137      	bne.n	8004c2e <ip4_reass+0x24e>
    if (ipr == reassdatagrams) {
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	4592      	cmp	sl, r2
 8004bc2:	d146      	bne.n	8004c52 <ip4_reass+0x272>
    reassdatagrams = ipr->next;
 8004bc4:	f8da 2000 	ldr.w	r2, [sl]
 8004bc8:	603a      	str	r2, [r7, #0]
  memp_free(MEMP_REASSDATA, ipr);
 8004bca:	4651      	mov	r1, sl
 8004bcc:	2004      	movs	r0, #4
 8004bce:	f000 fa6b 	bl	80050a8 <memp_free>
    ip_reass_pbufcount -= pbuf_clen(p);
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f000 fc5d 	bl	8005492 <pbuf_clen>
 8004bd8:	8833      	ldrh	r3, [r6, #0]
 8004bda:	1a18      	subs	r0, r3, r0
 8004bdc:	8030      	strh	r0, [r6, #0]
}
 8004bde:	4620      	mov	r0, r4
 8004be0:	b003      	add	sp, #12
 8004be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (iprh->start == iprh_tmp->start) {
 8004be6:	d01b      	beq.n	8004c20 <ip4_reass+0x240>
    } else if (iprh->start < iprh_tmp->end) {
 8004be8:	f8b8 c006 	ldrh.w	ip, [r8, #6]
 8004bec:	4584      	cmp	ip, r0
 8004bee:	d817      	bhi.n	8004c20 <ip4_reass+0x240>
      if (iprh_prev != NULL) {
 8004bf0:	b11a      	cbz	r2, 8004bfa <ip4_reass+0x21a>
        if (iprh_prev->end != iprh_tmp->start) {
 8004bf2:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 8004bf4:	454a      	cmp	r2, r9
 8004bf6:	bf18      	it	ne
 8004bf8:	2300      	movne	r3, #0
    q = iprh_tmp->next_pbuf;
 8004bfa:	f8d8 c000 	ldr.w	ip, [r8]
 8004bfe:	4642      	mov	r2, r8
 8004c00:	e771      	b.n	8004ae6 <ip4_reass+0x106>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8004c02:	88d4      	ldrh	r4, [r2, #6]
      iprh_prev->next_pbuf = new_p;
 8004c04:	6015      	str	r5, [r2, #0]
        valid = 0;
 8004c06:	42a0      	cmp	r0, r4
 8004c08:	bf18      	it	ne
 8004c0a:	2300      	movne	r3, #0
 8004c0c:	e7a6      	b.n	8004b5c <ip4_reass+0x17c>
          iprh = (struct ip_reass_helper*)q->payload;
 8004c0e:	6850      	ldr	r0, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 8004c10:	88c9      	ldrh	r1, [r1, #6]
 8004c12:	8882      	ldrh	r2, [r0, #4]
 8004c14:	4291      	cmp	r1, r2
 8004c16:	f47f af7b 	bne.w	8004b10 <ip4_reass+0x130>
          q = iprh->next_pbuf;
 8004c1a:	6802      	ldr	r2, [r0, #0]
 8004c1c:	4601      	mov	r1, r0
 8004c1e:	e7ad      	b.n	8004b7c <ip4_reass+0x19c>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8004c20:	4628      	mov	r0, r5
 8004c22:	f000 fc36 	bl	8005492 <pbuf_clen>
 8004c26:	8833      	ldrh	r3, [r6, #0]
 8004c28:	1a18      	subs	r0, r3, r0
 8004c2a:	8030      	strh	r0, [r6, #0]
 8004c2c:	e76d      	b.n	8004b0a <ip4_reass+0x12a>
      iprh = (struct ip_reass_helper*)r->payload;
 8004c2e:	f8d5 8004 	ldr.w	r8, [r5, #4]
      pbuf_header(r, -IP_HLEN);
 8004c32:	f06f 0113 	mvn.w	r1, #19
 8004c36:	4628      	mov	r0, r5
 8004c38:	f000 fb47 	bl	80052ca <pbuf_header>
      pbuf_cat(p, r);
 8004c3c:	4629      	mov	r1, r5
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f000 fc34 	bl	80054ac <pbuf_cat>
      r = iprh->next_pbuf;
 8004c44:	f8d8 5000 	ldr.w	r5, [r8]
 8004c48:	e7b7      	b.n	8004bba <ip4_reass+0x1da>
        if (ipr_prev->next == ipr) {
 8004c4a:	6811      	ldr	r1, [r2, #0]
 8004c4c:	458a      	cmp	sl, r1
 8004c4e:	d023      	beq.n	8004c98 <ip4_reass+0x2b8>
 8004c50:	460a      	mov	r2, r1
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8004c52:	2a00      	cmp	r2, #0
 8004c54:	d1f9      	bne.n	8004c4a <ip4_reass+0x26a>
    prev->next = ipr->next;
 8004c56:	f8da 3000 	ldr.w	r3, [sl]
 8004c5a:	6013      	str	r3, [r2, #0]
 8004c5c:	deff      	udf	#255	; 0xff
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8004c5e:	88e0      	ldrh	r0, [r4, #6]
 8004c60:	f7ff f9fd 	bl	800405e <lwip_htons>
 8004c64:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8004c68:	2800      	cmp	r0, #0
 8004c6a:	f47f af05 	bne.w	8004a78 <ip4_reass+0x98>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8004c6e:	f8ba 000e 	ldrh.w	r0, [sl, #14]
 8004c72:	f7ff f9f4 	bl	800405e <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8004c76:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8004c7a:	2800      	cmp	r0, #0
 8004c7c:	f43f aefc 	beq.w	8004a78 <ip4_reass+0x98>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8004c80:	4622      	mov	r2, r4
 8004c82:	f10a 0108 	add.w	r1, sl, #8
 8004c86:	f104 0014 	add.w	r0, r4, #20
 8004c8a:	f852 eb04 	ldr.w	lr, [r2], #4
 8004c8e:	4282      	cmp	r2, r0
 8004c90:	f841 eb04 	str.w	lr, [r1], #4
 8004c94:	d1f9      	bne.n	8004c8a <ip4_reass+0x2aa>
 8004c96:	e6ef      	b.n	8004a78 <ip4_reass+0x98>
    prev->next = ipr->next;
 8004c98:	f8da 1000 	ldr.w	r1, [sl]
 8004c9c:	6011      	str	r1, [r2, #0]
 8004c9e:	e794      	b.n	8004bca <ip4_reass+0x1ea>
 8004ca0:	20000308 	.word	0x20000308
 8004ca4:	2000030c 	.word	0x2000030c

08004ca8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8004ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8004cac:	f8b1 8022 	ldrh.w	r8, [r1, #34]	; 0x22
 8004cb0:	2308      	movs	r3, #8
{
 8004cb2:	b08b      	sub	sp, #44	; 0x2c
 8004cb4:	4607      	mov	r7, r0
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8004cb6:	f1a8 0814 	sub.w	r8, r8, #20
{
 8004cba:	468b      	mov	fp, r1
 8004cbc:	9208      	str	r2, [sp, #32]
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8004cbe:	fb98 f8f3 	sdiv	r8, r8, r3
 8004cc2:	fa1f f388 	uxth.w	r3, r8
 8004cc6:	9306      	str	r3, [sp, #24]
#if !LWIP_NETIF_TX_SINGLE_PBUF
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif

  original_iphdr = (struct ip_hdr *)p->payload;
 8004cc8:	6843      	ldr	r3, [r0, #4]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8004cca:	781e      	ldrb	r6, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 8004ccc:	9302      	str	r3, [sp, #8]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8004cce:	f006 060f 	and.w	r6, r6, #15
 8004cd2:	00b6      	lsls	r6, r6, #2
 8004cd4:	2e14      	cmp	r6, #20
 8004cd6:	d004      	beq.n	8004ce2 <ip4_frag+0x3a>
 8004cd8:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 8004cdc:	b00b      	add	sp, #44	; 0x2c
 8004cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8004ce2:	9b02      	ldr	r3, [sp, #8]
 8004ce4:	88d8      	ldrh	r0, [r3, #6]
 8004ce6:	f7ff f9ba 	bl	800405e <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8004cea:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8004cee:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 8004cf2:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8004cf4:	d1f0      	bne.n	8004cd8 <ip4_frag+0x30>
  left = p->tot_len - IP_HLEN;
 8004cf6:	893d      	ldrh	r5, [r7, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 8004cf8:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 8004cfc:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 8004cfe:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 8004d02:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 8004d04:	9307      	str	r3, [sp, #28]
  while (left) {
 8004d06:	b90d      	cbnz	r5, 8004d0c <ip4_frag+0x64>
  return ERR_OK;
 8004d08:	4628      	mov	r0, r5
 8004d0a:	e7e7      	b.n	8004cdc <ip4_frag+0x34>
    fragsize = LWIP_MIN(left, nfb * 8);
 8004d0c:	9b07      	ldr	r3, [sp, #28]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8004d0e:	2200      	movs	r2, #0
 8004d10:	2114      	movs	r1, #20
 8004d12:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 8004d14:	42ab      	cmp	r3, r5
 8004d16:	bfa8      	it	ge
 8004d18:	462b      	movge	r3, r5
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8004d1e:	f000 fb03 	bl	8005328 <pbuf_alloc>
    if (rambuf == NULL) {
 8004d22:	4680      	mov	r8, r0
 8004d24:	b318      	cbz	r0, 8004d6e <ip4_frag+0xc6>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8004d26:	9b02      	ldr	r3, [sp, #8]
 8004d28:	6842      	ldr	r2, [r0, #4]
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	3114      	adds	r1, #20
 8004d2e:	f853 0b04 	ldr.w	r0, [r3], #4
 8004d32:	428b      	cmp	r3, r1
 8004d34:	f842 0b04 	str.w	r0, [r2], #4
 8004d38:	d1f9      	bne.n	8004d2e <ip4_frag+0x86>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8004d3a:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 8004d3e:	f8dd 9014 	ldr.w	r9, [sp, #20]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8004d42:	9303      	str	r3, [sp, #12]
    while (left_to_copy) {
 8004d44:	f1b9 0f00 	cmp.w	r9, #0
 8004d48:	d038      	beq.n	8004dbc <ip4_frag+0x114>
      u16_t plen = p->len - poff;
 8004d4a:	897c      	ldrh	r4, [r7, #10]
 8004d4c:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8004d4e:	b2a4      	uxth	r4, r4
 8004d50:	454c      	cmp	r4, r9
 8004d52:	bf28      	it	cs
 8004d54:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 8004d56:	b914      	cbnz	r4, 8004d5e <ip4_frag+0xb6>
        p = p->next;
 8004d58:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 8004d5a:	2600      	movs	r6, #0
 8004d5c:	e7f2      	b.n	8004d44 <ip4_frag+0x9c>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8004d5e:	2005      	movs	r0, #5
 8004d60:	f000 f992 	bl	8005088 <memp_malloc>
      if (pcr == NULL) {
 8004d64:	4682      	mov	sl, r0
 8004d66:	b928      	cbnz	r0, 8004d74 <ip4_frag+0xcc>
        pbuf_free(rambuf);
 8004d68:	4640      	mov	r0, r8
 8004d6a:	f000 fab5 	bl	80052d8 <pbuf_free>
  return ERR_MEM;
 8004d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d72:	e7b3      	b.n	8004cdc <ip4_frag+0x34>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8004d74:	9401      	str	r4, [sp, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	4433      	add	r3, r6
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	4603      	mov	r3, r0
 8004d82:	2004      	movs	r0, #4
 8004d84:	f000 fa76 	bl	8005274 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8004d88:	b920      	cbnz	r0, 8004d94 <ip4_frag+0xec>
  memp_free(MEMP_FRAG_PBUF, p);
 8004d8a:	4651      	mov	r1, sl
 8004d8c:	2005      	movs	r0, #5
 8004d8e:	f000 f98b 	bl	80050a8 <memp_free>
 8004d92:	e7e9      	b.n	8004d68 <ip4_frag+0xc0>
 8004d94:	9009      	str	r0, [sp, #36]	; 0x24
      left_to_copy -= newpbuflen;
 8004d96:	eba9 0904 	sub.w	r9, r9, r4
      pbuf_ref(p);
 8004d9a:	4638      	mov	r0, r7
 8004d9c:	f000 fb81 	bl	80054a2 <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8004da0:	4b1d      	ldr	r3, [pc, #116]	; (8004e18 <ip4_frag+0x170>)
      left_to_copy -= newpbuflen;
 8004da2:	fa1f f989 	uxth.w	r9, r9
      pcr->original = p;
 8004da6:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8004daa:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 8004dae:	4640      	mov	r0, r8
 8004db0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004db2:	f000 fb7b 	bl	80054ac <pbuf_cat>
      if (left_to_copy) {
 8004db6:	f1b9 0f00 	cmp.w	r9, #0
 8004dba:	d1cd      	bne.n	8004d58 <ip4_frag+0xb0>
    tmp = (IP_OFFMASK & (ofo));
 8004dbc:	9b04      	ldr	r3, [sp, #16]
    poff += newpbuflen;
 8004dbe:	4426      	add	r6, r4
    tmp = (IP_OFFMASK & (ofo));
 8004dc0:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8004dc4:	f8bb 3022 	ldrh.w	r3, [fp, #34]	; 0x22
    poff += newpbuflen;
 8004dc8:	b2b6      	uxth	r6, r6
    last = (left <= netif->mtu - IP_HLEN);
 8004dca:	3b13      	subs	r3, #19
    if (!last) {
 8004dcc:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 8004dce:	bfa8      	it	ge
 8004dd0:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8004dd4:	f7ff f943 	bl	800405e <lwip_htons>
 8004dd8:	9b03      	ldr	r3, [sp, #12]
 8004dda:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8004ddc:	9b05      	ldr	r3, [sp, #20]
 8004dde:	f103 0014 	add.w	r0, r3, #20
 8004de2:	b280      	uxth	r0, r0
 8004de4:	f7ff f93b 	bl	800405e <lwip_htons>
 8004de8:	9b03      	ldr	r3, [sp, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 8004dea:	f04f 0200 	mov.w	r2, #0
    netif->output(netif, rambuf, dest);
 8004dee:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8004df0:	8058      	strh	r0, [r3, #2]
    netif->output(netif, rambuf, dest);
 8004df2:	4658      	mov	r0, fp
    IPH_CHKSUM_SET(iphdr, 0);
 8004df4:	729a      	strb	r2, [r3, #10]
 8004df6:	72da      	strb	r2, [r3, #11]
    netif->output(netif, rambuf, dest);
 8004df8:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004dfc:	9a08      	ldr	r2, [sp, #32]
 8004dfe:	4798      	blx	r3
    pbuf_free(rambuf);
 8004e00:	4640      	mov	r0, r8
 8004e02:	f000 fa69 	bl	80052d8 <pbuf_free>
    left -= fragsize;
 8004e06:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 8004e08:	9a06      	ldr	r2, [sp, #24]
    left -= fragsize;
 8004e0a:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 8004e0c:	9b04      	ldr	r3, [sp, #16]
 8004e0e:	4413      	add	r3, r2
    left -= fragsize;
 8004e10:	b2ad      	uxth	r5, r5
    ofo += nfb;
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	9304      	str	r3, [sp, #16]
 8004e16:	e776      	b.n	8004d06 <ip4_frag+0x5e>
 8004e18:	080048d5 	.word	0x080048d5

08004e1c <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004e1c:	4b0a      	ldr	r3, [pc, #40]	; (8004e48 <mem_init+0x2c>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8004e1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004e22:	4a0a      	ldr	r2, [pc, #40]	; (8004e4c <mem_init+0x30>)
 8004e24:	f023 0303 	bic.w	r3, r3, #3
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8004e28:	4809      	ldr	r0, [pc, #36]	; (8004e50 <mem_init+0x34>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004e2a:	6013      	str	r3, [r2, #0]
  mem->prev = 0;
 8004e2c:	2200      	movs	r2, #0
  mem->next = MEM_SIZE_ALIGNED;
 8004e2e:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
 8004e30:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004e32:	711a      	strb	r2, [r3, #4]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8004e34:	185a      	adds	r2, r3, r1
 8004e36:	6002      	str	r2, [r0, #0]
  ram_end->used = 1;
 8004e38:	2001      	movs	r0, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 8004e3a:	8011      	strh	r1, [r2, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004e3c:	8051      	strh	r1, [r2, #2]
  ram_end->used = 1;
 8004e3e:	7110      	strb	r0, [r2, #4]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004e40:	4a04      	ldr	r2, [pc, #16]	; (8004e54 <mem_init+0x38>)
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	20000413 	.word	0x20000413
 8004e4c:	20000314 	.word	0x20000314
 8004e50:	20000318 	.word	0x20000318
 8004e54:	20000310 	.word	0x20000310

08004e58 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004e58:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	d039      	beq.n	8004ed2 <mem_free+0x7a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004e5e:	4b1d      	ldr	r3, [pc, #116]	; (8004ed4 <mem_free+0x7c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004e62:	4298      	cmp	r0, r3
 8004e64:	d335      	bcc.n	8004ed2 <mem_free+0x7a>
 8004e66:	4a1c      	ldr	r2, [pc, #112]	; (8004ed8 <mem_free+0x80>)
 8004e68:	6815      	ldr	r5, [r2, #0]
 8004e6a:	42a8      	cmp	r0, r5
 8004e6c:	d231      	bcs.n	8004ed2 <mem_free+0x7a>
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
 8004e6e:	2200      	movs	r2, #0
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004e70:	f1a0 0608 	sub.w	r6, r0, #8
  nmem = (struct mem *)(void *)&ram[mem->next];
 8004e74:	f830 4c08 	ldrh.w	r4, [r0, #-8]
  mem->used = 0;
 8004e78:	f800 2c04 	strb.w	r2, [r0, #-4]

  if (mem < lfree) {
 8004e7c:	4a17      	ldr	r2, [pc, #92]	; (8004edc <mem_free+0x84>)
 8004e7e:	6811      	ldr	r1, [r2, #0]
 8004e80:	428e      	cmp	r6, r1
  nmem = (struct mem *)(void *)&ram[mem->next];
 8004e82:	eb03 0104 	add.w	r1, r3, r4
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004e86:	bf38      	it	cc
 8004e88:	6016      	strcc	r6, [r2, #0]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004e8a:	428e      	cmp	r6, r1
 8004e8c:	d00f      	beq.n	8004eae <mem_free+0x56>
 8004e8e:	790f      	ldrb	r7, [r1, #4]
 8004e90:	b96f      	cbnz	r7, 8004eae <mem_free+0x56>
 8004e92:	428d      	cmp	r5, r1
 8004e94:	d00b      	beq.n	8004eae <mem_free+0x56>
    if (lfree == nmem) {
 8004e96:	6815      	ldr	r5, [r2, #0]
 8004e98:	42a9      	cmp	r1, r5
    mem->next = nmem->next;
 8004e9a:	5b19      	ldrh	r1, [r3, r4]
 8004e9c:	f820 1c08 	strh.w	r1, [r0, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8004ea0:	5b19      	ldrh	r1, [r3, r4]
 8004ea2:	eba6 0403 	sub.w	r4, r6, r3
      lfree = mem;
 8004ea6:	bf08      	it	eq
 8004ea8:	6016      	streq	r6, [r2, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8004eaa:	4419      	add	r1, r3
 8004eac:	804c      	strh	r4, [r1, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8004eae:	f830 1c06 	ldrh.w	r1, [r0, #-6]
 8004eb2:	185c      	adds	r4, r3, r1
  if (pmem != mem && pmem->used == 0) {
 8004eb4:	42a6      	cmp	r6, r4
 8004eb6:	d00c      	beq.n	8004ed2 <mem_free+0x7a>
 8004eb8:	7925      	ldrb	r5, [r4, #4]
 8004eba:	b955      	cbnz	r5, 8004ed2 <mem_free+0x7a>
    if (lfree == mem) {
 8004ebc:	6815      	ldr	r5, [r2, #0]
 8004ebe:	42ae      	cmp	r6, r5
      lfree = pmem;
 8004ec0:	bf08      	it	eq
 8004ec2:	6014      	streq	r4, [r2, #0]
    pmem->next = mem->next;
 8004ec4:	f830 2c08 	ldrh.w	r2, [r0, #-8]
 8004ec8:	525a      	strh	r2, [r3, r1]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8004eca:	f830 2c08 	ldrh.w	r2, [r0, #-8]
 8004ece:	4413      	add	r3, r2
 8004ed0:	8059      	strh	r1, [r3, #2]
 8004ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ed4:	20000314 	.word	0x20000314
 8004ed8:	20000318 	.word	0x20000318
 8004edc:	20000310 	.word	0x20000310

08004ee0 <mem_trim>:
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8004ee0:	3103      	adds	r1, #3
 8004ee2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8004ee6:	400b      	ands	r3, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 8004ee8:	2b0b      	cmp	r3, #11
{
 8004eea:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (newsize < MIN_SIZE_ALIGNED) {
 8004eec:	d904      	bls.n	8004ef8 <mem_trim+0x18>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8004eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ef2:	d902      	bls.n	8004efa <mem_trim+0x1a>
    return NULL;
 8004ef4:	2000      	movs	r0, #0
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8004ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    newsize = MIN_SIZE_ALIGNED;
 8004ef8:	230c      	movs	r3, #12
  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004efa:	4a21      	ldr	r2, [pc, #132]	; (8004f80 <mem_trim+0xa0>)
 8004efc:	6812      	ldr	r2, [r2, #0]
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004efe:	4282      	cmp	r2, r0
 8004f00:	d8f9      	bhi.n	8004ef6 <mem_trim+0x16>
 8004f02:	4920      	ldr	r1, [pc, #128]	; (8004f84 <mem_trim+0xa4>)
 8004f04:	6809      	ldr	r1, [r1, #0]
 8004f06:	4288      	cmp	r0, r1
 8004f08:	d2f5      	bcs.n	8004ef6 <mem_trim+0x16>
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004f0a:	f1a0 0108 	sub.w	r1, r0, #8
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8004f0e:	f830 5c08 	ldrh.w	r5, [r0, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8004f12:	1a89      	subs	r1, r1, r2
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8004f14:	f1a5 0408 	sub.w	r4, r5, #8
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8004f18:	b289      	uxth	r1, r1
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8004f1a:	1a64      	subs	r4, r4, r1
 8004f1c:	b2a4      	uxth	r4, r4
  if (newsize > size) {
 8004f1e:	429c      	cmp	r4, r3
 8004f20:	d3e8      	bcc.n	8004ef4 <mem_trim+0x14>
  if (newsize == size) {
 8004f22:	d0e8      	beq.n	8004ef6 <mem_trim+0x16>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 8004f24:	1956      	adds	r6, r2, r5
  if (mem2->used == 0) {
 8004f26:	7937      	ldrb	r7, [r6, #4]
 8004f28:	b9c7      	cbnz	r7, 8004f5c <mem_trim+0x7c>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004f2a:	f101 0408 	add.w	r4, r1, #8
    next = mem2->next;
 8004f2e:	5b57      	ldrh	r7, [r2, r5]
    if (lfree == mem2) {
 8004f30:	4d15      	ldr	r5, [pc, #84]	; (8004f88 <mem_trim+0xa8>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004f32:	4423      	add	r3, r4
    if (lfree == mem2) {
 8004f34:	682c      	ldr	r4, [r5, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004f36:	b29b      	uxth	r3, r3
    if (lfree == mem2) {
 8004f38:	42a6      	cmp	r6, r4
 8004f3a:	eb02 0403 	add.w	r4, r2, r3
      lfree = (struct mem *)(void *)&ram[ptr2];
 8004f3e:	bf08      	it	eq
 8004f40:	602c      	streq	r4, [r5, #0]
    mem2->used = 0;
 8004f42:	2500      	movs	r5, #0
 8004f44:	7125      	strb	r5, [r4, #4]
    mem2->next = next;
 8004f46:	52d7      	strh	r7, [r2, r3]
    mem2->prev = ptr;
 8004f48:	8061      	strh	r1, [r4, #2]
    mem->next = ptr2;
 8004f4a:	f820 3c08 	strh.w	r3, [r0, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004f4e:	5ad1      	ldrh	r1, [r2, r3]
 8004f50:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004f54:	d0cf      	beq.n	8004ef6 <mem_trim+0x16>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004f56:	440a      	add	r2, r1
 8004f58:	8053      	strh	r3, [r2, #2]
 8004f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004f5c:	f103 0614 	add.w	r6, r3, #20
 8004f60:	42a6      	cmp	r6, r4
 8004f62:	d8c8      	bhi.n	8004ef6 <mem_trim+0x16>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004f64:	f101 0408 	add.w	r4, r1, #8
    if (mem2 < lfree) {
 8004f68:	4e07      	ldr	r6, [pc, #28]	; (8004f88 <mem_trim+0xa8>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004f6a:	4423      	add	r3, r4
    if (mem2 < lfree) {
 8004f6c:	6837      	ldr	r7, [r6, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004f6e:	b29b      	uxth	r3, r3
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8004f70:	18d4      	adds	r4, r2, r3
    if (mem2 < lfree) {
 8004f72:	42bc      	cmp	r4, r7
      lfree = mem2;
 8004f74:	bf38      	it	cc
 8004f76:	6034      	strcc	r4, [r6, #0]
    mem2->used = 0;
 8004f78:	2600      	movs	r6, #0
 8004f7a:	7126      	strb	r6, [r4, #4]
    mem2->next = mem->next;
 8004f7c:	52d5      	strh	r5, [r2, r3]
 8004f7e:	e7e3      	b.n	8004f48 <mem_trim+0x68>
 8004f80:	20000314 	.word	0x20000314
 8004f84:	20000318 	.word	0x20000318
 8004f88:	20000310 	.word	0x20000310

08004f8c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8004f8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8004f90:	b148      	cbz	r0, 8004fa6 <mem_malloc+0x1a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8004f92:	3003      	adds	r0, #3
 8004f94:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8004f98:	4003      	ands	r3, r0

  if (size < MIN_SIZE_ALIGNED) {
 8004f9a:	2b0b      	cmp	r3, #11
 8004f9c:	d905      	bls.n	8004faa <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 8004f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fa2:	d903      	bls.n	8004fac <mem_malloc+0x20>
    return NULL;
 8004fa4:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
 8004fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    size = MIN_SIZE_ALIGNED;
 8004faa:	230c      	movs	r3, #12
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004fac:	4c22      	ldr	r4, [pc, #136]	; (8005038 <mem_malloc+0xac>)
 8004fae:	f5c3 4800 	rsb	r8, r3, #32768	; 0x8000
 8004fb2:	4d22      	ldr	r5, [pc, #136]	; (800503c <mem_malloc+0xb0>)
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004fb4:	f06f 0907 	mvn.w	r9, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004fb8:	6827      	ldr	r7, [r4, #0]
 8004fba:	6829      	ldr	r1, [r5, #0]
 8004fbc:	1a7a      	subs	r2, r7, r1
 8004fbe:	b292      	uxth	r2, r2
 8004fc0:	4542      	cmp	r2, r8
 8004fc2:	d2ef      	bcs.n	8004fa4 <mem_malloc+0x18>
      mem = (struct mem *)(void *)&ram[ptr];
 8004fc4:	1888      	adds	r0, r1, r2
 8004fc6:	f831 e002 	ldrh.w	lr, [r1, r2]
      if ((!mem->used) &&
 8004fca:	f890 c004 	ldrb.w	ip, [r0, #4]
 8004fce:	f1bc 0f00 	cmp.w	ip, #0
 8004fd2:	d12e      	bne.n	8005032 <mem_malloc+0xa6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004fd4:	eba9 0602 	sub.w	r6, r9, r2
 8004fd8:	4476      	add	r6, lr
      if ((!mem->used) &&
 8004fda:	42b3      	cmp	r3, r6
 8004fdc:	d829      	bhi.n	8005032 <mem_malloc+0xa6>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004fde:	f103 0814 	add.w	r8, r3, #20
 8004fe2:	4546      	cmp	r6, r8
 8004fe4:	d31f      	bcc.n	8005026 <mem_malloc+0x9a>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8004fe6:	3308      	adds	r3, #8
 8004fe8:	4413      	add	r3, r2
 8004fea:	b29b      	uxth	r3, r3
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8004fec:	18ce      	adds	r6, r1, r3
          mem2->used = 0;
 8004fee:	f886 c004 	strb.w	ip, [r6, #4]
          mem2->next = mem->next;
 8004ff2:	f821 e003 	strh.w	lr, [r1, r3]
          mem2->prev = ptr;
 8004ff6:	8072      	strh	r2, [r6, #2]
          mem->used = 1;
 8004ff8:	2201      	movs	r2, #1
          mem->next = ptr2;
 8004ffa:	8003      	strh	r3, [r0, #0]
          mem->used = 1;
 8004ffc:	7102      	strb	r2, [r0, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004ffe:	5aca      	ldrh	r2, [r1, r3]
 8005000:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005004:	d001      	beq.n	800500a <mem_malloc+0x7e>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8005006:	4411      	add	r1, r2
 8005008:	804b      	strh	r3, [r1, #2]
        if (mem == lfree) {
 800500a:	4287      	cmp	r7, r0
 800500c:	d108      	bne.n	8005020 <mem_malloc+0x94>
          while (cur->used && cur != ram_end) {
 800500e:	4b0c      	ldr	r3, [pc, #48]	; (8005040 <mem_malloc+0xb4>)
            cur = (struct mem *)(void *)&ram[cur->next];
 8005010:	6829      	ldr	r1, [r5, #0]
          while (cur->used && cur != ram_end) {
 8005012:	681a      	ldr	r2, [r3, #0]
            cur = (struct mem *)(void *)&ram[cur->next];
 8005014:	4603      	mov	r3, r0
          while (cur->used && cur != ram_end) {
 8005016:	791d      	ldrb	r5, [r3, #4]
 8005018:	b10d      	cbz	r5, 800501e <mem_malloc+0x92>
 800501a:	4293      	cmp	r3, r2
 800501c:	d106      	bne.n	800502c <mem_malloc+0xa0>
          lfree = cur;
 800501e:	6023      	str	r3, [r4, #0]
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8005020:	3008      	adds	r0, #8
 8005022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 8005026:	2301      	movs	r3, #1
 8005028:	7103      	strb	r3, [r0, #4]
 800502a:	e7ee      	b.n	800500a <mem_malloc+0x7e>
            cur = (struct mem *)(void *)&ram[cur->next];
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	440b      	add	r3, r1
 8005030:	e7f1      	b.n	8005016 <mem_malloc+0x8a>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8005032:	4672      	mov	r2, lr
 8005034:	e7c4      	b.n	8004fc0 <mem_malloc+0x34>
 8005036:	bf00      	nop
 8005038:	20000310 	.word	0x20000310
 800503c:	20000314 	.word	0x20000314
 8005040:	20000318 	.word	0x20000318

08005044 <memp_init_pool>:
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8005044:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8005046:	2200      	movs	r2, #0
 8005048:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800504a:	3303      	adds	r3, #3
{
 800504c:	b530      	push	{r4, r5, lr}
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800504e:	f023 0303 	bic.w	r3, r3, #3
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005052:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8005054:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8005056:	42a2      	cmp	r2, r4
 8005058:	db00      	blt.n	800505c <memp_init_pool+0x18>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800505a:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 800505c:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 800505e:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8005060:	601d      	str	r5, [r3, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005062:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8005064:	600b      	str	r3, [r1, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005066:	442b      	add	r3, r5
 8005068:	e7f5      	b.n	8005056 <memp_init_pool+0x12>
	...

0800506c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800506c:	b538      	push	{r3, r4, r5, lr}
 800506e:	2400      	movs	r4, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
    memp_init_pool(memp_pools[i]);
 8005070:	4d04      	ldr	r5, [pc, #16]	; (8005084 <memp_init+0x18>)
 8005072:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8005076:	3401      	adds	r4, #1
 8005078:	f7ff ffe4 	bl	8005044 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800507c:	2c09      	cmp	r4, #9
 800507e:	d1f8      	bne.n	8005072 <memp_init+0x6>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005080:	bd38      	pop	{r3, r4, r5, pc}
 8005082:	bf00      	nop
 8005084:	0800b900 	.word	0x0800b900

08005088 <memp_malloc>:
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005088:	2808      	cmp	r0, #8
 800508a:	d808      	bhi.n	800509e <memp_malloc+0x16>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800508c:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <memp_malloc+0x1c>)
 800508e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005092:	689b      	ldr	r3, [r3, #8]
  memp = *desc->tab;
 8005094:	6818      	ldr	r0, [r3, #0]
  if (memp != NULL) {
 8005096:	b118      	cbz	r0, 80050a0 <memp_malloc+0x18>
    *desc->tab = memp->next;
 8005098:	6802      	ldr	r2, [r0, #0]
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	4770      	bx	lr
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800509e:	2000      	movs	r0, #0
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
}
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	0800b900 	.word	0x0800b900

080050a8 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80050a8:	2808      	cmp	r0, #8
 80050aa:	d807      	bhi.n	80050bc <memp_free+0x14>

  if (mem == NULL) {
 80050ac:	b131      	cbz	r1, 80050bc <memp_free+0x14>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80050ae:	4b04      	ldr	r3, [pc, #16]	; (80050c0 <memp_free+0x18>)
 80050b0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80050b4:	689b      	ldr	r3, [r3, #8]
  memp->next = *desc->tab;
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	600a      	str	r2, [r1, #0]
  *desc->tab = memp;
 80050ba:	6019      	str	r1, [r3, #0]
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	0800b900 	.word	0x0800b900

080050c4 <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80050c4:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
netif_issue_reports(struct netif* netif, u8_t report_type)
 80050c8:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80050ca:	071b      	lsls	r3, r3, #28
 80050cc:	d502      	bpl.n	80050d4 <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 80050ce:	3104      	adds	r1, #4
 80050d0:	f7ff b93e 	b.w	8004350 <etharp_request>
 80050d4:	4770      	bx	lr

080050d6 <netif_init>:
{
 80050d6:	4770      	bx	lr

080050d8 <netif_set_ipaddr>:
{
 80050d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050da:	4605      	mov	r5, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80050dc:	460c      	mov	r4, r1
 80050de:	b1b9      	cbz	r1, 8005110 <netif_set_ipaddr+0x38>
 80050e0:	680b      	ldr	r3, [r1, #0]
 80050e2:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 80050e4:	9a01      	ldr	r2, [sp, #4]
 80050e6:	686b      	ldr	r3, [r5, #4]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d00f      	beq.n	800510c <netif_set_ipaddr+0x34>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80050ec:	1d2e      	adds	r6, r5, #4
 80050ee:	a901      	add	r1, sp, #4
 80050f0:	4630      	mov	r0, r6
 80050f2:	f000 ffe9 	bl	80060c8 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80050f6:	a901      	add	r1, sp, #4
 80050f8:	4630      	mov	r0, r6
 80050fa:	f003 f811 	bl	8008120 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80050fe:	b104      	cbz	r4, 8005102 <netif_set_ipaddr+0x2a>
 8005100:	6824      	ldr	r4, [r4, #0]
 8005102:	606c      	str	r4, [r5, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005104:	b114      	cbz	r4, 800510c <netif_set_ipaddr+0x34>
 8005106:	4628      	mov	r0, r5
 8005108:	f7ff ffdc 	bl	80050c4 <netif_issue_reports.part.0>
}
 800510c:	b002      	add	sp, #8
 800510e:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8005110:	4b01      	ldr	r3, [pc, #4]	; (8005118 <netif_set_ipaddr+0x40>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	e7e5      	b.n	80050e2 <netif_set_ipaddr+0xa>
 8005116:	bf00      	nop
 8005118:	0800b890 	.word	0x0800b890

0800511c <netif_set_addr>:
{
 800511c:	b570      	push	{r4, r5, r6, lr}
 800511e:	4606      	mov	r6, r0
 8005120:	4615      	mov	r5, r2
 8005122:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 8005124:	b109      	cbz	r1, 800512a <netif_set_addr+0xe>
 8005126:	680b      	ldr	r3, [r1, #0]
 8005128:	b94b      	cbnz	r3, 800513e <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 800512a:	4630      	mov	r0, r6
 800512c:	f7ff ffd4 	bl	80050d8 <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005130:	b105      	cbz	r5, 8005134 <netif_set_addr+0x18>
 8005132:	682d      	ldr	r5, [r5, #0]
 8005134:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005136:	b104      	cbz	r4, 800513a <netif_set_addr+0x1e>
 8005138:	6824      	ldr	r4, [r4, #0]
 800513a:	60f4      	str	r4, [r6, #12]
 800513c:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800513e:	b102      	cbz	r2, 8005142 <netif_set_addr+0x26>
 8005140:	6815      	ldr	r5, [r2, #0]
 8005142:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005144:	b104      	cbz	r4, 8005148 <netif_set_addr+0x2c>
 8005146:	6824      	ldr	r4, [r4, #0]
 8005148:	60f4      	str	r4, [r6, #12]
    netif_set_ipaddr(netif, ipaddr);
 800514a:	4630      	mov	r0, r6
}
 800514c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 8005150:	f7ff bfc2 	b.w	80050d8 <netif_set_ipaddr>

08005154 <netif_add>:
{
 8005154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8005156:	2603      	movs	r6, #3
  netif->num = netif_num++;
 8005158:	4f11      	ldr	r7, [pc, #68]	; (80051a0 <netif_add+0x4c>)
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800515a:	2500      	movs	r5, #0
{
 800515c:	4604      	mov	r4, r0
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800515e:	f880 6020 	strb.w	r6, [r0, #32]
  netif->state = state;
 8005162:	9e06      	ldr	r6, [sp, #24]
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005164:	6045      	str	r5, [r0, #4]
  netif->state = state;
 8005166:	61c6      	str	r6, [r0, #28]
  netif->num = netif_num++;
 8005168:	783e      	ldrb	r6, [r7, #0]
  ip_addr_set_zero_ip4(&netif->netmask);
 800516a:	6085      	str	r5, [r0, #8]
  netif->num = netif_num++;
 800516c:	f106 0e01 	add.w	lr, r6, #1
 8005170:	f880 602e 	strb.w	r6, [r0, #46]	; 0x2e
  netif->input = input;
 8005174:	9e08      	ldr	r6, [sp, #32]
  ip_addr_set_zero_ip4(&netif->gw);
 8005176:	60c5      	str	r5, [r0, #12]
  netif->flags = 0;
 8005178:	f880 502b 	strb.w	r5, [r0, #43]	; 0x2b
  netif->input = input;
 800517c:	6106      	str	r6, [r0, #16]
  netif->num = netif_num++;
 800517e:	f887 e000 	strb.w	lr, [r7]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005182:	f7ff ffcb 	bl	800511c <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8005186:	4620      	mov	r0, r4
 8005188:	9b07      	ldr	r3, [sp, #28]
 800518a:	4798      	blx	r3
 800518c:	b928      	cbnz	r0, 800519a <netif_add+0x46>
  netif->next = netif_list;
 800518e:	4b05      	ldr	r3, [pc, #20]	; (80051a4 <netif_add+0x50>)
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 8005194:	601c      	str	r4, [r3, #0]
}
 8005196:	4620      	mov	r0, r4
 8005198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 800519a:	462c      	mov	r4, r5
 800519c:	e7fb      	b.n	8005196 <netif_add+0x42>
 800519e:	bf00      	nop
 80051a0:	20000340 	.word	0x20000340
 80051a4:	2000b0a8 	.word	0x2000b0a8

080051a8 <netif_set_default>:
  netif_default = netif;
 80051a8:	4b01      	ldr	r3, [pc, #4]	; (80051b0 <netif_set_default+0x8>)
 80051aa:	6018      	str	r0, [r3, #0]
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	2000b0ac 	.word	0x2000b0ac

080051b4 <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 80051b4:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 80051b8:	07d1      	lsls	r1, r2, #31
 80051ba:	d409      	bmi.n	80051d0 <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 80051bc:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 80051c0:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 80051c2:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 80051c6:	d503      	bpl.n	80051d0 <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80051c8:	6843      	ldr	r3, [r0, #4]
 80051ca:	b10b      	cbz	r3, 80051d0 <netif_set_up+0x1c>
 80051cc:	f7ff bf7a 	b.w	80050c4 <netif_issue_reports.part.0>
 80051d0:	4770      	bx	lr

080051d2 <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 80051d2:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 80051d6:	07d9      	lsls	r1, r3, #31
 80051d8:	d507      	bpl.n	80051ea <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 80051da:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80051de:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 80051e0:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80051e4:	d501      	bpl.n	80051ea <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 80051e6:	f7ff b80d 	b.w	8004204 <etharp_cleanup_netif>
 80051ea:	4770      	bx	lr

080051ec <pbuf_header_impl.part.0>:
  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
    return 0;
  }

  if (header_size_increment < 0) {
 80051ec:	2900      	cmp	r1, #0
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
 80051ee:	b530      	push	{r4, r5, lr}
  if (header_size_increment < 0) {
 80051f0:	da06      	bge.n	8005200 <pbuf_header_impl.part.0+0x14>
    increment_magnitude = -header_size_increment;
 80051f2:	424c      	negs	r4, r1
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80051f4:	8943      	ldrh	r3, [r0, #10]
    increment_magnitude = -header_size_increment;
 80051f6:	b2a4      	uxth	r4, r4
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80051f8:	42a3      	cmp	r3, r4
 80051fa:	d202      	bcs.n	8005202 <pbuf_header_impl.part.0+0x16>
 80051fc:	2001      	movs	r0, #1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
}
 80051fe:	bd30      	pop	{r4, r5, pc}
    increment_magnitude = header_size_increment;
 8005200:	b28c      	uxth	r4, r1
  type = p->type;
 8005202:	7b05      	ldrb	r5, [r0, #12]
  payload = p->payload;
 8005204:	6843      	ldr	r3, [r0, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8005206:	b10d      	cbz	r5, 800520c <pbuf_header_impl.part.0+0x20>
 8005208:	2d03      	cmp	r5, #3
 800520a:	d10e      	bne.n	800522a <pbuf_header_impl.part.0+0x3e>
    p->payload = (u8_t *)p->payload - header_size_increment;
 800520c:	1a5b      	subs	r3, r3, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800520e:	f100 0210 	add.w	r2, r0, #16
 8005212:	4293      	cmp	r3, r2
 8005214:	d3f2      	bcc.n	80051fc <pbuf_header_impl.part.0+0x10>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8005216:	6043      	str	r3, [r0, #4]
  p->len += header_size_increment;
 8005218:	b289      	uxth	r1, r1
 800521a:	8943      	ldrh	r3, [r0, #10]
 800521c:	440b      	add	r3, r1
 800521e:	8143      	strh	r3, [r0, #10]
  p->tot_len += header_size_increment;
 8005220:	8903      	ldrh	r3, [r0, #8]
 8005222:	4419      	add	r1, r3
 8005224:	8101      	strh	r1, [r0, #8]
  return 0;
 8005226:	2000      	movs	r0, #0
 8005228:	bd30      	pop	{r4, r5, pc}
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800522a:	3d01      	subs	r5, #1
 800522c:	2d01      	cmp	r5, #1
 800522e:	d8e5      	bhi.n	80051fc <pbuf_header_impl.part.0+0x10>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8005230:	2900      	cmp	r1, #0
 8005232:	da04      	bge.n	800523e <pbuf_header_impl.part.0+0x52>
 8005234:	8942      	ldrh	r2, [r0, #10]
 8005236:	42a2      	cmp	r2, r4
 8005238:	d3e0      	bcc.n	80051fc <pbuf_header_impl.part.0+0x10>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800523a:	1a5b      	subs	r3, r3, r1
 800523c:	e7eb      	b.n	8005216 <pbuf_header_impl.part.0+0x2a>
    } else if ((header_size_increment > 0) && force) {
 800523e:	d0dd      	beq.n	80051fc <pbuf_header_impl.part.0+0x10>
 8005240:	2a00      	cmp	r2, #0
 8005242:	d1fa      	bne.n	800523a <pbuf_header_impl.part.0+0x4e>
 8005244:	e7da      	b.n	80051fc <pbuf_header_impl.part.0+0x10>
	...

08005248 <pbuf_free_ooseq>:
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005248:	4b08      	ldr	r3, [pc, #32]	; (800526c <pbuf_free_ooseq+0x24>)
 800524a:	2200      	movs	r2, #0
{
 800524c:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800524e:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005250:	4b07      	ldr	r3, [pc, #28]	; (8005270 <pbuf_free_ooseq+0x28>)
 8005252:	681c      	ldr	r4, [r3, #0]
 8005254:	b904      	cbnz	r4, 8005258 <pbuf_free_ooseq+0x10>
 8005256:	bd10      	pop	{r4, pc}
    if (NULL != pcb->ooseq) {
 8005258:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800525a:	b120      	cbz	r0, 8005266 <pbuf_free_ooseq+0x1e>
      tcp_segs_free(pcb->ooseq);
 800525c:	f000 faa8 	bl	80057b0 <tcp_segs_free>
      pcb->ooseq = NULL;
 8005260:	2300      	movs	r3, #0
 8005262:	6723      	str	r3, [r4, #112]	; 0x70
      return;
 8005264:	bd10      	pop	{r4, pc}
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005266:	68e4      	ldr	r4, [r4, #12]
 8005268:	e7f4      	b.n	8005254 <pbuf_free_ooseq+0xc>
 800526a:	bf00      	nop
 800526c:	2000b0b0 	.word	0x2000b0b0
 8005270:	2000b0b8 	.word	0x2000b0b8

08005274 <pbuf_alloced_custom>:
{
 8005274:	b570      	push	{r4, r5, r6, lr}
 8005276:	9d04      	ldr	r5, [sp, #16]
  switch (l) {
 8005278:	2804      	cmp	r0, #4
 800527a:	d824      	bhi.n	80052c6 <pbuf_alloced_custom+0x52>
 800527c:	e8df f000 	tbb	[pc, r0]
 8005280:	1d1b031f 	.word	0x1d1b031f
 8005284:	1d          	.byte	0x1d
 8005285:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8005286:	2422      	movs	r4, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005288:	3403      	adds	r4, #3
 800528a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 800528e:	f024 0403 	bic.w	r4, r4, #3
 8005292:	190e      	adds	r6, r1, r4
 8005294:	4286      	cmp	r6, r0
 8005296:	f04f 0000 	mov.w	r0, #0
 800529a:	d815      	bhi.n	80052c8 <pbuf_alloced_custom+0x54>
  p->pbuf.next = NULL;
 800529c:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 800529e:	b185      	cbz	r5, 80052c2 <pbuf_alloced_custom+0x4e>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80052a0:	442c      	add	r4, r5
 80052a2:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80052a4:	2002      	movs	r0, #2
  p->pbuf.type = type;
 80052a6:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80052a8:	2201      	movs	r2, #1
  p->pbuf.len = p->pbuf.tot_len = length;
 80052aa:	8119      	strh	r1, [r3, #8]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80052ac:	7358      	strb	r0, [r3, #13]
  return &p->pbuf;
 80052ae:	4618      	mov	r0, r3
  p->pbuf.len = p->pbuf.tot_len = length;
 80052b0:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 80052b2:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 80052b4:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80052b6:	240e      	movs	r4, #14
    break;
 80052b8:	e7e6      	b.n	8005288 <pbuf_alloced_custom+0x14>
    offset = 0;
 80052ba:	2400      	movs	r4, #0
    break;
 80052bc:	e7e4      	b.n	8005288 <pbuf_alloced_custom+0x14>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80052be:	2436      	movs	r4, #54	; 0x36
 80052c0:	e7e2      	b.n	8005288 <pbuf_alloced_custom+0x14>
    p->pbuf.payload = NULL;
 80052c2:	605d      	str	r5, [r3, #4]
 80052c4:	e7ee      	b.n	80052a4 <pbuf_alloced_custom+0x30>
    return NULL;
 80052c6:	2000      	movs	r0, #0
}
 80052c8:	bd70      	pop	{r4, r5, r6, pc}

080052ca <pbuf_header>:
  if ((header_size_increment == 0) || (p == NULL)) {
 80052ca:	b119      	cbz	r1, 80052d4 <pbuf_header+0xa>
 80052cc:	b110      	cbz	r0, 80052d4 <pbuf_header+0xa>
 80052ce:	2200      	movs	r2, #0
 80052d0:	f7ff bf8c 	b.w	80051ec <pbuf_header_impl.part.0>
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
}
 80052d4:	2000      	movs	r0, #0
 80052d6:	4770      	bx	lr

080052d8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80052d8:	b538      	push	{r3, r4, r5, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80052da:	4601      	mov	r1, r0
 80052dc:	b310      	cbz	r0, 8005324 <pbuf_free+0x4c>
 80052de:	2400      	movs	r4, #0
 80052e0:	b2e0      	uxtb	r0, r4
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80052e2:	b901      	cbnz	r1, 80052e6 <pbuf_free+0xe>
 80052e4:	bd38      	pop	{r3, r4, r5, pc}
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80052e6:	89cb      	ldrh	r3, [r1, #14]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	81cb      	strh	r3, [r1, #14]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80052ee:	b9cb      	cbnz	r3, 8005324 <pbuf_free+0x4c>
      q = p->next;
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80052f0:	7b4b      	ldrb	r3, [r1, #13]
      q = p->next;
 80052f2:	680d      	ldr	r5, [r1, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80052f4:	079b      	lsls	r3, r3, #30
 80052f6:	d505      	bpl.n	8005304 <pbuf_free+0x2c>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
        pc->custom_free_function(p);
 80052f8:	690b      	ldr	r3, [r1, #16]
 80052fa:	4608      	mov	r0, r1
 80052fc:	4798      	blx	r3
 80052fe:	3401      	adds	r4, #1
          mem_free(p);
        }
      }
      count++;
      /* proceed to next pbuf */
      p = q;
 8005300:	4629      	mov	r1, r5
 8005302:	e7ed      	b.n	80052e0 <pbuf_free+0x8>
      type = p->type;
 8005304:	7b0b      	ldrb	r3, [r1, #12]
        if (type == PBUF_POOL) {
 8005306:	2b03      	cmp	r3, #3
 8005308:	d103      	bne.n	8005312 <pbuf_free+0x3a>
          memp_free(MEMP_PBUF_POOL, p);
 800530a:	2008      	movs	r0, #8
          memp_free(MEMP_PBUF, p);
 800530c:	f7ff fecc 	bl	80050a8 <memp_free>
 8005310:	e7f5      	b.n	80052fe <pbuf_free+0x26>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8005312:	3b01      	subs	r3, #1
 8005314:	2b01      	cmp	r3, #1
 8005316:	d801      	bhi.n	800531c <pbuf_free+0x44>
          memp_free(MEMP_PBUF, p);
 8005318:	2007      	movs	r0, #7
 800531a:	e7f7      	b.n	800530c <pbuf_free+0x34>
          mem_free(p);
 800531c:	4608      	mov	r0, r1
 800531e:	f7ff fd9b 	bl	8004e58 <mem_free>
 8005322:	e7ec      	b.n	80052fe <pbuf_free+0x26>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8005324:	bd38      	pop	{r3, r4, r5, pc}
	...

08005328 <pbuf_alloc>:
{
 8005328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800532c:	460e      	mov	r6, r1
 800532e:	4617      	mov	r7, r2
  switch (layer) {
 8005330:	2804      	cmp	r0, #4
 8005332:	d845      	bhi.n	80053c0 <pbuf_alloc+0x98>
 8005334:	e8df f000 	tbb	[pc, r0]
 8005338:	0c0a030e 	.word	0x0c0a030e
 800533c:	0c          	.byte	0x0c
 800533d:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800533e:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 8005340:	2f03      	cmp	r7, #3
 8005342:	d83d      	bhi.n	80053c0 <pbuf_alloc+0x98>
 8005344:	e8df f007 	tbb	[pc, r7]
 8005348:	086d6d54 	.word	0x086d6d54
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800534c:	250e      	movs	r5, #14
    break;
 800534e:	e7f7      	b.n	8005340 <pbuf_alloc+0x18>
    offset = 0;
 8005350:	2500      	movs	r5, #0
    break;
 8005352:	e7f5      	b.n	8005340 <pbuf_alloc+0x18>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8005354:	2536      	movs	r5, #54	; 0x36
 8005356:	e7f3      	b.n	8005340 <pbuf_alloc+0x18>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005358:	2008      	movs	r0, #8
 800535a:	f7ff fe95 	bl	8005088 <memp_malloc>
    if (p == NULL) {
 800535e:	4604      	mov	r4, r0
 8005360:	b928      	cbnz	r0, 800536e <pbuf_alloc+0x46>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005362:	2201      	movs	r2, #1
 8005364:	4b35      	ldr	r3, [pc, #212]	; (800543c <pbuf_alloc+0x114>)
 8005366:	701a      	strb	r2, [r3, #0]
}
 8005368:	4620      	mov	r0, r4
 800536a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p->type = type;
 800536e:	2203      	movs	r2, #3
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8005370:	1943      	adds	r3, r0, r5
    p->next = NULL;
 8005372:	2700      	movs	r7, #0
    while (rem_len > 0) {
 8005374:	4681      	mov	r9, r0
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8005376:	4415      	add	r5, r2
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8005378:	3313      	adds	r3, #19
      q->type = type;
 800537a:	4690      	mov	r8, r2
    p->type = type;
 800537c:	7302      	strb	r2, [r0, #12]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800537e:	f025 0503 	bic.w	r5, r5, #3
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8005382:	f023 0303 	bic.w	r3, r3, #3
    p->next = NULL;
 8005386:	6007      	str	r7, [r0, #0]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8005388:	f5c5 7514 	rsb	r5, r5, #592	; 0x250
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800538c:	6043      	str	r3, [r0, #4]
    p->ref = 1;
 800538e:	2301      	movs	r3, #1
    p->tot_len = length;
 8005390:	8106      	strh	r6, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8005392:	42b5      	cmp	r5, r6
    p->ref = 1;
 8005394:	81c3      	strh	r3, [r0, #14]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8005396:	bf28      	it	cs
 8005398:	4635      	movcs	r5, r6
 800539a:	8145      	strh	r5, [r0, #10]
    rem_len = length - p->len;
 800539c:	1b75      	subs	r5, r6, r5
    while (rem_len > 0) {
 800539e:	2d00      	cmp	r5, #0
 80053a0:	dc04      	bgt.n	80053ac <pbuf_alloc+0x84>
  p->ref = 1;
 80053a2:	2301      	movs	r3, #1
 80053a4:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 80053a6:	2300      	movs	r3, #0
 80053a8:	7363      	strb	r3, [r4, #13]
  return p;
 80053aa:	e7dd      	b.n	8005368 <pbuf_alloc+0x40>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80053ac:	2008      	movs	r0, #8
 80053ae:	f7ff fe6b 	bl	8005088 <memp_malloc>
      if (q == NULL) {
 80053b2:	b938      	cbnz	r0, 80053c4 <pbuf_alloc+0x9c>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80053b4:	2201      	movs	r2, #1
 80053b6:	4b21      	ldr	r3, [pc, #132]	; (800543c <pbuf_alloc+0x114>)
        pbuf_free(p);
 80053b8:	4620      	mov	r0, r4
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80053ba:	701a      	strb	r2, [r3, #0]
        pbuf_free(p);
 80053bc:	f7ff ff8c 	bl	80052d8 <pbuf_free>
    return NULL;
 80053c0:	2400      	movs	r4, #0
 80053c2:	e7d1      	b.n	8005368 <pbuf_alloc+0x40>
      q->tot_len = (u16_t)rem_len;
 80053c4:	b2ab      	uxth	r3, r5
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80053c6:	f100 0210 	add.w	r2, r0, #16
      q->type = type;
 80053ca:	f880 800c 	strb.w	r8, [r0, #12]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80053ce:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
      q->flags = 0;
 80053d2:	7347      	strb	r7, [r0, #13]
      q->next = NULL;
 80053d4:	6007      	str	r7, [r0, #0]
      r->next = q;
 80053d6:	f8c9 0000 	str.w	r0, [r9]
      rem_len -= q->len;
 80053da:	4681      	mov	r9, r0
      q->tot_len = (u16_t)rem_len;
 80053dc:	8103      	strh	r3, [r0, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80053de:	bf28      	it	cs
 80053e0:	f44f 7314 	movcs.w	r3, #592	; 0x250
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80053e4:	6042      	str	r2, [r0, #4]
      q->ref = 1;
 80053e6:	2201      	movs	r2, #1
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80053e8:	8143      	strh	r3, [r0, #10]
      rem_len -= q->len;
 80053ea:	1aed      	subs	r5, r5, r3
      q->ref = 1;
 80053ec:	81c2      	strh	r2, [r0, #14]
 80053ee:	e7d6      	b.n	800539e <pbuf_alloc+0x76>
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
 80053f0:	f105 0013 	add.w	r0, r5, #19
 80053f4:	1cf3      	adds	r3, r6, #3
 80053f6:	f020 0003 	bic.w	r0, r0, #3
 80053fa:	f023 0303 	bic.w	r3, r3, #3
 80053fe:	4418      	add	r0, r3
 8005400:	b280      	uxth	r0, r0
 8005402:	f7ff fdc3 	bl	8004f8c <mem_malloc>
    if (p == NULL) {
 8005406:	4604      	mov	r4, r0
 8005408:	2800      	cmp	r0, #0
 800540a:	d0d9      	beq.n	80053c0 <pbuf_alloc+0x98>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800540c:	4405      	add	r5, r0
    p->next = NULL;
 800540e:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 8005410:	8106      	strh	r6, [r0, #8]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8005412:	3513      	adds	r5, #19
    p->len = p->tot_len = length;
 8005414:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 8005416:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8005418:	f025 0503 	bic.w	r5, r5, #3
    p->type = type;
 800541c:	7303      	strb	r3, [r0, #12]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800541e:	6045      	str	r5, [r0, #4]
    break;
 8005420:	e7bf      	b.n	80053a2 <pbuf_alloc+0x7a>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005422:	2007      	movs	r0, #7
 8005424:	f7ff fe30 	bl	8005088 <memp_malloc>
    if (p == NULL) {
 8005428:	4604      	mov	r4, r0
 800542a:	2800      	cmp	r0, #0
 800542c:	d0c8      	beq.n	80053c0 <pbuf_alloc+0x98>
    p->payload = NULL;
 800542e:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 8005430:	8106      	strh	r6, [r0, #8]
 8005432:	8146      	strh	r6, [r0, #10]
    p->payload = NULL;
 8005434:	6043      	str	r3, [r0, #4]
    p->next = NULL;
 8005436:	6003      	str	r3, [r0, #0]
    p->type = type;
 8005438:	7307      	strb	r7, [r0, #12]
    break;
 800543a:	e7b2      	b.n	80053a2 <pbuf_alloc+0x7a>
 800543c:	2000b0b0 	.word	0x2000b0b0

08005440 <pbuf_realloc>:
{
 8005440:	b538      	push	{r3, r4, r5, lr}
  if (new_len >= p->tot_len) {
 8005442:	8903      	ldrh	r3, [r0, #8]
{
 8005444:	4604      	mov	r4, r0
  if (new_len >= p->tot_len) {
 8005446:	428b      	cmp	r3, r1
 8005448:	d91b      	bls.n	8005482 <pbuf_realloc+0x42>
 800544a:	460d      	mov	r5, r1
    q->tot_len += (u16_t)grow;
 800544c:	1acb      	subs	r3, r1, r3
  while (rem_len > q->len) {
 800544e:	8961      	ldrh	r1, [r4, #10]
 8005450:	428d      	cmp	r5, r1
 8005452:	d817      	bhi.n	8005484 <pbuf_realloc+0x44>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8005454:	7b23      	ldrb	r3, [r4, #12]
 8005456:	b963      	cbnz	r3, 8005472 <pbuf_realloc+0x32>
 8005458:	428d      	cmp	r5, r1
 800545a:	d00a      	beq.n	8005472 <pbuf_realloc+0x32>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800545c:	7b63      	ldrb	r3, [r4, #13]
 800545e:	079b      	lsls	r3, r3, #30
 8005460:	d407      	bmi.n	8005472 <pbuf_realloc+0x32>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8005462:	6861      	ldr	r1, [r4, #4]
 8005464:	4620      	mov	r0, r4
 8005466:	1b09      	subs	r1, r1, r4
 8005468:	4429      	add	r1, r5
 800546a:	b289      	uxth	r1, r1
 800546c:	f7ff fd38 	bl	8004ee0 <mem_trim>
 8005470:	4604      	mov	r4, r0
  if (q->next != NULL) {
 8005472:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8005474:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8005476:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8005478:	b108      	cbz	r0, 800547e <pbuf_realloc+0x3e>
    pbuf_free(q->next);
 800547a:	f7ff ff2d 	bl	80052d8 <pbuf_free>
  q->next = NULL;
 800547e:	2300      	movs	r3, #0
 8005480:	6023      	str	r3, [r4, #0]
 8005482:	bd38      	pop	{r3, r4, r5, pc}
    q->tot_len += (u16_t)grow;
 8005484:	8922      	ldrh	r2, [r4, #8]
    rem_len -= q->len;
 8005486:	1a6d      	subs	r5, r5, r1
    q->tot_len += (u16_t)grow;
 8005488:	441a      	add	r2, r3
    rem_len -= q->len;
 800548a:	b2ad      	uxth	r5, r5
    q->tot_len += (u16_t)grow;
 800548c:	8122      	strh	r2, [r4, #8]
    q = q->next;
 800548e:	6824      	ldr	r4, [r4, #0]
 8005490:	e7dd      	b.n	800544e <pbuf_realloc+0xe>

08005492 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005492:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 8005494:	2200      	movs	r2, #0
 8005496:	b290      	uxth	r0, r2
 8005498:	3201      	adds	r2, #1
 800549a:	b903      	cbnz	r3, 800549e <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 800549c:	4770      	bx	lr
    p = p->next;
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	e7f9      	b.n	8005496 <pbuf_clen+0x4>

080054a2 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 80054a2:	b110      	cbz	r0, 80054aa <pbuf_ref+0x8>
    SYS_ARCH_INC(p->ref, 1);
 80054a4:	89c3      	ldrh	r3, [r0, #14]
 80054a6:	3301      	adds	r3, #1
 80054a8:	81c3      	strh	r3, [r0, #14]
 80054aa:	4770      	bx	lr

080054ac <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80054ac:	b510      	push	{r4, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80054ae:	b150      	cbz	r0, 80054c6 <pbuf_cat+0x1a>
 80054b0:	b909      	cbnz	r1, 80054b6 <pbuf_cat+0xa>
 80054b2:	bd10      	pop	{r4, pc}
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 80054b4:	4620      	mov	r0, r4
 80054b6:	8903      	ldrh	r3, [r0, #8]
 80054b8:	890a      	ldrh	r2, [r1, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80054ba:	6804      	ldr	r4, [r0, #0]
    p->tot_len += t->tot_len;
 80054bc:	4413      	add	r3, r2
 80054be:	8103      	strh	r3, [r0, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80054c0:	2c00      	cmp	r4, #0
 80054c2:	d1f7      	bne.n	80054b4 <pbuf_cat+0x8>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80054c4:	6001      	str	r1, [r0, #0]
 80054c6:	bd10      	pop	{r4, pc}

080054c8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80054c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054cc:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80054ce:	4605      	mov	r5, r0
 80054d0:	b918      	cbnz	r0, 80054da <pbuf_copy+0x12>
 80054d2:	f06f 000f 	mvn.w	r0, #15
 80054d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054da:	2900      	cmp	r1, #0
 80054dc:	d0f9      	beq.n	80054d2 <pbuf_copy+0xa>
 80054de:	8902      	ldrh	r2, [r0, #8]
 80054e0:	890b      	ldrh	r3, [r1, #8]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d3f5      	bcc.n	80054d2 <pbuf_copy+0xa>
 80054e6:	f04f 0800 	mov.w	r8, #0
 80054ea:	4647      	mov	r7, r8

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80054ec:	8963      	ldrh	r3, [r4, #10]
 80054ee:	896e      	ldrh	r6, [r5, #10]
 80054f0:	eba3 0308 	sub.w	r3, r3, r8
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80054f4:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80054f6:	1bf6      	subs	r6, r6, r7
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80054f8:	6861      	ldr	r1, [r4, #4]
 80054fa:	4438      	add	r0, r7
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80054fc:	429e      	cmp	r6, r3
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80054fe:	4441      	add	r1, r8
      len = p_from->len - offset_from;
 8005500:	bfac      	ite	ge
 8005502:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 8005504:	b2b6      	uxthlt	r6, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8005506:	4632      	mov	r2, r6
    offset_to += len;
 8005508:	4437      	add	r7, r6
    offset_from += len;
 800550a:	4446      	add	r6, r8
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800550c:	f005 ffd1 	bl	800b4b2 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
 8005510:	8962      	ldrh	r2, [r4, #10]
    offset_to += len;
 8005512:	b2bf      	uxth	r7, r7
    offset_from += len;
 8005514:	fa1f f886 	uxth.w	r8, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005518:	896b      	ldrh	r3, [r5, #10]
    if (offset_from >= p_from->len) {
 800551a:	4542      	cmp	r2, r8
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
 800551c:	bf9c      	itt	ls
 800551e:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 8005520:	f04f 0800 	movls.w	r8, #0
    }
    if (offset_to == p_to->len) {
 8005524:	429f      	cmp	r7, r3
 8005526:	d10b      	bne.n	8005540 <pbuf_copy+0x78>
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
 8005528:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800552a:	b945      	cbnz	r5, 800553e <pbuf_copy+0x76>
 800552c:	2c00      	cmp	r4, #0
 800552e:	d1d0      	bne.n	80054d2 <pbuf_copy+0xa>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005530:	4620      	mov	r0, r4
 8005532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005536:	f06f 0005 	mvn.w	r0, #5
 800553a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      offset_to = 0;
 800553e:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005540:	b134      	cbz	r4, 8005550 <pbuf_copy+0x88>
 8005542:	8962      	ldrh	r2, [r4, #10]
 8005544:	8923      	ldrh	r3, [r4, #8]
 8005546:	429a      	cmp	r2, r3
 8005548:	d102      	bne.n	8005550 <pbuf_copy+0x88>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1f2      	bne.n	8005536 <pbuf_copy+0x6e>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005550:	896a      	ldrh	r2, [r5, #10]
 8005552:	892b      	ldrh	r3, [r5, #8]
 8005554:	429a      	cmp	r2, r3
 8005556:	d102      	bne.n	800555e <pbuf_copy+0x96>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1eb      	bne.n	8005536 <pbuf_copy+0x6e>
  } while (p_from);
 800555e:	2c00      	cmp	r4, #0
 8005560:	d1c4      	bne.n	80054ec <pbuf_copy+0x24>
 8005562:	e7e5      	b.n	8005530 <pbuf_copy+0x68>

08005564 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005568:	460f      	mov	r7, r1
 800556a:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800556c:	4606      	mov	r6, r0
 800556e:	b320      	cbz	r0, 80055ba <pbuf_copy_partial+0x56>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005570:	b329      	cbz	r1, 80055be <pbuf_copy_partial+0x5a>
 8005572:	2500      	movs	r5, #0
  if ((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005574:	f1b8 0f00 	cmp.w	r8, #0
 8005578:	d000      	beq.n	800557c <pbuf_copy_partial+0x18>
 800557a:	b916      	cbnz	r6, 8005582 <pbuf_copy_partial+0x1e>
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 800557c:	4628      	mov	r0, r5
 800557e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((offset != 0) && (offset >= p->len)) {
 8005582:	b133      	cbz	r3, 8005592 <pbuf_copy_partial+0x2e>
 8005584:	8971      	ldrh	r1, [r6, #10]
 8005586:	428b      	cmp	r3, r1
 8005588:	d303      	bcc.n	8005592 <pbuf_copy_partial+0x2e>
      offset -= p->len;
 800558a:	1a5b      	subs	r3, r3, r1
 800558c:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800558e:	6836      	ldr	r6, [r6, #0]
 8005590:	e7f0      	b.n	8005574 <pbuf_copy_partial+0x10>
      buf_copy_len = p->len - offset;
 8005592:	8974      	ldrh	r4, [r6, #10]
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8005594:	1978      	adds	r0, r7, r5
 8005596:	6871      	ldr	r1, [r6, #4]
      buf_copy_len = p->len - offset;
 8005598:	1ae4      	subs	r4, r4, r3
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800559a:	4419      	add	r1, r3
      buf_copy_len = p->len - offset;
 800559c:	b2a4      	uxth	r4, r4
 800559e:	4544      	cmp	r4, r8
 80055a0:	bf28      	it	cs
 80055a2:	4644      	movcs	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80055a4:	4622      	mov	r2, r4
      copied_total += buf_copy_len;
 80055a6:	4425      	add	r5, r4
      len -= buf_copy_len;
 80055a8:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80055ac:	f005 ff81 	bl	800b4b2 <memcpy>
      copied_total += buf_copy_len;
 80055b0:	b2ad      	uxth	r5, r5
      offset = 0;
 80055b2:	2300      	movs	r3, #0
      len -= buf_copy_len;
 80055b4:	fa1f f884 	uxth.w	r8, r4
 80055b8:	e7e9      	b.n	800558e <pbuf_copy_partial+0x2a>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80055ba:	4605      	mov	r5, r0
 80055bc:	e7de      	b.n	800557c <pbuf_copy_partial+0x18>
 80055be:	460d      	mov	r5, r1
 80055c0:	e7dc      	b.n	800557c <pbuf_copy_partial+0x18>
	...

080055c4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80055c4:	4a12      	ldr	r2, [pc, #72]	; (8005610 <tcp_new_port+0x4c>)
 80055c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055cc:	8810      	ldrh	r0, [r2, #0]
  u8_t i;
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80055ce:	f64f 75ff 	movw	r5, #65535	; 0xffff
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80055d2:	4e10      	ldr	r6, [pc, #64]	; (8005614 <tcp_new_port+0x50>)
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80055d4:	42a8      	cmp	r0, r5
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80055d6:	f04f 0100 	mov.w	r1, #0
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80055da:	bf16      	itet	ne
 80055dc:	3001      	addne	r0, #1
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80055de:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80055e2:	b280      	uxthne	r0, r0
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80055e4:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
 80055e8:	6824      	ldr	r4, [r4, #0]
 80055ea:	b924      	cbnz	r4, 80055f6 <tcp_new_port+0x32>
 80055ec:	3101      	adds	r1, #1
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80055ee:	2904      	cmp	r1, #4
 80055f0:	d1f8      	bne.n	80055e4 <tcp_new_port+0x20>
 80055f2:	8010      	strh	r0, [r2, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 80055f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pcb->local_port == tcp_port) {
 80055f6:	8ae7      	ldrh	r7, [r4, #22]
 80055f8:	4287      	cmp	r7, r0
 80055fa:	d106      	bne.n	800560a <tcp_new_port+0x46>
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29b      	uxth	r3, r3
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1e7      	bne.n	80055d4 <tcp_new_port+0x10>
 8005604:	8010      	strh	r0, [r2, #0]
          return 0;
 8005606:	4618      	mov	r0, r3
 8005608:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800560a:	68e4      	ldr	r4, [r4, #12]
 800560c:	e7ed      	b.n	80055ea <tcp_new_port+0x26>
 800560e:	bf00      	nop
 8005610:	20000004 	.word	0x20000004
 8005614:	0800b934 	.word	0x0800b934

08005618 <tcp_init>:
{
 8005618:	4770      	bx	lr
	...

0800561c <tcp_bind>:
{
 800561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 800561e:	4d1a      	ldr	r5, [pc, #104]	; (8005688 <tcp_bind+0x6c>)
  if ((pcb == NULL) || (ipaddr == NULL) || !IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ipaddr)) {
 8005620:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 8005622:	2900      	cmp	r1, #0
 8005624:	bf18      	it	ne
 8005626:	460d      	movne	r5, r1
  if ((pcb == NULL) || (ipaddr == NULL) || !IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ipaddr)) {
 8005628:	b358      	cbz	r0, 8005682 <tcp_bind+0x66>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800562a:	7d03      	ldrb	r3, [r0, #20]
 800562c:	bb4b      	cbnz	r3, 8005682 <tcp_bind+0x66>
  if (port == 0) {
 800562e:	b932      	cbnz	r2, 800563e <tcp_bind+0x22>
    port = tcp_new_port();
 8005630:	f7ff ffc8 	bl	80055c4 <tcp_new_port>
    if (port == 0) {
 8005634:	4602      	mov	r2, r0
 8005636:	b950      	cbnz	r0, 800564e <tcp_bind+0x32>
      return ERR_BUF;
 8005638:	f06f 0001 	mvn.w	r0, #1
 800563c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800563e:	4f13      	ldr	r7, [pc, #76]	; (800568c <tcp_bind+0x70>)
 8005640:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8005644:	6808      	ldr	r0, [r1, #0]
 8005646:	b970      	cbnz	r0, 8005666 <tcp_bind+0x4a>
    for (i = 0; i < max_pcb_list; i++) {
 8005648:	3301      	adds	r3, #1
 800564a:	2b04      	cmp	r3, #4
 800564c:	d1f8      	bne.n	8005640 <tcp_bind+0x24>
  if (!ip_addr_isany(ipaddr)) {
 800564e:	682b      	ldr	r3, [r5, #0]
 8005650:	b103      	cbz	r3, 8005654 <tcp_bind+0x38>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8005652:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8005654:	4b0e      	ldr	r3, [pc, #56]	; (8005690 <tcp_bind+0x74>)
  pcb->local_port = port;
 8005656:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	601c      	str	r4, [r3, #0]
 800565c:	60e2      	str	r2, [r4, #12]
 800565e:	f002 fbb7 	bl	8007dd0 <tcp_timer_needed>
  return ERR_OK;
 8005662:	2000      	movs	r0, #0
 8005664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (cpcb->local_port == port) {
 8005666:	8ac1      	ldrh	r1, [r0, #22]
 8005668:	4291      	cmp	r1, r2
 800566a:	d105      	bne.n	8005678 <tcp_bind+0x5c>
                (ip_addr_isany(&cpcb->local_ip) ||
 800566c:	6806      	ldr	r6, [r0, #0]
 800566e:	b12e      	cbz	r6, 800567c <tcp_bind+0x60>
                ip_addr_isany(ipaddr) ||
 8005670:	6829      	ldr	r1, [r5, #0]
 8005672:	b119      	cbz	r1, 800567c <tcp_bind+0x60>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8005674:	428e      	cmp	r6, r1
 8005676:	d001      	beq.n	800567c <tcp_bind+0x60>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8005678:	68c0      	ldr	r0, [r0, #12]
 800567a:	e7e4      	b.n	8005646 <tcp_bind+0x2a>
              return ERR_USE;
 800567c:	f06f 0007 	mvn.w	r0, #7
 8005680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8005682:	f06f 0005 	mvn.w	r0, #5
}
 8005686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005688:	0800b890 	.word	0x0800b890
 800568c:	0800b934 	.word	0x0800b934
 8005690:	2000b0c4 	.word	0x2000b0c4

08005694 <tcp_listen_with_backlog>:
{
 8005694:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, return NULL);
 8005696:	7d03      	ldrb	r3, [r0, #20]
{
 8005698:	4605      	mov	r5, r0
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, return NULL);
 800569a:	b10b      	cbz	r3, 80056a0 <tcp_listen_with_backlog+0xc>
 800569c:	2000      	movs	r0, #0
 800569e:	bd38      	pop	{r3, r4, r5, pc}
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80056a0:	2002      	movs	r0, #2
 80056a2:	f7ff fcf1 	bl	8005088 <memp_malloc>
  if (lpcb == NULL) {
 80056a6:	4604      	mov	r4, r0
 80056a8:	2800      	cmp	r0, #0
 80056aa:	d0f7      	beq.n	800569c <tcp_listen_with_backlog+0x8>
  lpcb->callback_arg = pcb->callback_arg;
 80056ac:	692b      	ldr	r3, [r5, #16]
  lpcb->state = LISTEN;
 80056ae:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 80056b0:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 80056b2:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->state = LISTEN;
 80056b4:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 80056b6:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 80056b8:	7d6a      	ldrb	r2, [r5, #21]
 80056ba:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 80056bc:	7a2a      	ldrb	r2, [r5, #8]
 80056be:	7202      	strb	r2, [r0, #8]
  lpcb->ttl = pcb->ttl;
 80056c0:	7aaa      	ldrb	r2, [r5, #10]
 80056c2:	7282      	strb	r2, [r0, #10]
  lpcb->tos = pcb->tos;
 80056c4:	7a6a      	ldrb	r2, [r5, #9]
 80056c6:	7242      	strb	r2, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80056c8:	682a      	ldr	r2, [r5, #0]
 80056ca:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 80056cc:	b13b      	cbz	r3, 80056de <tcp_listen_with_backlog+0x4a>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80056ce:	4a0f      	ldr	r2, [pc, #60]	; (800570c <tcp_listen_with_backlog+0x78>)
 80056d0:	6813      	ldr	r3, [r2, #0]
 80056d2:	429d      	cmp	r5, r3
 80056d4:	d112      	bne.n	80056fc <tcp_listen_with_backlog+0x68>
 80056d6:	68eb      	ldr	r3, [r5, #12]
 80056d8:	6013      	str	r3, [r2, #0]
 80056da:	2300      	movs	r3, #0
 80056dc:	60eb      	str	r3, [r5, #12]
  memp_free(MEMP_TCP_PCB, pcb);
 80056de:	4629      	mov	r1, r5
 80056e0:	2001      	movs	r0, #1
 80056e2:	f7ff fce1 	bl	80050a8 <memp_free>
  lpcb->accept = tcp_accept_null;
 80056e6:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <tcp_listen_with_backlog+0x7c>)
 80056e8:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80056ea:	4b0a      	ldr	r3, [pc, #40]	; (8005714 <tcp_listen_with_backlog+0x80>)
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	601c      	str	r4, [r3, #0]
 80056f0:	60e2      	str	r2, [r4, #12]
 80056f2:	f002 fb6d 	bl	8007dd0 <tcp_timer_needed>
  return (struct tcp_pcb *)lpcb;
 80056f6:	4620      	mov	r0, r4
}
 80056f8:	bd38      	pop	{r3, r4, r5, pc}
 80056fa:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d0ec      	beq.n	80056da <tcp_listen_with_backlog+0x46>
 8005700:	68da      	ldr	r2, [r3, #12]
 8005702:	4295      	cmp	r5, r2
 8005704:	d1f9      	bne.n	80056fa <tcp_listen_with_backlog+0x66>
 8005706:	68ea      	ldr	r2, [r5, #12]
 8005708:	60da      	str	r2, [r3, #12]
 800570a:	e7e6      	b.n	80056da <tcp_listen_with_backlog+0x46>
 800570c:	2000b0c4 	.word	0x2000b0c4
 8005710:	08005f0f 	.word	0x08005f0f
 8005714:	2000b0c0 	.word	0x2000b0c0

08005718 <tcp_update_rcv_ann_wnd>:
{
 8005718:	b530      	push	{r4, r5, lr}
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800571a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
{
 800571c:	4602      	mov	r2, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800571e:	8d05      	ldrh	r5, [r0, #40]	; 0x28
 8005720:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005722:	1a6b      	subs	r3, r5, r1
 8005724:	1918      	adds	r0, r3, r4
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005726:	8e53      	ldrh	r3, [r2, #50]	; 0x32
 8005728:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800572c:	bf94      	ite	ls
 800572e:	1ac3      	subls	r3, r0, r3
 8005730:	f5a0 6386 	subhi.w	r3, r0, #1072	; 0x430
 8005734:	2b00      	cmp	r3, #0
 8005736:	db01      	blt.n	800573c <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005738:	8555      	strh	r5, [r2, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800573a:	bd30      	pop	{r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800573c:	1a63      	subs	r3, r4, r1
 800573e:	2000      	movs	r0, #0
 8005740:	2b00      	cmp	r3, #0
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005742:	bfd6      	itet	le
 8005744:	1b09      	suble	r1, r1, r4
      pcb->rcv_ann_wnd = 0;
 8005746:	8550      	strhgt	r0, [r2, #42]	; 0x2a
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005748:	8551      	strhle	r1, [r2, #42]	; 0x2a
}
 800574a:	bd30      	pop	{r4, r5, pc}

0800574c <tcp_recved>:
  pcb->rcv_wnd += len;
 800574c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 800574e:	4419      	add	r1, r3
 8005750:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8005752:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
{
 8005756:	b510      	push	{r4, lr}
 8005758:	4604      	mov	r4, r0
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800575a:	d911      	bls.n	8005780 <tcp_recved+0x34>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800575c:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8005760:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005762:	4620      	mov	r0, r4
 8005764:	f7ff ffd8 	bl	8005718 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005768:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 800576c:	db11      	blt.n	8005792 <tcp_recved+0x46>
    tcp_ack_now(pcb);
 800576e:	7ea3      	ldrb	r3, [r4, #26]
    tcp_output(pcb);
 8005770:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 8005772:	f043 0302 	orr.w	r3, r3, #2
 8005776:	76a3      	strb	r3, [r4, #26]
}
 8005778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_output(pcb);
 800577c:	f002 b868 	b.w	8007850 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005780:	7d03      	ldrb	r3, [r0, #20]
  } else if (pcb->rcv_wnd == 0) {
 8005782:	b109      	cbz	r1, 8005788 <tcp_recved+0x3c>
  pcb->rcv_wnd += len;
 8005784:	8521      	strh	r1, [r4, #40]	; 0x28
 8005786:	e7ec      	b.n	8005762 <tcp_recved+0x16>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8005788:	2b07      	cmp	r3, #7
 800578a:	d0e7      	beq.n	800575c <tcp_recved+0x10>
 800578c:	2b09      	cmp	r3, #9
 800578e:	d1f9      	bne.n	8005784 <tcp_recved+0x38>
 8005790:	e7e4      	b.n	800575c <tcp_recved+0x10>
 8005792:	bd10      	pop	{r4, pc}

08005794 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8005794:	b510      	push	{r4, lr}
  if (seg != NULL) {
 8005796:	4604      	mov	r4, r0
 8005798:	b148      	cbz	r0, 80057ae <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 800579a:	6840      	ldr	r0, [r0, #4]
 800579c:	b108      	cbz	r0, 80057a2 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800579e:	f7ff fd9b 	bl	80052d8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80057a2:	4621      	mov	r1, r4
 80057a4:	2003      	movs	r0, #3
  }
}
 80057a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 80057aa:	f7ff bc7d 	b.w	80050a8 <memp_free>
 80057ae:	bd10      	pop	{r4, pc}

080057b0 <tcp_segs_free>:
{
 80057b0:	b510      	push	{r4, lr}
  while (seg != NULL) {
 80057b2:	b900      	cbnz	r0, 80057b6 <tcp_segs_free+0x6>
}
 80057b4:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 80057b6:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 80057b8:	f7ff ffec 	bl	8005794 <tcp_seg_free>
    seg = next;
 80057bc:	4620      	mov	r0, r4
 80057be:	e7f8      	b.n	80057b2 <tcp_segs_free+0x2>

080057c0 <tcp_setprio>:
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  pcb->prio = prio;
 80057c0:	7541      	strb	r1, [r0, #21]
 80057c2:	4770      	bx	lr

080057c4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80057c4:	b538      	push	{r3, r4, r5, lr}
 80057c6:	4604      	mov	r4, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80057c8:	2003      	movs	r0, #3
 80057ca:	f7ff fc5d 	bl	8005088 <memp_malloc>
  if (cseg == NULL) {
 80057ce:	4605      	mov	r5, r0
 80057d0:	b160      	cbz	r0, 80057ec <tcp_seg_copy+0x28>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80057d2:	4620      	mov	r0, r4
 80057d4:	462b      	mov	r3, r5
 80057d6:	f104 0210 	add.w	r2, r4, #16
 80057da:	f850 1b04 	ldr.w	r1, [r0], #4
 80057de:	4290      	cmp	r0, r2
 80057e0:	f843 1b04 	str.w	r1, [r3], #4
 80057e4:	d1f9      	bne.n	80057da <tcp_seg_copy+0x16>
  pbuf_ref(cseg->p);
 80057e6:	6868      	ldr	r0, [r5, #4]
 80057e8:	f7ff fe5b 	bl	80054a2 <pbuf_ref>
  return cseg;
}
 80057ec:	4628      	mov	r0, r5
 80057ee:	bd38      	pop	{r3, r4, r5, pc}

080057f0 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80057f0:	b100      	cbz	r0, 80057f4 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 80057f2:	6101      	str	r1, [r0, #16]
 80057f4:	4770      	bx	lr

080057f6 <tcp_recv>:
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  if (pcb != NULL) {
 80057f6:	b108      	cbz	r0, 80057fc <tcp_recv+0x6>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
    pcb->recv = recv;
 80057f8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 80057fc:	4770      	bx	lr

080057fe <tcp_sent>:
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  if (pcb != NULL) {
 80057fe:	b100      	cbz	r0, 8005802 <tcp_sent+0x4>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
    pcb->sent = sent;
 8005800:	67c1      	str	r1, [r0, #124]	; 0x7c
 8005802:	4770      	bx	lr

08005804 <tcp_err>:
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  if (pcb != NULL) {
 8005804:	b108      	cbz	r0, 800580a <tcp_err+0x6>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
    pcb->errf = err;
 8005806:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 800580a:	4770      	bx	lr

0800580c <tcp_accept>:
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800580c:	b118      	cbz	r0, 8005816 <tcp_accept+0xa>
 800580e:	7d03      	ldrb	r3, [r0, #20]
 8005810:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
 8005812:	bf08      	it	eq
 8005814:	6181      	streq	r1, [r0, #24]
 8005816:	4770      	bx	lr

08005818 <tcp_poll>:
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8005818:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800581c:	7702      	strb	r2, [r0, #28]
 800581e:	4770      	bx	lr

08005820 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8005820:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 8005822:	7d03      	ldrb	r3, [r0, #20]
{
 8005824:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 8005826:	2b01      	cmp	r3, #1
 8005828:	d919      	bls.n	800585e <tcp_pcb_purge+0x3e>
 800582a:	2b0a      	cmp	r3, #10
 800582c:	d017      	beq.n	800585e <tcp_pcb_purge+0x3e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800582e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8005830:	b118      	cbz	r0, 800583a <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8005832:	f7ff fd51 	bl	80052d8 <pbuf_free>
      pcb->refused_data = NULL;
 8005836:	2300      	movs	r3, #0
 8005838:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800583a:	6f20      	ldr	r0, [r4, #112]	; 0x70
    pcb->ooseq = NULL;
 800583c:	2500      	movs	r5, #0
    tcp_segs_free(pcb->ooseq);
 800583e:	f7ff ffb7 	bl	80057b0 <tcp_segs_free>
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8005842:	f64f 73ff 	movw	r3, #65535	; 0xffff

    tcp_segs_free(pcb->unsent);
 8005846:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    pcb->rtime = -1;
 8005848:	8623      	strh	r3, [r4, #48]	; 0x30
    pcb->ooseq = NULL;
 800584a:	6725      	str	r5, [r4, #112]	; 0x70
    tcp_segs_free(pcb->unsent);
 800584c:	f7ff ffb0 	bl	80057b0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8005850:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005852:	f7ff ffad 	bl	80057b0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8005856:	66a5      	str	r5, [r4, #104]	; 0x68
 8005858:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800585a:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 800585e:	bd38      	pop	{r3, r4, r5, pc}

08005860 <tcp_slowtmr>:
{
 8005860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8005864:	4db3      	ldr	r5, [pc, #716]	; (8005b34 <tcp_slowtmr+0x2d4>)
{
 8005866:	b085      	sub	sp, #20
      tcp_active_pcbs_changed = 0;
 8005868:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 8005b50 <tcp_slowtmr+0x2f0>
  ++tcp_ticks;
 800586c:	682b      	ldr	r3, [r5, #0]
 800586e:	3301      	adds	r3, #1
 8005870:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 8005872:	4bb1      	ldr	r3, [pc, #708]	; (8005b38 <tcp_slowtmr+0x2d8>)
 8005874:	781a      	ldrb	r2, [r3, #0]
 8005876:	469b      	mov	fp, r3
 8005878:	3201      	adds	r2, #1
 800587a:	701a      	strb	r2, [r3, #0]
  pcb = tcp_active_pcbs;
 800587c:	4faf      	ldr	r7, [pc, #700]	; (8005b3c <tcp_slowtmr+0x2dc>)
  prev = NULL;
 800587e:	2600      	movs	r6, #0
  pcb = tcp_active_pcbs;
 8005880:	683c      	ldr	r4, [r7, #0]
  while (pcb != NULL) {
 8005882:	b93c      	cbnz	r4, 8005894 <tcp_slowtmr+0x34>
  pcb = tcp_tw_pcbs;
 8005884:	4fae      	ldr	r7, [pc, #696]	; (8005b40 <tcp_slowtmr+0x2e0>)
 8005886:	683e      	ldr	r6, [r7, #0]
  while (pcb != NULL) {
 8005888:	2e00      	cmp	r6, #0
 800588a:	f040 8139 	bne.w	8005b00 <tcp_slowtmr+0x2a0>
}
 800588e:	b005      	add	sp, #20
 8005890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pcb->last_timer == tcp_timer_ctr) {
 8005894:	f89b 3000 	ldrb.w	r3, [fp]
 8005898:	7f62      	ldrb	r2, [r4, #29]
 800589a:	429a      	cmp	r2, r3
 800589c:	d105      	bne.n	80058aa <tcp_slowtmr+0x4a>
      pcb = pcb->next;
 800589e:	f8d4 900c 	ldr.w	r9, [r4, #12]
 80058a2:	4634      	mov	r4, r6
      continue;
 80058a4:	4626      	mov	r6, r4
 80058a6:	464c      	mov	r4, r9
 80058a8:	e7eb      	b.n	8005882 <tcp_slowtmr+0x22>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80058aa:	7d21      	ldrb	r1, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 80058ac:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
 80058ae:	2902      	cmp	r1, #2
 80058b0:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80058b4:	d102      	bne.n	80058bc <tcp_slowtmr+0x5c>
 80058b6:	2a06      	cmp	r2, #6
 80058b8:	f000 80de 	beq.w	8005a78 <tcp_slowtmr+0x218>
    else if (pcb->nrtx == TCP_MAXRTX) {
 80058bc:	2a0c      	cmp	r2, #12
 80058be:	f000 80db 	beq.w	8005a78 <tcp_slowtmr+0x218>
      if (pcb->persist_backoff > 0) {
 80058c2:	f894 a095 	ldrb.w	sl, [r4, #149]	; 0x95
 80058c6:	f1ba 0f00 	cmp.w	sl, #0
 80058ca:	f000 809e 	beq.w	8005a0a <tcp_slowtmr+0x1aa>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80058ce:	489d      	ldr	r0, [pc, #628]	; (8005b44 <tcp_slowtmr+0x2e4>)
        if (pcb->persist_cnt < backoff_cnt) {
 80058d0:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80058d4:	4482      	add	sl, r0
 80058d6:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 80058da:	429a      	cmp	r2, r3
          pcb->persist_cnt++;
 80058dc:	bf84      	itt	hi
 80058de:	3301      	addhi	r3, #1
 80058e0:	f884 3094 	strbhi.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 80058e4:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d27d      	bcs.n	80059e8 <tcp_slowtmr+0x188>
    pcb_remove = 0;
 80058ec:	f04f 0a00 	mov.w	sl, #0
    if (pcb->state == FIN_WAIT_2) {
 80058f0:	7d23      	ldrb	r3, [r4, #20]
 80058f2:	2b06      	cmp	r3, #6
 80058f4:	d10b      	bne.n	800590e <tcp_slowtmr+0xae>
      if (pcb->flags & TF_RXCLOSED) {
 80058f6:	7ea2      	ldrb	r2, [r4, #26]
 80058f8:	06d2      	lsls	r2, r2, #27
 80058fa:	d508      	bpl.n	800590e <tcp_slowtmr+0xae>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80058fc:	682a      	ldr	r2, [r5, #0]
 80058fe:	6a21      	ldr	r1, [r4, #32]
 8005900:	1a52      	subs	r2, r2, r1
 8005902:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 8005904:	bf84      	itt	hi
 8005906:	f10a 0a01 	addhi.w	sl, sl, #1
 800590a:	fa5f fa8a 	uxtbhi.w	sl, sl
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800590e:	f894 9008 	ldrb.w	r9, [r4, #8]
 8005912:	f019 0908 	ands.w	r9, r9, #8
 8005916:	d01a      	beq.n	800594e <tcp_slowtmr+0xee>
 8005918:	2b04      	cmp	r3, #4
 800591a:	d002      	beq.n	8005922 <tcp_slowtmr+0xc2>
       ((pcb->state == ESTABLISHED) ||
 800591c:	2b07      	cmp	r3, #7
 800591e:	f040 80c0 	bne.w	8005aa2 <tcp_slowtmr+0x242>
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8005922:	f8d4 e090 	ldr.w	lr, [r4, #144]	; 0x90
 8005926:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800592a:	6829      	ldr	r1, [r5, #0]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800592c:	f50e 2224 	add.w	r2, lr, #671744	; 0xa4000
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005930:	6a23      	ldr	r3, [r4, #32]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8005932:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005936:	1ac9      	subs	r1, r1, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8005938:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800593c:	4291      	cmp	r1, r2
 800593e:	f240 809e 	bls.w	8005a7e <tcp_slowtmr+0x21e>
        ++pcb_remove;
 8005942:	f10a 0a01 	add.w	sl, sl, #1
        ++pcb_reset;
 8005946:	f04f 0901 	mov.w	r9, #1
        ++pcb_remove;
 800594a:	fa5f fa8a 	uxtb.w	sl, sl
    if (pcb->ooseq != NULL &&
 800594e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005950:	b168      	cbz	r0, 800596e <tcp_slowtmr+0x10e>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8005952:	682b      	ldr	r3, [r5, #0]
 8005954:	6a22      	ldr	r2, [r4, #32]
 8005956:	1a9a      	subs	r2, r3, r2
 8005958:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800595c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 8005960:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8005964:	d303      	bcc.n	800596e <tcp_slowtmr+0x10e>
      tcp_segs_free(pcb->ooseq);
 8005966:	f7ff ff23 	bl	80057b0 <tcp_segs_free>
      pcb->ooseq = NULL;
 800596a:	2300      	movs	r3, #0
 800596c:	6723      	str	r3, [r4, #112]	; 0x70
    if (pcb->state == SYN_RCVD) {
 800596e:	7d23      	ldrb	r3, [r4, #20]
 8005970:	2b03      	cmp	r3, #3
 8005972:	f040 8099 	bne.w	8005aa8 <tcp_slowtmr+0x248>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005976:	682b      	ldr	r3, [r5, #0]
 8005978:	6a22      	ldr	r2, [r4, #32]
 800597a:	1a9b      	subs	r3, r3, r2
 800597c:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800597e:	d803      	bhi.n	8005988 <tcp_slowtmr+0x128>
    if (pcb_remove) {
 8005980:	f1ba 0f00 	cmp.w	sl, #0
 8005984:	f000 809a 	beq.w	8005abc <tcp_slowtmr+0x25c>
      tcp_pcb_purge(pcb);
 8005988:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800598a:	f8d4 a08c 	ldr.w	sl, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 800598e:	f7ff ff47 	bl	8005820 <tcp_pcb_purge>
 8005992:	68e3      	ldr	r3, [r4, #12]
      if (prev != NULL) {
 8005994:	2e00      	cmp	r6, #0
 8005996:	f000 808f 	beq.w	8005ab8 <tcp_slowtmr+0x258>
        prev->next = pcb->next;
 800599a:	60f3      	str	r3, [r6, #12]
      if (pcb_reset) {
 800599c:	f1b9 0f00 	cmp.w	r9, #0
 80059a0:	d009      	beq.n	80059b6 <tcp_slowtmr+0x156>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80059a2:	8b23      	ldrh	r3, [r4, #24]
 80059a4:	4622      	mov	r2, r4
 80059a6:	9301      	str	r3, [sp, #4]
 80059a8:	8ae3      	ldrh	r3, [r4, #22]
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	1d23      	adds	r3, r4, #4
 80059ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80059b0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80059b2:	f002 f88f 	bl	8007ad4 <tcp_rst>
      err_arg = pcb->callback_arg;
 80059b6:	6923      	ldr	r3, [r4, #16]
      memp_free(MEMP_TCP_PCB, pcb2);
 80059b8:	4621      	mov	r1, r4
 80059ba:	2001      	movs	r0, #1
      pcb = pcb->next;
 80059bc:	f8d4 900c 	ldr.w	r9, [r4, #12]
      err_arg = pcb->callback_arg;
 80059c0:	9303      	str	r3, [sp, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 80059c2:	f7ff fb71 	bl	80050a8 <memp_free>
      tcp_active_pcbs_changed = 0;
 80059c6:	2200      	movs	r2, #0
 80059c8:	f888 2000 	strb.w	r2, [r8]
      TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
 80059cc:	f1ba 0f00 	cmp.w	sl, #0
 80059d0:	d004      	beq.n	80059dc <tcp_slowtmr+0x17c>
 80059d2:	9b03      	ldr	r3, [sp, #12]
 80059d4:	f06f 010c 	mvn.w	r1, #12
 80059d8:	4618      	mov	r0, r3
 80059da:	47d0      	blx	sl
      if (tcp_active_pcbs_changed) {
 80059dc:	f898 3000 	ldrb.w	r3, [r8]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f43f af5e 	beq.w	80058a2 <tcp_slowtmr+0x42>
 80059e6:	e749      	b.n	800587c <tcp_slowtmr+0x1c>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 80059e8:	4620      	mov	r0, r4
 80059ea:	f002 f950 	bl	8007c8e <tcp_zero_window_probe>
 80059ee:	2800      	cmp	r0, #0
 80059f0:	f47f af7c 	bne.w	80058ec <tcp_slowtmr+0x8c>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80059f4:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
            pcb->persist_cnt = 0;
 80059f8:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80059fc:	2b06      	cmp	r3, #6
 80059fe:	f63f af75 	bhi.w	80058ec <tcp_slowtmr+0x8c>
              pcb->persist_backoff++;
 8005a02:	3301      	adds	r3, #1
 8005a04:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8005a08:	e770      	b.n	80058ec <tcp_slowtmr+0x8c>
        if (pcb->rtime >= 0) {
 8005a0a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8005a0e:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 8005a10:	bfa4      	itt	ge
 8005a12:	3301      	addge	r3, #1
 8005a14:	8623      	strhge	r3, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8005a16:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f43f af67 	beq.w	80058ec <tcp_slowtmr+0x8c>
 8005a1e:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 8005a22:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8005a26:	4298      	cmp	r0, r3
 8005a28:	f6ff af60 	blt.w	80058ec <tcp_slowtmr+0x8c>
          if (pcb->state != SYN_SENT) {
 8005a2c:	2902      	cmp	r1, #2
 8005a2e:	d00a      	beq.n	8005a46 <tcp_slowtmr+0x1e6>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
 8005a30:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8005a34:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8005a38:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8005a3c:	4942      	ldr	r1, [pc, #264]	; (8005b48 <tcp_slowtmr+0x2e8>)
 8005a3e:	5c8a      	ldrb	r2, [r1, r2]
 8005a40:	4093      	lsls	r3, r2
 8005a42:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 8005a46:	2300      	movs	r3, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005a48:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005a4c:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          tcp_rexmit_rto(pcb);
 8005a4e:	4620      	mov	r0, r4
          pcb->rtime = 0;
 8005a50:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005a52:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          pcb->cwnd = pcb->mss;
 8005a56:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	bf28      	it	cs
 8005a5e:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005a60:	004a      	lsls	r2, r1, #1
          pcb->ssthresh = eff_wnd >> 1;
 8005a62:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005a64:	b292      	uxth	r2, r2
          pcb->ssthresh = eff_wnd >> 1;
 8005a66:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005a6a:	4293      	cmp	r3, r2
            pcb->ssthresh = (pcb->mss << 1);
 8005a6c:	bf38      	it	cc
 8005a6e:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8005a72:	f002 f877 	bl	8007b64 <tcp_rexmit_rto>
 8005a76:	e73b      	b.n	80058f0 <tcp_slowtmr+0x90>
      ++pcb_remove;
 8005a78:	f04f 0a01 	mov.w	sl, #1
 8005a7c:	e738      	b.n	80058f0 <tcp_slowtmr+0x90>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005a7e:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8005a82:	4a32      	ldr	r2, [pc, #200]	; (8005b4c <tcp_slowtmr+0x2ec>)
 8005a84:	fb02 e303 	mla	r3, r2, r3, lr
                / TCP_SLOW_INTERVAL)
 8005a88:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005a8c:	4299      	cmp	r1, r3
 8005a8e:	d908      	bls.n	8005aa2 <tcp_slowtmr+0x242>
        err = tcp_keepalive(pcb);
 8005a90:	4620      	mov	r0, r4
 8005a92:	f002 f8d2 	bl	8007c3a <tcp_keepalive>
        if (err == ERR_OK) {
 8005a96:	b920      	cbnz	r0, 8005aa2 <tcp_slowtmr+0x242>
          pcb->keep_cnt_sent++;
 8005a98:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8005aa2:	f04f 0900 	mov.w	r9, #0
 8005aa6:	e752      	b.n	800594e <tcp_slowtmr+0xee>
    if (pcb->state == LAST_ACK) {
 8005aa8:	2b09      	cmp	r3, #9
 8005aaa:	f47f af69 	bne.w	8005980 <tcp_slowtmr+0x120>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005aae:	682b      	ldr	r3, [r5, #0]
 8005ab0:	6a22      	ldr	r2, [r4, #32]
 8005ab2:	1a9b      	subs	r3, r3, r2
 8005ab4:	2bf0      	cmp	r3, #240	; 0xf0
 8005ab6:	e762      	b.n	800597e <tcp_slowtmr+0x11e>
        tcp_active_pcbs = pcb->next;
 8005ab8:	603b      	str	r3, [r7, #0]
 8005aba:	e76f      	b.n	800599c <tcp_slowtmr+0x13c>
      ++prev->polltmr;
 8005abc:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8005abe:	7f22      	ldrb	r2, [r4, #28]
      ++prev->polltmr;
 8005ac0:	3301      	adds	r3, #1
      pcb = pcb->next;
 8005ac2:	f8d4 900c 	ldr.w	r9, [r4, #12]
      ++prev->polltmr;
 8005ac6:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8005ac8:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8005aca:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8005acc:	f63f aeea 	bhi.w	80058a4 <tcp_slowtmr+0x44>
        TCP_EVENT_POLL(prev, err);
 8005ad0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 8005ad4:	f884 a01b 	strb.w	sl, [r4, #27]
        tcp_active_pcbs_changed = 0;
 8005ad8:	f888 a000 	strb.w	sl, [r8]
        TCP_EVENT_POLL(prev, err);
 8005adc:	b173      	cbz	r3, 8005afc <tcp_slowtmr+0x29c>
 8005ade:	4621      	mov	r1, r4
 8005ae0:	6920      	ldr	r0, [r4, #16]
 8005ae2:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8005ae4:	f898 3000 	ldrb.w	r3, [r8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f47f aec7 	bne.w	800587c <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 8005aee:	2800      	cmp	r0, #0
 8005af0:	f47f aed8 	bne.w	80058a4 <tcp_slowtmr+0x44>
          tcp_output(prev);
 8005af4:	4620      	mov	r0, r4
 8005af6:	f001 feab 	bl	8007850 <tcp_output>
 8005afa:	e6d3      	b.n	80058a4 <tcp_slowtmr+0x44>
        TCP_EVENT_POLL(prev, err);
 8005afc:	4650      	mov	r0, sl
 8005afe:	e7f1      	b.n	8005ae4 <tcp_slowtmr+0x284>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005b00:	682b      	ldr	r3, [r5, #0]
 8005b02:	6a32      	ldr	r2, [r6, #32]
 8005b04:	1a9b      	subs	r3, r3, r2
 8005b06:	2bf0      	cmp	r3, #240	; 0xf0
 8005b08:	d80b      	bhi.n	8005b22 <tcp_slowtmr+0x2c2>
      pcb = pcb->next;
 8005b0a:	4634      	mov	r4, r6
 8005b0c:	68f6      	ldr	r6, [r6, #12]
 8005b0e:	e6bb      	b.n	8005888 <tcp_slowtmr+0x28>
        prev->next = pcb->next;
 8005b10:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8005b12:	f8d6 800c 	ldr.w	r8, [r6, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8005b16:	4631      	mov	r1, r6
 8005b18:	2001      	movs	r0, #1
 8005b1a:	f7ff fac5 	bl	80050a8 <memp_free>
      pcb = pcb->next;
 8005b1e:	4646      	mov	r6, r8
 8005b20:	e6b2      	b.n	8005888 <tcp_slowtmr+0x28>
      tcp_pcb_purge(pcb);
 8005b22:	4630      	mov	r0, r6
 8005b24:	f7ff fe7c 	bl	8005820 <tcp_pcb_purge>
 8005b28:	68f3      	ldr	r3, [r6, #12]
      if (prev != NULL) {
 8005b2a:	2c00      	cmp	r4, #0
 8005b2c:	d1f0      	bne.n	8005b10 <tcp_slowtmr+0x2b0>
        tcp_tw_pcbs = pcb->next;
 8005b2e:	603b      	str	r3, [r7, #0]
 8005b30:	e7ef      	b.n	8005b12 <tcp_slowtmr+0x2b2>
 8005b32:	bf00      	nop
 8005b34:	2000b0bc 	.word	0x2000b0bc
 8005b38:	20000342 	.word	0x20000342
 8005b3c:	2000b0b8 	.word	0x2000b0b8
 8005b40:	2000b0c8 	.word	0x2000b0c8
 8005b44:	0800b944 	.word	0x0800b944
 8005b48:	0800b924 	.word	0x0800b924
 8005b4c:	000124f8 	.word	0x000124f8
 8005b50:	2000b0b4 	.word	0x2000b0b4

08005b54 <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 8005b54:	6803      	ldr	r3, [r0, #0]
 8005b56:	428b      	cmp	r3, r1
{
 8005b58:	b510      	push	{r4, lr}
 8005b5a:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 8005b5c:	d119      	bne.n	8005b92 <tcp_pcb_remove+0x3e>
 8005b5e:	68cb      	ldr	r3, [r1, #12]
 8005b60:	6003      	str	r3, [r0, #0]
 8005b62:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 8005b64:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 8005b66:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8005b68:	f7ff fe5a 	bl	8005820 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8005b6c:	7d23      	ldrb	r3, [r4, #20]
 8005b6e:	2b0a      	cmp	r3, #10
 8005b70:	d00a      	beq.n	8005b88 <tcp_pcb_remove+0x34>
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d008      	beq.n	8005b88 <tcp_pcb_remove+0x34>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 8005b76:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 8005b78:	07da      	lsls	r2, r3, #31
 8005b7a:	d505      	bpl.n	8005b88 <tcp_pcb_remove+0x34>
    pcb->flags |= TF_ACK_NOW;
 8005b7c:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 8005b80:	4620      	mov	r0, r4
    pcb->flags |= TF_ACK_NOW;
 8005b82:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8005b84:	f001 fe64 	bl	8007850 <tcp_output>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8005b8c:	82e3      	strh	r3, [r4, #22]
 8005b8e:	bd10      	pop	{r4, pc}
 8005b90:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d0e5      	beq.n	8005b62 <tcp_pcb_remove+0xe>
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	4294      	cmp	r4, r2
 8005b9a:	d1f9      	bne.n	8005b90 <tcp_pcb_remove+0x3c>
 8005b9c:	68e2      	ldr	r2, [r4, #12]
 8005b9e:	60da      	str	r2, [r3, #12]
 8005ba0:	e7df      	b.n	8005b62 <tcp_pcb_remove+0xe>
	...

08005ba4 <tcp_close_shutdown>:
{
 8005ba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ba6:	7d03      	ldrb	r3, [r0, #20]
 8005ba8:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005baa:	2900      	cmp	r1, #0
 8005bac:	d03f      	beq.n	8005c2e <tcp_close_shutdown+0x8a>
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	d001      	beq.n	8005bb6 <tcp_close_shutdown+0x12>
 8005bb2:	2b07      	cmp	r3, #7
 8005bb4:	d13b      	bne.n	8005c2e <tcp_close_shutdown+0x8a>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005bb6:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8005bb8:	b91a      	cbnz	r2, 8005bc2 <tcp_close_shutdown+0x1e>
 8005bba:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005bbc:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 8005bc0:	d035      	beq.n	8005c2e <tcp_close_shutdown+0x8a>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005bc2:	8b23      	ldrh	r3, [r4, #24]
 8005bc4:	4622      	mov	r2, r4
 8005bc6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005bc8:	9301      	str	r3, [sp, #4]
 8005bca:	8ae3      	ldrh	r3, [r4, #22]
 8005bcc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	1d23      	adds	r3, r4, #4
 8005bd2:	f001 ff7f 	bl	8007ad4 <tcp_rst>
      tcp_pcb_purge(pcb);
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	f7ff fe22 	bl	8005820 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005bdc:	4a43      	ldr	r2, [pc, #268]	; (8005cec <tcp_close_shutdown+0x148>)
 8005bde:	6813      	ldr	r3, [r2, #0]
 8005be0:	429c      	cmp	r4, r3
 8005be2:	d115      	bne.n	8005c10 <tcp_close_shutdown+0x6c>
 8005be4:	68e3      	ldr	r3, [r4, #12]
 8005be6:	6013      	str	r3, [r2, #0]
 8005be8:	4b41      	ldr	r3, [pc, #260]	; (8005cf0 <tcp_close_shutdown+0x14c>)
 8005bea:	2201      	movs	r2, #1
 8005bec:	2500      	movs	r5, #0
 8005bee:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8005bf0:	7d23      	ldrb	r3, [r4, #20]
      TCP_RMV_ACTIVE(pcb);
 8005bf2:	60e5      	str	r5, [r4, #12]
      if (pcb->state == ESTABLISHED) {
 8005bf4:	2b04      	cmp	r3, #4
 8005bf6:	d113      	bne.n	8005c20 <tcp_close_shutdown+0x7c>
        pcb->state = TIME_WAIT;
 8005bf8:	230a      	movs	r3, #10
 8005bfa:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8005bfc:	4b3d      	ldr	r3, [pc, #244]	; (8005cf4 <tcp_close_shutdown+0x150>)
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	601c      	str	r4, [r3, #0]
 8005c02:	60e2      	str	r2, [r4, #12]
 8005c04:	f002 f8e4 	bl	8007dd0 <tcp_timer_needed>
    tcp_output(pcb);
 8005c08:	2000      	movs	r0, #0
}
 8005c0a:	b003      	add	sp, #12
 8005c0c:	bd30      	pop	{r4, r5, pc}
 8005c0e:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d0e9      	beq.n	8005be8 <tcp_close_shutdown+0x44>
 8005c14:	68da      	ldr	r2, [r3, #12]
 8005c16:	4294      	cmp	r4, r2
 8005c18:	d1f9      	bne.n	8005c0e <tcp_close_shutdown+0x6a>
 8005c1a:	68e2      	ldr	r2, [r4, #12]
 8005c1c:	60da      	str	r2, [r3, #12]
 8005c1e:	e7e3      	b.n	8005be8 <tcp_close_shutdown+0x44>
        if (tcp_input_pcb == pcb) {
 8005c20:	4b35      	ldr	r3, [pc, #212]	; (8005cf8 <tcp_close_shutdown+0x154>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	429c      	cmp	r4, r3
 8005c26:	d121      	bne.n	8005c6c <tcp_close_shutdown+0xc8>
          tcp_trigger_input_pcb_close();
 8005c28:	f001 fb2a 	bl	8007280 <tcp_trigger_input_pcb_close>
 8005c2c:	e7ec      	b.n	8005c08 <tcp_close_shutdown+0x64>
  switch (pcb->state) {
 8005c2e:	2b07      	cmp	r3, #7
 8005c30:	d8ea      	bhi.n	8005c08 <tcp_close_shutdown+0x64>
 8005c32:	a201      	add	r2, pc, #4	; (adr r2, 8005c38 <tcp_close_shutdown+0x94>)
 8005c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c38:	08005c59 	.word	0x08005c59
 8005c3c:	08005c89 	.word	0x08005c89
 8005c40:	08005cb7 	.word	0x08005cb7
 8005c44:	08005cc9 	.word	0x08005cc9
 8005c48:	08005cc9 	.word	0x08005cc9
 8005c4c:	08005c09 	.word	0x08005c09
 8005c50:	08005c09 	.word	0x08005c09
 8005c54:	08005cdf 	.word	0x08005cdf
    if (pcb->local_port != 0) {
 8005c58:	8ae3      	ldrh	r3, [r4, #22]
 8005c5a:	b13b      	cbz	r3, 8005c6c <tcp_close_shutdown+0xc8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8005c5c:	4a27      	ldr	r2, [pc, #156]	; (8005cfc <tcp_close_shutdown+0x158>)
 8005c5e:	6813      	ldr	r3, [r2, #0]
 8005c60:	429c      	cmp	r4, r3
 8005c62:	d109      	bne.n	8005c78 <tcp_close_shutdown+0xd4>
 8005c64:	68e3      	ldr	r3, [r4, #12]
 8005c66:	6013      	str	r3, [r2, #0]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 8005c6c:	4621      	mov	r1, r4
 8005c6e:	2001      	movs	r0, #1
    memp_free(MEMP_TCP_PCB, pcb);
 8005c70:	f7ff fa1a 	bl	80050a8 <memp_free>
 8005c74:	e7c8      	b.n	8005c08 <tcp_close_shutdown+0x64>
 8005c76:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d0f5      	beq.n	8005c68 <tcp_close_shutdown+0xc4>
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	4294      	cmp	r4, r2
 8005c80:	d1f9      	bne.n	8005c76 <tcp_close_shutdown+0xd2>
 8005c82:	68e2      	ldr	r2, [r4, #12]
 8005c84:	60da      	str	r2, [r3, #12]
 8005c86:	e7ef      	b.n	8005c68 <tcp_close_shutdown+0xc4>
  switch (pcb->state) {
 8005c88:	2301      	movs	r3, #1
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8005c8a:	4a1d      	ldr	r2, [pc, #116]	; (8005d00 <tcp_close_shutdown+0x15c>)
         pcb->listener = NULL;
 8005c8c:	2100      	movs	r1, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8005c8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005c92:	6805      	ldr	r5, [r0, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005c94:	b94d      	cbnz	r5, 8005caa <tcp_close_shutdown+0x106>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005c96:	3301      	adds	r3, #1
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d1f8      	bne.n	8005c8e <tcp_close_shutdown+0xea>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	4819      	ldr	r0, [pc, #100]	; (8005d04 <tcp_close_shutdown+0x160>)
 8005ca0:	f7ff ff58 	bl	8005b54 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	2002      	movs	r0, #2
 8005ca8:	e7e2      	b.n	8005c70 <tcp_close_shutdown+0xcc>
      if (pcb->listener == lpcb) {
 8005caa:	6fa8      	ldr	r0, [r5, #120]	; 0x78
 8005cac:	4284      	cmp	r4, r0
         pcb->listener = NULL;
 8005cae:	bf08      	it	eq
 8005cb0:	67a9      	streq	r1, [r5, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005cb2:	68ed      	ldr	r5, [r5, #12]
 8005cb4:	e7ee      	b.n	8005c94 <tcp_close_shutdown+0xf0>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8005cb6:	4621      	mov	r1, r4
 8005cb8:	480c      	ldr	r0, [pc, #48]	; (8005cec <tcp_close_shutdown+0x148>)
 8005cba:	f7ff ff4b 	bl	8005b54 <tcp_pcb_remove>
 8005cbe:	2001      	movs	r0, #1
 8005cc0:	4b0b      	ldr	r3, [pc, #44]	; (8005cf0 <tcp_close_shutdown+0x14c>)
    memp_free(MEMP_TCP_PCB, pcb);
 8005cc2:	4621      	mov	r1, r4
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8005cc4:	7018      	strb	r0, [r3, #0]
 8005cc6:	e7d3      	b.n	8005c70 <tcp_close_shutdown+0xcc>
    err = tcp_send_fin(pcb);
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f001 fd69 	bl	80077a0 <tcp_send_fin>
    if (err == ERR_OK) {
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	d19b      	bne.n	8005c0a <tcp_close_shutdown+0x66>
      pcb->state = FIN_WAIT_1;
 8005cd2:	2305      	movs	r3, #5
      pcb->state = LAST_ACK;
 8005cd4:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f001 fdba 	bl	8007850 <tcp_output>
 8005cdc:	e794      	b.n	8005c08 <tcp_close_shutdown+0x64>
    err = tcp_send_fin(pcb);
 8005cde:	4620      	mov	r0, r4
 8005ce0:	f001 fd5e 	bl	80077a0 <tcp_send_fin>
    if (err == ERR_OK) {
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	d190      	bne.n	8005c0a <tcp_close_shutdown+0x66>
      pcb->state = LAST_ACK;
 8005ce8:	2309      	movs	r3, #9
 8005cea:	e7f3      	b.n	8005cd4 <tcp_close_shutdown+0x130>
 8005cec:	2000b0b8 	.word	0x2000b0b8
 8005cf0:	2000b0b4 	.word	0x2000b0b4
 8005cf4:	2000b0c8 	.word	0x2000b0c8
 8005cf8:	2000b0cc 	.word	0x2000b0cc
 8005cfc:	2000b0c4 	.word	0x2000b0c4
 8005d00:	0800b934 	.word	0x0800b934
 8005d04:	2000b0c0 	.word	0x2000b0c0

08005d08 <tcp_close>:
  if (pcb->state != LISTEN) {
 8005d08:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 8005d0a:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 8005d0c:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 8005d0e:	bf1e      	ittt	ne
 8005d10:	7e83      	ldrbne	r3, [r0, #26]
 8005d12:	f043 0310 	orrne.w	r3, r3, #16
 8005d16:	7683      	strbne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8005d18:	f7ff bf44 	b.w	8005ba4 <tcp_close_shutdown>

08005d1c <tcp_recv_null>:
{
 8005d1c:	b510      	push	{r4, lr}
 8005d1e:	4608      	mov	r0, r1
  if (p != NULL) {
 8005d20:	4614      	mov	r4, r2
 8005d22:	b13a      	cbz	r2, 8005d34 <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 8005d24:	8911      	ldrh	r1, [r2, #8]
 8005d26:	f7ff fd11 	bl	800574c <tcp_recved>
    pbuf_free(p);
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	f7ff fad4 	bl	80052d8 <pbuf_free>
}
 8005d30:	2000      	movs	r0, #0
 8005d32:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1fb      	bne.n	8005d30 <tcp_recv_null+0x14>
}
 8005d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8005d3c:	f7ff bfe4 	b.w	8005d08 <tcp_close>

08005d40 <tcp_process_refused_data>:
{
 8005d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 8005d42:	6f46      	ldr	r6, [r0, #116]	; 0x74
    pcb->refused_data = NULL;
 8005d44:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8005d46:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
{
 8005d4a:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 8005d4c:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8005d4e:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8005d50:	b1dd      	cbz	r5, 8005d8a <tcp_process_refused_data+0x4a>
 8005d52:	4601      	mov	r1, r0
 8005d54:	4632      	mov	r2, r6
 8005d56:	6900      	ldr	r0, [r0, #16]
 8005d58:	47a8      	blx	r5
 8005d5a:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8005d5c:	b9e0      	cbnz	r0, 8005d98 <tcp_process_refused_data+0x58>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8005d5e:	06bb      	lsls	r3, r7, #26
 8005d60:	d511      	bpl.n	8005d86 <tcp_process_refused_data+0x46>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8005d62:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8005d64:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8005d68:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 8005d6c:	bf1c      	itt	ne
 8005d6e:	3301      	addne	r3, #1
 8005d70:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8005d72:	b146      	cbz	r6, 8005d86 <tcp_process_refused_data+0x46>
 8005d74:	2300      	movs	r3, #0
 8005d76:	4621      	mov	r1, r4
 8005d78:	6920      	ldr	r0, [r4, #16]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8005d7e:	300d      	adds	r0, #13
 8005d80:	d101      	bne.n	8005d86 <tcp_process_refused_data+0x46>
          return ERR_ABRT;
 8005d82:	f06f 050c 	mvn.w	r5, #12
}
 8005d86:	4628      	mov	r0, r5
 8005d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8005d8a:	4601      	mov	r1, r0
 8005d8c:	462b      	mov	r3, r5
 8005d8e:	4632      	mov	r2, r6
 8005d90:	4628      	mov	r0, r5
 8005d92:	f7ff ffc3 	bl	8005d1c <tcp_recv_null>
 8005d96:	e7e0      	b.n	8005d5a <tcp_process_refused_data+0x1a>
    } else if (err == ERR_ABRT) {
 8005d98:	f110 050d 	adds.w	r5, r0, #13
 8005d9c:	d0f1      	beq.n	8005d82 <tcp_process_refused_data+0x42>
      pcb->refused_data = refused_data;
 8005d9e:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 8005da0:	f06f 0504 	mvn.w	r5, #4
 8005da4:	e7ef      	b.n	8005d86 <tcp_process_refused_data+0x46>
	...

08005da8 <tcp_fasttmr>:
{
 8005da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8005dac:	4d17      	ldr	r5, [pc, #92]	; (8005e0c <tcp_fasttmr+0x64>)
  pcb = tcp_active_pcbs;
 8005dae:	4f18      	ldr	r7, [pc, #96]	; (8005e10 <tcp_fasttmr+0x68>)
  ++tcp_timer_ctr;
 8005db0:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 8005db2:	4e18      	ldr	r6, [pc, #96]	; (8005e14 <tcp_fasttmr+0x6c>)
  ++tcp_timer_ctr;
 8005db4:	3301      	adds	r3, #1
 8005db6:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8005db8:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 8005dba:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8005dbe:	b90c      	cbnz	r4, 8005dc4 <tcp_fasttmr+0x1c>
}
 8005dc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 8005dc4:	782b      	ldrb	r3, [r5, #0]
 8005dc6:	7f62      	ldrb	r2, [r4, #29]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d01b      	beq.n	8005e04 <tcp_fasttmr+0x5c>
      pcb->last_timer = tcp_timer_ctr;
 8005dcc:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 8005dce:	7ea3      	ldrb	r3, [r4, #26]
 8005dd0:	07da      	lsls	r2, r3, #31
 8005dd2:	d509      	bpl.n	8005de8 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8005dd4:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 8005dd8:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 8005dda:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 8005ddc:	f001 fd38 	bl	8007850 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8005de0:	7ea3      	ldrb	r3, [r4, #26]
 8005de2:	f023 0303 	bic.w	r3, r3, #3
 8005de6:	76a3      	strb	r3, [r4, #26]
      if (pcb->refused_data != NULL) {
 8005de8:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 8005dea:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8005dee:	b13b      	cbz	r3, 8005e00 <tcp_fasttmr+0x58>
        tcp_process_refused_data(pcb);
 8005df0:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8005df2:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 8005df6:	f7ff ffa3 	bl	8005d40 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8005dfa:	7833      	ldrb	r3, [r6, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1db      	bne.n	8005db8 <tcp_fasttmr+0x10>
{
 8005e00:	464c      	mov	r4, r9
 8005e02:	e7dc      	b.n	8005dbe <tcp_fasttmr+0x16>
      pcb = pcb->next;
 8005e04:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8005e08:	e7fa      	b.n	8005e00 <tcp_fasttmr+0x58>
 8005e0a:	bf00      	nop
 8005e0c:	20000342 	.word	0x20000342
 8005e10:	2000b0b8 	.word	0x2000b0b8
 8005e14:	2000b0b4 	.word	0x2000b0b4

08005e18 <tcp_tmr>:
{
 8005e18:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8005e1a:	f7ff ffc5 	bl	8005da8 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8005e1e:	4a06      	ldr	r2, [pc, #24]	; (8005e38 <tcp_tmr+0x20>)
 8005e20:	7813      	ldrb	r3, [r2, #0]
 8005e22:	3301      	adds	r3, #1
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	7013      	strb	r3, [r2, #0]
 8005e28:	07db      	lsls	r3, r3, #31
 8005e2a:	d503      	bpl.n	8005e34 <tcp_tmr+0x1c>
}
 8005e2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8005e30:	f7ff bd16 	b.w	8005860 <tcp_slowtmr>
 8005e34:	bd08      	pop	{r3, pc}
 8005e36:	bf00      	nop
 8005e38:	20000341 	.word	0x20000341

08005e3c <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005e3c:	7d03      	ldrb	r3, [r0, #20]
  if (pcb->state == TIME_WAIT) {
 8005e3e:	2b0a      	cmp	r3, #10
{
 8005e40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e44:	4604      	mov	r4, r0
 8005e46:	460e      	mov	r6, r1
  if (pcb->state == TIME_WAIT) {
 8005e48:	d10a      	bne.n	8005e60 <tcp_abandon+0x24>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005e4a:	4601      	mov	r1, r0
 8005e4c:	482a      	ldr	r0, [pc, #168]	; (8005ef8 <tcp_abandon+0xbc>)
 8005e4e:	f7ff fe81 	bl	8005b54 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8005e52:	4621      	mov	r1, r4
 8005e54:	2001      	movs	r0, #1
}
 8005e56:	b002      	add	sp, #8
 8005e58:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 8005e5c:	f7ff b924 	b.w	80050a8 <memp_free>
    seqno = pcb->snd_nxt;
 8005e60:	f8d0 904c 	ldr.w	r9, [r0, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 8005e64:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
    errf = pcb->errf;
 8005e68:	f8d0 708c 	ldr.w	r7, [r0, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 8005e6c:	f8d0 8010 	ldr.w	r8, [r0, #16]
 8005e70:	8ac5      	ldrh	r5, [r0, #22]
    if (pcb->state == CLOSED) {
 8005e72:	b99b      	cbnz	r3, 8005e9c <tcp_abandon+0x60>
      if (pcb->local_port != 0) {
 8005e74:	b13d      	cbz	r5, 8005e86 <tcp_abandon+0x4a>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005e76:	4a21      	ldr	r2, [pc, #132]	; (8005efc <tcp_abandon+0xc0>)
 8005e78:	6813      	ldr	r3, [r2, #0]
 8005e7a:	4298      	cmp	r0, r3
 8005e7c:	d106      	bne.n	8005e8c <tcp_abandon+0x50>
 8005e7e:	68c3      	ldr	r3, [r0, #12]
 8005e80:	6013      	str	r3, [r2, #0]
 8005e82:	2500      	movs	r5, #0
 8005e84:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 8005e86:	462e      	mov	r6, r5
 8005e88:	e00f      	b.n	8005eaa <tcp_abandon+0x6e>
 8005e8a:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d0f8      	beq.n	8005e82 <tcp_abandon+0x46>
 8005e90:	68da      	ldr	r2, [r3, #12]
 8005e92:	4294      	cmp	r4, r2
 8005e94:	d1f9      	bne.n	8005e8a <tcp_abandon+0x4e>
 8005e96:	68e2      	ldr	r2, [r4, #12]
 8005e98:	60da      	str	r2, [r3, #12]
 8005e9a:	e7f2      	b.n	8005e82 <tcp_abandon+0x46>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005e9c:	4601      	mov	r1, r0
 8005e9e:	4818      	ldr	r0, [pc, #96]	; (8005f00 <tcp_abandon+0xc4>)
 8005ea0:	f7ff fe58 	bl	8005b54 <tcp_pcb_remove>
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	4b17      	ldr	r3, [pc, #92]	; (8005f04 <tcp_abandon+0xc8>)
 8005ea8:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8005eaa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005eac:	b108      	cbz	r0, 8005eb2 <tcp_abandon+0x76>
      tcp_segs_free(pcb->unacked);
 8005eae:	f7ff fc7f 	bl	80057b0 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8005eb2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005eb4:	b108      	cbz	r0, 8005eba <tcp_abandon+0x7e>
      tcp_segs_free(pcb->unsent);
 8005eb6:	f7ff fc7b 	bl	80057b0 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8005eba:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005ebc:	b108      	cbz	r0, 8005ec2 <tcp_abandon+0x86>
      tcp_segs_free(pcb->ooseq);
 8005ebe:	f7ff fc77 	bl	80057b0 <tcp_segs_free>
    if (send_rst) {
 8005ec2:	b146      	cbz	r6, 8005ed6 <tcp_abandon+0x9a>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005ec4:	8b23      	ldrh	r3, [r4, #24]
 8005ec6:	4622      	mov	r2, r4
 8005ec8:	9500      	str	r5, [sp, #0]
 8005eca:	4651      	mov	r1, sl
 8005ecc:	9301      	str	r3, [sp, #4]
 8005ece:	4648      	mov	r0, r9
 8005ed0:	1d23      	adds	r3, r4, #4
 8005ed2:	f001 fdff 	bl	8007ad4 <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 8005ed6:	4621      	mov	r1, r4
 8005ed8:	2001      	movs	r0, #1
 8005eda:	f7ff f8e5 	bl	80050a8 <memp_free>
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
 8005ede:	b13f      	cbz	r7, 8005ef0 <tcp_abandon+0xb4>
 8005ee0:	f06f 010c 	mvn.w	r1, #12
 8005ee4:	4640      	mov	r0, r8
 8005ee6:	463b      	mov	r3, r7
}
 8005ee8:	b002      	add	sp, #8
 8005eea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
 8005eee:	4718      	bx	r3
}
 8005ef0:	b002      	add	sp, #8
 8005ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ef6:	bf00      	nop
 8005ef8:	2000b0c8 	.word	0x2000b0c8
 8005efc:	2000b0c4 	.word	0x2000b0c4
 8005f00:	2000b0b8 	.word	0x2000b0b8
 8005f04:	2000b0b4 	.word	0x2000b0b4

08005f08 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8005f08:	2101      	movs	r1, #1
 8005f0a:	f7ff bf97 	b.w	8005e3c <tcp_abandon>

08005f0e <tcp_accept_null>:
  tcp_abort(pcb);
 8005f0e:	4608      	mov	r0, r1
{
 8005f10:	b508      	push	{r3, lr}
  tcp_abort(pcb);
 8005f12:	f7ff fff9 	bl	8005f08 <tcp_abort>
}
 8005f16:	f06f 000c 	mvn.w	r0, #12
 8005f1a:	bd08      	pop	{r3, pc}

08005f1c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	4605      	mov	r5, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 8005f20:	b901      	cbnz	r1, 8005f24 <tcp_netif_ip_addr_changed_pcblist+0x8>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8005f22:	bd38      	pop	{r3, r4, r5, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8005f24:	680a      	ldr	r2, [r1, #0]
 8005f26:	682b      	ldr	r3, [r5, #0]
 8005f28:	68cc      	ldr	r4, [r1, #12]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d102      	bne.n	8005f34 <tcp_netif_ip_addr_changed_pcblist+0x18>
      tcp_abort(pcb);
 8005f2e:	4608      	mov	r0, r1
 8005f30:	f7ff ffea 	bl	8005f08 <tcp_abort>
      pcb = pcb->next;
 8005f34:	4621      	mov	r1, r4
 8005f36:	e7f3      	b.n	8005f20 <tcp_netif_ip_addr_changed_pcblist+0x4>

08005f38 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005f38:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <tcp_kill_state+0x34>)
{
 8005f3a:	b430      	push	{r4, r5}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005f3c:	6819      	ldr	r1, [r3, #0]
  inactivity = 0;
 8005f3e:	2400      	movs	r4, #0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005f40:	4b0b      	ldr	r3, [pc, #44]	; (8005f70 <tcp_kill_state+0x38>)
  inactive = NULL;
 8005f42:	4622      	mov	r2, r4
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005f44:	681d      	ldr	r5, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005f46:	b921      	cbnz	r1, 8005f52 <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 8005f48:	b172      	cbz	r2, 8005f68 <tcp_kill_state+0x30>
    tcp_abandon(inactive, 0);
 8005f4a:	4610      	mov	r0, r2
}
 8005f4c:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 8005f4e:	f7ff bf75 	b.w	8005e3c <tcp_abandon>
    if (pcb->state == state) {
 8005f52:	7d0b      	ldrb	r3, [r1, #20]
 8005f54:	4283      	cmp	r3, r0
 8005f56:	d105      	bne.n	8005f64 <tcp_kill_state+0x2c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005f58:	6a0b      	ldr	r3, [r1, #32]
 8005f5a:	1aeb      	subs	r3, r5, r3
 8005f5c:	429c      	cmp	r4, r3
 8005f5e:	bf9c      	itt	ls
 8005f60:	461c      	movls	r4, r3
 8005f62:	460a      	movls	r2, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005f64:	68c9      	ldr	r1, [r1, #12]
 8005f66:	e7ee      	b.n	8005f46 <tcp_kill_state+0xe>
}
 8005f68:	bc30      	pop	{r4, r5}
 8005f6a:	4770      	bx	lr
 8005f6c:	2000b0b8 	.word	0x2000b0b8
 8005f70:	2000b0bc 	.word	0x2000b0bc

08005f74 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8005f74:	4b03      	ldr	r3, [pc, #12]	; (8005f84 <tcp_next_iss+0x10>)
 8005f76:	4a04      	ldr	r2, [pc, #16]	; (8005f88 <tcp_next_iss+0x14>)
 8005f78:	6818      	ldr	r0, [r3, #0]
 8005f7a:	6812      	ldr	r2, [r2, #0]
 8005f7c:	4410      	add	r0, r2
 8005f7e:	6018      	str	r0, [r3, #0]
}
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	20000000 	.word	0x20000000
 8005f88:	2000b0bc 	.word	0x2000b0bc

08005f8c <tcp_alloc>:
{
 8005f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8e:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005f90:	2001      	movs	r0, #1
 8005f92:	f7ff f879 	bl	8005088 <memp_malloc>
 8005f96:	4d3d      	ldr	r5, [pc, #244]	; (800608c <tcp_alloc+0x100>)
  if (pcb == NULL) {
 8005f98:	4604      	mov	r4, r0
 8005f9a:	bb90      	cbnz	r0, 8006002 <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005f9c:	4b3c      	ldr	r3, [pc, #240]	; (8006090 <tcp_alloc+0x104>)
  inactivity = 0;
 8005f9e:	4621      	mov	r1, r4
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005fa0:	6828      	ldr	r0, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d15c      	bne.n	8006062 <tcp_alloc+0xd6>
  if (inactive != NULL) {
 8005fa8:	b114      	cbz	r4, 8005fb0 <tcp_alloc+0x24>
    tcp_abort(inactive);
 8005faa:	4620      	mov	r0, r4
 8005fac:	f7ff ffac 	bl	8005f08 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005fb0:	2001      	movs	r0, #1
 8005fb2:	f7ff f869 	bl	8005088 <memp_malloc>
    if (pcb == NULL) {
 8005fb6:	4604      	mov	r4, r0
 8005fb8:	bb18      	cbnz	r0, 8006002 <tcp_alloc+0x76>
      tcp_kill_state(LAST_ACK);
 8005fba:	2009      	movs	r0, #9
 8005fbc:	f7ff ffbc 	bl	8005f38 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005fc0:	2001      	movs	r0, #1
 8005fc2:	f7ff f861 	bl	8005088 <memp_malloc>
      if (pcb == NULL) {
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	b9d8      	cbnz	r0, 8006002 <tcp_alloc+0x76>
        tcp_kill_state(CLOSING);
 8005fca:	2008      	movs	r0, #8
 8005fcc:	f7ff ffb4 	bl	8005f38 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005fd0:	2001      	movs	r0, #1
 8005fd2:	f7ff f859 	bl	8005088 <memp_malloc>
        if (pcb == NULL) {
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	b998      	cbnz	r0, 8006002 <tcp_alloc+0x76>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8005fda:	f016 0f80 	tst.w	r6, #128	; 0x80
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005fde:	4b2d      	ldr	r3, [pc, #180]	; (8006094 <tcp_alloc+0x108>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005fe0:	f8d5 e000 	ldr.w	lr, [r5]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8005fe4:	bf0c      	ite	eq
 8005fe6:	4631      	moveq	r1, r6
 8005fe8:	217f      	movne	r1, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d140      	bne.n	8006072 <tcp_alloc+0xe6>
  if (inactive != NULL) {
 8005ff0:	b114      	cbz	r4, 8005ff8 <tcp_alloc+0x6c>
    tcp_abort(inactive);
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f7ff ff88 	bl	8005f08 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	f7ff f845 	bl	8005088 <memp_malloc>
  if (pcb != NULL) {
 8005ffe:	4604      	mov	r4, r0
 8006000:	b368      	cbz	r0, 800605e <tcp_alloc+0xd2>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006002:	2298      	movs	r2, #152	; 0x98
 8006004:	2100      	movs	r1, #0
 8006006:	4620      	mov	r0, r4
 8006008:	f005 fa5e 	bl	800b4c8 <memset>
    pcb->snd_buf = TCP_SND_BUF;
 800600c:	f44f 6386 	mov.w	r3, #1072	; 0x430
    pcb->prio = prio;
 8006010:	7566      	strb	r6, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006012:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006016:	f44f 6306 	mov.w	r3, #2144	; 0x860
 800601a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800601c:	8523      	strh	r3, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800601e:	23ff      	movs	r3, #255	; 0xff
 8006020:	72a3      	strb	r3, [r4, #10]
    pcb->mss = INITIAL_MSS;
 8006022:	f44f 7306 	mov.w	r3, #536	; 0x218
 8006026:	8663      	strh	r3, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006028:	2306      	movs	r3, #6
 800602a:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800602e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8006030:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006034:	8623      	strh	r3, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8006036:	2301      	movs	r3, #1
 8006038:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    iss = tcp_next_iss();
 800603c:	f7ff ff9a 	bl	8005f74 <tcp_next_iss>
    pcb->tmr = tcp_ticks;
 8006040:	682b      	ldr	r3, [r5, #0]
    pcb->snd_wl2 = iss;
 8006042:	6560      	str	r0, [r4, #84]	; 0x54
    pcb->tmr = tcp_ticks;
 8006044:	6223      	str	r3, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006046:	4b14      	ldr	r3, [pc, #80]	; (8006098 <tcp_alloc+0x10c>)
    pcb->snd_nxt = iss;
 8006048:	64e0      	str	r0, [r4, #76]	; 0x4c
    pcb->last_timer = tcp_timer_ctr;
 800604a:	781b      	ldrb	r3, [r3, #0]
    pcb->lastack = iss;
 800604c:	6460      	str	r0, [r4, #68]	; 0x44
    pcb->last_timer = tcp_timer_ctr;
 800604e:	7763      	strb	r3, [r4, #29]
    pcb->recv = tcp_recv_null;
 8006050:	4b12      	ldr	r3, [pc, #72]	; (800609c <tcp_alloc+0x110>)
    pcb->snd_lbb = iss;
 8006052:	65a0      	str	r0, [r4, #88]	; 0x58
    pcb->recv = tcp_recv_null;
 8006054:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006058:	4b11      	ldr	r3, [pc, #68]	; (80060a0 <tcp_alloc+0x114>)
 800605a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 800605e:	4620      	mov	r0, r4
 8006060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006062:	6a1a      	ldr	r2, [r3, #32]
 8006064:	1a82      	subs	r2, r0, r2
 8006066:	428a      	cmp	r2, r1
 8006068:	bf24      	itt	cs
 800606a:	461c      	movcs	r4, r3
 800606c:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	e798      	b.n	8005fa4 <tcp_alloc+0x18>
    if (pcb->prio <= mprio &&
 8006072:	7d5f      	ldrb	r7, [r3, #21]
 8006074:	428f      	cmp	r7, r1
 8006076:	d807      	bhi.n	8006088 <tcp_alloc+0xfc>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006078:	6a1a      	ldr	r2, [r3, #32]
 800607a:	ebae 0202 	sub.w	r2, lr, r2
    if (pcb->prio <= mprio &&
 800607e:	4282      	cmp	r2, r0
 8006080:	bf22      	ittt	cs
 8006082:	4639      	movcs	r1, r7
 8006084:	4610      	movcs	r0, r2
 8006086:	461c      	movcs	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	e7af      	b.n	8005fec <tcp_alloc+0x60>
 800608c:	2000b0bc 	.word	0x2000b0bc
 8006090:	2000b0c8 	.word	0x2000b0c8
 8006094:	2000b0b8 	.word	0x2000b0b8
 8006098:	20000342 	.word	0x20000342
 800609c:	08005d1d 	.word	0x08005d1d
 80060a0:	006ddd00 	.word	0x006ddd00

080060a4 <tcp_new>:
  return tcp_alloc(TCP_PRIO_NORMAL);
 80060a4:	2040      	movs	r0, #64	; 0x40
 80060a6:	f7ff bf71 	b.w	8005f8c <tcp_alloc>

080060aa <tcp_eff_send_mss_impl>:
{
 80060aa:	b510      	push	{r4, lr}
 80060ac:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 80060ae:	4608      	mov	r0, r1
 80060b0:	f7fe fab4 	bl	800461c <ip4_route>
    if (outif == NULL) {
 80060b4:	b130      	cbz	r0, 80060c4 <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 80060b6:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  if (mtu != 0) {
 80060b8:	b123      	cbz	r3, 80060c4 <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80060ba:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 80060bc:	b29b      	uxth	r3, r3
 80060be:	429c      	cmp	r4, r3
 80060c0:	bf28      	it	cs
 80060c2:	461c      	movcs	r4, r3
}
 80060c4:	4620      	mov	r0, r4
 80060c6:	bd10      	pop	{r4, pc}

080060c8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80060c8:	b538      	push	{r3, r4, r5, lr}
 80060ca:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 80060cc:	4604      	mov	r4, r0
 80060ce:	b180      	cbz	r0, 80060f2 <tcp_netif_ip_addr_changed+0x2a>
 80060d0:	6803      	ldr	r3, [r0, #0]
 80060d2:	b173      	cbz	r3, 80060f2 <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80060d4:	4b0c      	ldr	r3, [pc, #48]	; (8006108 <tcp_netif_ip_addr_changed+0x40>)
 80060d6:	6819      	ldr	r1, [r3, #0]
 80060d8:	f7ff ff20 	bl	8005f1c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80060dc:	4b0b      	ldr	r3, [pc, #44]	; (800610c <tcp_netif_ip_addr_changed+0x44>)
 80060de:	4620      	mov	r0, r4
 80060e0:	6819      	ldr	r1, [r3, #0]
 80060e2:	f7ff ff1b 	bl	8005f1c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80060e6:	b125      	cbz	r5, 80060f2 <tcp_netif_ip_addr_changed+0x2a>
 80060e8:	682b      	ldr	r3, [r5, #0]
 80060ea:	b113      	cbz	r3, 80060f2 <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80060ec:	4b08      	ldr	r3, [pc, #32]	; (8006110 <tcp_netif_ip_addr_changed+0x48>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	b903      	cbnz	r3, 80060f4 <tcp_netif_ip_addr_changed+0x2c>
 80060f2:	bd38      	pop	{r3, r4, r5, pc}
        next = lpcb->next;
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80060f4:	6818      	ldr	r0, [r3, #0]
 80060f6:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 80060f8:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80060fa:	4288      	cmp	r0, r1
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80060fc:	bf04      	itt	eq
 80060fe:	6829      	ldreq	r1, [r5, #0]
 8006100:	6019      	streq	r1, [r3, #0]
{
 8006102:	4613      	mov	r3, r2
 8006104:	e7f4      	b.n	80060f0 <tcp_netif_ip_addr_changed+0x28>
 8006106:	bf00      	nop
 8006108:	2000b0b8 	.word	0x2000b0b8
 800610c:	2000b0c4 	.word	0x2000b0c4
 8006110:	2000b0c0 	.word	0x2000b0c0

08006114 <tcp_oos_insert_segment>:
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8006114:	68c3      	ldr	r3, [r0, #12]
{
 8006116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800611a:	4605      	mov	r5, r0
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800611c:	8998      	ldrh	r0, [r3, #12]
{
 800611e:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8006120:	f7fd ff9d 	bl	800405e <lwip_htons>
 8006124:	07c2      	lsls	r2, r0, #31
 8006126:	d415      	bmi.n	8006154 <tcp_oos_insert_segment+0x40>
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
 8006128:	4e18      	ldr	r6, [pc, #96]	; (800618c <tcp_oos_insert_segment+0x78>)
    while (next &&
 800612a:	b1bc      	cbz	r4, 800615c <tcp_oos_insert_segment+0x48>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800612c:	68e7      	ldr	r7, [r4, #12]
 800612e:	6830      	ldr	r0, [r6, #0]
 8006130:	892b      	ldrh	r3, [r5, #8]
 8006132:	6879      	ldr	r1, [r7, #4]
 8006134:	8922      	ldrh	r2, [r4, #8]
 8006136:	4403      	add	r3, r0
 8006138:	440a      	add	r2, r1
 800613a:	1a9a      	subs	r2, r3, r2
    while (next &&
 800613c:	2a00      	cmp	r2, #0
 800613e:	da10      	bge.n	8006162 <tcp_oos_insert_segment+0x4e>
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8006140:	1a5b      	subs	r3, r3, r1
    if (next &&
 8006142:	2b00      	cmp	r3, #0
 8006144:	dd0a      	ble.n	800615c <tcp_oos_insert_segment+0x48>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8006146:	1a09      	subs	r1, r1, r0
      pbuf_realloc(cseg->p, cseg->len);
 8006148:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800614a:	b289      	uxth	r1, r1
 800614c:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800614e:	f7ff f977 	bl	8005440 <pbuf_realloc>
 8006152:	e003      	b.n	800615c <tcp_oos_insert_segment+0x48>
    tcp_segs_free(next);
 8006154:	4620      	mov	r0, r4
    next = NULL;
 8006156:	2400      	movs	r4, #0
    tcp_segs_free(next);
 8006158:	f7ff fb2a 	bl	80057b0 <tcp_segs_free>
    }
  }
  cseg->next = next;
 800615c:	602c      	str	r4, [r5, #0]
}
 800615e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8006162:	89b8      	ldrh	r0, [r7, #12]
 8006164:	f7fd ff7b 	bl	800405e <lwip_htons>
 8006168:	07c3      	lsls	r3, r0, #31
 800616a:	d509      	bpl.n	8006180 <tcp_oos_insert_segment+0x6c>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800616c:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8006170:	2001      	movs	r0, #1
 8006172:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 8006176:	f7fd ff72 	bl	800405e <lwip_htons>
 800617a:	4338      	orrs	r0, r7
 800617c:	f8a8 000c 	strh.w	r0, [r8, #12]
      next = next->next;
 8006180:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 8006182:	4620      	mov	r0, r4
 8006184:	f7ff fb06 	bl	8005794 <tcp_seg_free>
      next = next->next;
 8006188:	463c      	mov	r4, r7
 800618a:	e7ce      	b.n	800612a <tcp_oos_insert_segment+0x16>
 800618c:	20000368 	.word	0x20000368

08006190 <tcp_receive>:
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
 8006190:	4ba9      	ldr	r3, [pc, #676]	; (8006438 <tcp_receive+0x2a8>)
{
 8006192:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (flags & TCP_ACK) {
 8006196:	781b      	ldrb	r3, [r3, #0]
{
 8006198:	4604      	mov	r4, r0
 800619a:	4ea8      	ldr	r6, [pc, #672]	; (800643c <tcp_receive+0x2ac>)
  if (flags & TCP_ACK) {
 800619c:	f013 0f10 	tst.w	r3, #16
 80061a0:	d074      	beq.n	800628c <tcp_receive+0xfc>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80061a2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80061a4:	6835      	ldr	r5, [r6, #0]
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80061a6:	7d00      	ldrb	r0, [r0, #20]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80061a8:	1b5f      	subs	r7, r3, r5
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80061aa:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 80061ae:	6d61      	ldr	r1, [r4, #84]	; 0x54
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80061b0:	2f00      	cmp	r7, #0
 80061b2:	4fa3      	ldr	r7, [pc, #652]	; (8006440 <tcp_receive+0x2b0>)
 80061b4:	db0d      	blt.n	80061d2 <tcp_receive+0x42>
 80061b6:	42ab      	cmp	r3, r5
 80061b8:	d103      	bne.n	80061c2 <tcp_receive+0x32>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	1acb      	subs	r3, r1, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	db07      	blt.n	80061d2 <tcp_receive+0x42>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	4299      	cmp	r1, r3
 80061c6:	d11f      	bne.n	8006208 <tcp_receive+0x78>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80061c8:	4b9e      	ldr	r3, [pc, #632]	; (8006444 <tcp_receive+0x2b4>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	89db      	ldrh	r3, [r3, #14]
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d91a      	bls.n	8006208 <tcp_receive+0x78>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80061d2:	4b9c      	ldr	r3, [pc, #624]	; (8006444 <tcp_receive+0x2b4>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80061d4:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f8b3 e00e 	ldrh.w	lr, [r3, #14]
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
 80061de:	6525      	str	r5, [r4, #80]	; 0x50
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80061e0:	45f4      	cmp	ip, lr
      pcb->snd_wl2 = ackno;
 80061e2:	683d      	ldr	r5, [r7, #0]
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80061e4:	4673      	mov	r3, lr
 80061e6:	f8a4 e05c 	strh.w	lr, [r4, #92]	; 0x5c
      pcb->snd_wl2 = ackno;
 80061ea:	6565      	str	r5, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 80061ec:	bf38      	it	cc
 80061ee:	f8a4 e05e 	strhcc.w	lr, [r4, #94]	; 0x5e
 80061f2:	f894 5095 	ldrb.w	r5, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f040 8113 	bne.w	8006422 <tcp_receive+0x292>
        if (pcb->persist_backoff == 0) {
 80061fc:	b925      	cbnz	r5, 8006208 <tcp_receive+0x78>
          /* start persist timer */
          pcb->persist_cnt = 0;
          pcb->persist_backoff = 1;
 80061fe:	2301      	movs	r3, #1
          pcb->persist_cnt = 0;
 8006200:	f884 e094 	strb.w	lr, [r4, #148]	; 0x94
        }
      } else if (pcb->persist_backoff > 0) {
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8006204:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 800620e:	eba3 050e 	sub.w	r5, r3, lr
 8006212:	2d00      	cmp	r5, #0
 8006214:	4d8c      	ldr	r5, [pc, #560]	; (8006448 <tcp_receive+0x2b8>)
 8006216:	f300 811d 	bgt.w	8006454 <tcp_receive+0x2c4>
      /* Clause 2 */
      if (tcplen == 0) {
 800621a:	488c      	ldr	r0, [pc, #560]	; (800644c <tcp_receive+0x2bc>)
 800621c:	8800      	ldrh	r0, [r0, #0]
 800621e:	2800      	cmp	r0, #0
 8006220:	f040 8388 	bne.w	8006934 <tcp_receive+0x7a4>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8006224:	440a      	add	r2, r1
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8006226:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006228:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800622c:	4401      	add	r1, r0
 800622e:	428a      	cmp	r2, r1
 8006230:	f040 8380 	bne.w	8006934 <tcp_receive+0x7a4>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8006234:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8006238:	2a00      	cmp	r2, #0
 800623a:	f2c0 837b 	blt.w	8006934 <tcp_receive+0x7a4>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800623e:	4573      	cmp	r3, lr
 8006240:	f040 8378 	bne.w	8006934 <tcp_receive+0x7a4>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8006244:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006248:	1c53      	adds	r3, r2, #1
 800624a:	b2db      	uxtb	r3, r3
 800624c:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 800624e:	bf38      	it	cc
 8006250:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8006254:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006258:	2b03      	cmp	r3, #3
 800625a:	f240 80e7 	bls.w	800642c <tcp_receive+0x29c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800625e:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8006262:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8006264:	4413      	add	r3, r2
 8006266:	b29b      	uxth	r3, r3
 8006268:	429a      	cmp	r2, r3
 800626a:	d201      	bcs.n	8006270 <tcp_receive+0xe0>
                  pcb->cwnd += pcb->mss;
 800626c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8006270:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006272:	2b00      	cmp	r3, #0
 8006274:	f040 8161 	bne.w	800653a <tcp_receive+0x3aa>
      if (pcb->snd_queuelen != 0) {
        LWIP_ASSERT("tcp_receive: valid queue length",
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8006278:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800627c:	882a      	ldrh	r2, [r5, #0]
 800627e:	4413      	add	r3, r2
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8006280:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 8006282:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8006286:	2a00      	cmp	r2, #0
 8006288:	f040 8197 	bne.w	80065ba <tcp_receive+0x42a>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800628c:	4f6f      	ldr	r7, [pc, #444]	; (800644c <tcp_receive+0x2bc>)
 800628e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006290:	8838      	ldrh	r0, [r7, #0]
 8006292:	2800      	cmp	r0, #0
 8006294:	f000 8342 	beq.w	800691c <tcp_receive+0x78c>
 8006298:	7d23      	ldrb	r3, [r4, #20]
 800629a:	2b06      	cmp	r3, #6
 800629c:	f200 833e 	bhi.w	800691c <tcp_receive+0x78c>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80062a0:	6833      	ldr	r3, [r6, #0]
 80062a2:	eba2 0e03 	sub.w	lr, r2, r3
 80062a6:	f1be 0f01 	cmp.w	lr, #1
 80062aa:	f100 81b4 	bmi.w	8006616 <tcp_receive+0x486>
 80062ae:	f1c3 0101 	rsb	r1, r3, #1
 80062b2:	1a09      	subs	r1, r1, r0
 80062b4:	4411      	add	r1, r2
 80062b6:	2900      	cmp	r1, #0
 80062b8:	f300 81ad 	bgt.w	8006616 <tcp_receive+0x486>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80062bc:	4d64      	ldr	r5, [pc, #400]	; (8006450 <tcp_receive+0x2c0>)
      off = pcb->rcv_nxt - seqno;
 80062be:	4671      	mov	r1, lr
      struct pbuf *p = inseg.p;
 80062c0:	6868      	ldr	r0, [r5, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
 80062c2:	8943      	ldrh	r3, [r0, #10]
 80062c4:	459e      	cmp	lr, r3
 80062c6:	f340 81a3 	ble.w	8006610 <tcp_receive+0x480>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80062ca:	8903      	ldrh	r3, [r0, #8]
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 80062cc:	f04f 0e00 	mov.w	lr, #0
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80062d0:	1a5b      	subs	r3, r3, r1
 80062d2:	b29b      	uxth	r3, r3
        while (p->len < off) {
 80062d4:	8942      	ldrh	r2, [r0, #10]
 80062d6:	4291      	cmp	r1, r2
 80062d8:	f300 8194 	bgt.w	8006604 <tcp_receive+0x474>
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 80062dc:	4249      	negs	r1, r1
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 80062de:	b209      	sxth	r1, r1
 80062e0:	f7fe fff3 	bl	80052ca <pbuf_header>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80062e4:	8929      	ldrh	r1, [r5, #8]
 80062e6:	6833      	ldr	r3, [r6, #0]
 80062e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80062ea:	440b      	add	r3, r1
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80062ec:	6032      	str	r2, [r6, #0]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80062ee:	1a9b      	subs	r3, r3, r2
 80062f0:	812b      	strh	r3, [r5, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80062f2:	68eb      	ldr	r3, [r5, #12]
 80062f4:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80062f6:	6831      	ldr	r1, [r6, #0]
 80062f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80062fa:	1a8b      	subs	r3, r1, r2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f2c0 8308 	blt.w	8006912 <tcp_receive+0x782>
 8006302:	1c4b      	adds	r3, r1, #1
 8006304:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8006306:	1a9b      	subs	r3, r3, r2
 8006308:	1a1b      	subs	r3, r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	f300 8301 	bgt.w	8006912 <tcp_receive+0x782>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8006310:	4291      	cmp	r1, r2
 8006312:	f040 8234 	bne.w	800677e <tcp_receive+0x5ee>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8006316:	4d4e      	ldr	r5, [pc, #312]	; (8006450 <tcp_receive+0x2c0>)
 8006318:	68eb      	ldr	r3, [r5, #12]
 800631a:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800631e:	8998      	ldrh	r0, [r3, #12]
 8006320:	f7fd fe9d 	bl	800405e <lwip_htons>
 8006324:	f010 0003 	ands.w	r0, r0, #3

        if (tcplen > pcb->rcv_wnd) {
 8006328:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800632a:	bf18      	it	ne
 800632c:	2001      	movne	r0, #1
 800632e:	4440      	add	r0, r8
 8006330:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 8006332:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8006334:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 8006336:	d233      	bcs.n	80063a0 <tcp_receive+0x210>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8006338:	68eb      	ldr	r3, [r5, #12]
 800633a:	8998      	ldrh	r0, [r3, #12]
 800633c:	f7fd fe8f 	bl	800405e <lwip_htons>
 8006340:	07c2      	lsls	r2, r0, #31
 8006342:	d510      	bpl.n	8006366 <tcp_receive+0x1d6>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8006344:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8006348:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 800634c:	4640      	mov	r0, r8
 800634e:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8006352:	f7fd fe84 	bl	800405e <lwip_htons>
 8006356:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800635a:	f7fd fe80 	bl	800405e <lwip_htons>
 800635e:	ea40 0808 	orr.w	r8, r0, r8
 8006362:	f8a9 800c 	strh.w	r8, [r9, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8006366:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006368:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800636a:	68eb      	ldr	r3, [r5, #12]
 800636c:	8998      	ldrh	r0, [r3, #12]
 800636e:	f7fd fe76 	bl	800405e <lwip_htons>
 8006372:	0783      	lsls	r3, r0, #30
            inseg.len -= 1;
          }
          pbuf_realloc(inseg.p, inseg.len);
 8006374:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 8006376:	bf42      	ittt	mi
 8006378:	892b      	ldrhmi	r3, [r5, #8]
 800637a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800637e:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8006380:	8929      	ldrh	r1, [r5, #8]
 8006382:	f7ff f85d 	bl	8005440 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8006386:	68eb      	ldr	r3, [r5, #12]
 8006388:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800638c:	8998      	ldrh	r0, [r3, #12]
 800638e:	f7fd fe66 	bl	800405e <lwip_htons>
 8006392:	f010 0003 	ands.w	r0, r0, #3
 8006396:	bf18      	it	ne
 8006398:	2001      	movne	r0, #1
 800639a:	4480      	add	r8, r0
 800639c:	f8a7 8000 	strh.w	r8, [r7]
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80063a0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f000 8146 	beq.w	8006634 <tcp_receive+0x4a4>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80063a8:	68eb      	ldr	r3, [r5, #12]
 80063aa:	8998      	ldrh	r0, [r3, #12]
 80063ac:	f7fd fe57 	bl	800405e <lwip_htons>
 80063b0:	07c0      	lsls	r0, r0, #31
 80063b2:	f100 813c 	bmi.w	800662e <tcp_receive+0x49e>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 80063b6:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80063ba:	f1b8 0f00 	cmp.w	r8, #0
 80063be:	d02d      	beq.n	800641c <tcp_receive+0x28c>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80063c0:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 80063c4:	6830      	ldr	r0, [r6, #0]
 80063c6:	883b      	ldrh	r3, [r7, #0]
 80063c8:	f8de 2004 	ldr.w	r2, [lr, #4]
 80063cc:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 80063d0:	4403      	add	r3, r0
 80063d2:	4411      	add	r1, r2
 80063d4:	1a59      	subs	r1, r3, r1
            while (next &&
 80063d6:	2900      	cmp	r1, #0
 80063d8:	f280 815c 	bge.w	8006694 <tcp_receive+0x504>
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
 80063dc:	1a9b      	subs	r3, r3, r2
            if (next &&
 80063de:	2b00      	cmp	r3, #0
 80063e0:	dd1c      	ble.n	800641c <tcp_receive+0x28c>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80063e2:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80063e4:	1a12      	subs	r2, r2, r0
 80063e6:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80063e8:	8998      	ldrh	r0, [r3, #12]
 80063ea:	f7fd fe38 	bl	800405e <lwip_htons>
 80063ee:	0783      	lsls	r3, r0, #30
                inseg.len -= 1;
              }
              pbuf_realloc(inseg.p, inseg.len);
 80063f0:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 80063f2:	bf42      	ittt	mi
 80063f4:	892b      	ldrhmi	r3, [r5, #8]
 80063f6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80063fa:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 80063fc:	8929      	ldrh	r1, [r5, #8]
 80063fe:	f7ff f81f 	bl	8005440 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8006402:	68eb      	ldr	r3, [r5, #12]
 8006404:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8006408:	8998      	ldrh	r0, [r3, #12]
 800640a:	f7fd fe28 	bl	800405e <lwip_htons>
 800640e:	f010 0003 	ands.w	r0, r0, #3
 8006412:	bf18      	it	ne
 8006414:	2001      	movne	r0, #1
 8006416:	4481      	add	r9, r0
 8006418:	f8a7 9000 	strh.w	r9, [r7]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800641c:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
 8006420:	e108      	b.n	8006634 <tcp_receive+0x4a4>
      } else if (pcb->persist_backoff > 0) {
 8006422:	2d00      	cmp	r5, #0
 8006424:	f43f aef0 	beq.w	8006208 <tcp_receive+0x78>
          pcb->persist_backoff = 0;
 8006428:	2300      	movs	r3, #0
 800642a:	e6eb      	b.n	8006204 <tcp_receive+0x74>
              } else if (pcb->dupacks == 3) {
 800642c:	f47f af20 	bne.w	8006270 <tcp_receive+0xe0>
                tcp_rexmit_fast(pcb);
 8006430:	4620      	mov	r0, r4
 8006432:	f001 fbd7 	bl	8007be4 <tcp_rexmit_fast>
 8006436:	e71b      	b.n	8006270 <tcp_receive+0xe0>
 8006438:	20000348 	.word	0x20000348
 800643c:	20000368 	.word	0x20000368
 8006440:	20000344 	.word	0x20000344
 8006444:	20000370 	.word	0x20000370
 8006448:	2000035c 	.word	0x2000035c
 800644c:	2000037e 	.word	0x2000037e
 8006450:	2000034c 	.word	0x2000034c
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8006454:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006456:	1a9a      	subs	r2, r3, r2
 8006458:	2a00      	cmp	r2, #0
 800645a:	dc6a      	bgt.n	8006532 <tcp_receive+0x3a2>
      if (pcb->flags & TF_INFR) {
 800645c:	7ea2      	ldrb	r2, [r4, #26]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800645e:	f9b4 e03c 	ldrsh.w	lr, [r4, #60]	; 0x3c
      if (pcb->flags & TF_INFR) {
 8006462:	0751      	lsls	r1, r2, #29
      pcb->nrtx = 0;
 8006464:	f04f 0100 	mov.w	r1, #0
      pcb->lastack = ackno;
 8006468:	6463      	str	r3, [r4, #68]	; 0x44
        pcb->flags &= ~TF_INFR;
 800646a:	bf48      	it	mi
 800646c:	f022 0204 	bicmi.w	r2, r2, #4
      pcb->nrtx = 0;
 8006470:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->dupacks = 0;
 8006474:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
        pcb->flags &= ~TF_INFR;
 8006478:	bf42      	ittt	mi
 800647a:	76a2      	strbmi	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800647c:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
 8006480:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 8006484:	2803      	cmp	r0, #3
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8006486:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8006488:	eb02 02ee 	add.w	r2, r2, lr, asr #3
 800648c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 8006490:	d90f      	bls.n	80064b2 <tcp_receive+0x322>
        if (pcb->cwnd < pcb->ssthresh) {
 8006492:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8006496:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800649a:	4293      	cmp	r3, r2
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800649c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800649e:	bf9c      	itt	ls
 80064a0:	435b      	mulls	r3, r3
 80064a2:	fb93 f3f2 	sdivls	r3, r3, r2
 80064a6:	4413      	add	r3, r2
 80064a8:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d201      	bcs.n	80064b2 <tcp_receive+0x322>
            pcb->cwnd = new_cwnd;
 80064ae:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      while (pcb->unacked != NULL &&
 80064b2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80064b4:	b943      	cbnz	r3, 80064c8 <tcp_receive+0x338>
      if (pcb->unacked == NULL) {
 80064b6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80064b8:	2300      	movs	r3, #0
 80064ba:	2a00      	cmp	r2, #0
 80064bc:	d137      	bne.n	800652e <tcp_receive+0x39e>
        pcb->rtime = -1;
 80064be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064c2:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 80064c4:	76e3      	strb	r3, [r4, #27]
 80064c6:	e6d3      	b.n	8006270 <tcp_receive+0xe0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	6858      	ldr	r0, [r3, #4]
 80064cc:	f7fd fdca 	bl	8004064 <lwip_htonl>
 80064d0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80064d2:	4681      	mov	r9, r0
 80064d4:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	8998      	ldrh	r0, [r3, #12]
 80064dc:	f7fd fdbf 	bl	800405e <lwip_htons>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	f010 0003 	ands.w	r0, r0, #3
 80064e6:	eba8 0803 	sub.w	r8, r8, r3
 80064ea:	bf18      	it	ne
 80064ec:	2001      	movne	r0, #1
 80064ee:	44c8      	add	r8, r9
 80064f0:	4480      	add	r8, r0
      while (pcb->unacked != NULL &&
 80064f2:	f1b8 0f00 	cmp.w	r8, #0
 80064f6:	dcde      	bgt.n	80064b6 <tcp_receive+0x326>
        next = pcb->unacked;
 80064f8:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        pcb->unacked = pcb->unacked->next;
 80064fc:	f8d8 3000 	ldr.w	r3, [r8]
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8006500:	f8d8 0004 	ldr.w	r0, [r8, #4]
        pcb->unacked = pcb->unacked->next;
 8006504:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8006506:	f7fe ffc4 	bl	8005492 <pbuf_clen>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 800650a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800650e:	f7fe ffc0 	bl	8005492 <pbuf_clen>
 8006512:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 8006516:	882a      	ldrh	r2, [r5, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8006518:	1a18      	subs	r0, r3, r0
        recv_acked += next->len;
 800651a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800651e:	4413      	add	r3, r2
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8006520:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        tcp_seg_free(next);
 8006524:	4640      	mov	r0, r8
        recv_acked += next->len;
 8006526:	802b      	strh	r3, [r5, #0]
        tcp_seg_free(next);
 8006528:	f7ff f934 	bl	8005794 <tcp_seg_free>
 800652c:	e7c1      	b.n	80064b2 <tcp_receive+0x322>
        pcb->rtime = 0;
 800652e:	8623      	strh	r3, [r4, #48]	; 0x30
 8006530:	e7c8      	b.n	80064c4 <tcp_receive+0x334>
      tcp_send_empty_ack(pcb);
 8006532:	4620      	mov	r0, r4
 8006534:	f001 f956 	bl	80077e4 <tcp_send_empty_ack>
 8006538:	e69a      	b.n	8006270 <tcp_receive+0xe0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f8d7 8000 	ldr.w	r8, [r7]
 8006540:	6858      	ldr	r0, [r3, #4]
 8006542:	f7fd fd8f 	bl	8004064 <lwip_htonl>
 8006546:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006548:	4681      	mov	r9, r0
 800654a:	f8b3 a008 	ldrh.w	sl, [r3, #8]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	eba8 080a 	sub.w	r8, r8, sl
 8006554:	8998      	ldrh	r0, [r3, #12]
 8006556:	f7fd fd82 	bl	800405e <lwip_htons>
 800655a:	f010 0003 	ands.w	r0, r0, #3
 800655e:	eba8 0809 	sub.w	r8, r8, r9
 8006562:	bf18      	it	ne
 8006564:	2001      	movne	r0, #1
 8006566:	eba8 0800 	sub.w	r8, r8, r0
    while (pcb->unsent != NULL &&
 800656a:	f1b8 0f00 	cmp.w	r8, #0
 800656e:	f6ff ae83 	blt.w	8006278 <tcp_receive+0xe8>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006576:	1a9b      	subs	r3, r3, r2
 8006578:	2b00      	cmp	r3, #0
 800657a:	f73f ae7d 	bgt.w	8006278 <tcp_receive+0xe8>
      next = pcb->unsent;
 800657e:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 8006582:	f8d8 3000 	ldr.w	r3, [r8]
 8006586:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 8006588:	b90b      	cbnz	r3, 800658e <tcp_receive+0x3fe>
        pcb->unsent_oversize = 0;
 800658a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800658e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006592:	f7fe ff7e 	bl	8005492 <pbuf_clen>
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8006596:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800659a:	f7fe ff7a 	bl	8005492 <pbuf_clen>
 800659e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 80065a2:	882a      	ldrh	r2, [r5, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80065a4:	1a18      	subs	r0, r3, r0
      recv_acked += next->len;
 80065a6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80065aa:	4413      	add	r3, r2
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80065ac:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      tcp_seg_free(next);
 80065b0:	4640      	mov	r0, r8
      recv_acked += next->len;
 80065b2:	802b      	strh	r3, [r5, #0]
      tcp_seg_free(next);
 80065b4:	f7ff f8ee 	bl	8005794 <tcp_seg_free>
 80065b8:	e65a      	b.n	8006270 <tcp_receive+0xe0>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80065ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80065bc:	6839      	ldr	r1, [r7, #0]
 80065be:	1a5b      	subs	r3, r3, r1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f6bf ae63 	bge.w	800628c <tcp_receive+0xfc>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80065c6:	4ba1      	ldr	r3, [pc, #644]	; (800684c <tcp_receive+0x6bc>)
      m = m - (pcb->sa >> 3);
 80065c8:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80065cc:	6819      	ldr	r1, [r3, #0]
 80065ce:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sv >> 2);
 80065d0:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      m = m - (pcb->sa >> 3);
 80065d4:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
      pcb->sv += m;
 80065d8:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
      m = m - (pcb->sa >> 3);
 80065dc:	b289      	uxth	r1, r1
 80065de:	b20b      	sxth	r3, r1
      pcb->sa += m;
 80065e0:	4408      	add	r0, r1
      if (m < 0) {
 80065e2:	2b00      	cmp	r3, #0
      pcb->sa += m;
 80065e4:	b200      	sxth	r0, r0
        m = -m;
 80065e6:	bfb8      	it	lt
 80065e8:	4249      	neglt	r1, r1
      pcb->sa += m;
 80065ea:	87a0      	strh	r0, [r4, #60]	; 0x3c
        m = -m;
 80065ec:	bfb8      	it	lt
 80065ee:	b20b      	sxthlt	r3, r1
      pcb->sv += m;
 80065f0:	4413      	add	r3, r2
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80065f6:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 80065fa:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 80065fe:	2300      	movs	r3, #0
 8006600:	6363      	str	r3, [r4, #52]	; 0x34
 8006602:	e643      	b.n	800628c <tcp_receive+0xfc>
          p->tot_len = new_tot_len;
 8006604:	8103      	strh	r3, [r0, #8]
          off -= p->len;
 8006606:	1a89      	subs	r1, r1, r2
          p->len = 0;
 8006608:	f8a0 e00a 	strh.w	lr, [r0, #10]
          p = p->next;
 800660c:	6800      	ldr	r0, [r0, #0]
 800660e:	e661      	b.n	80062d4 <tcp_receive+0x144>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8006610:	f1ce 0100 	rsb	r1, lr, #0
 8006614:	e663      	b.n	80062de <tcp_receive+0x14e>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8006616:	1a9b      	subs	r3, r3, r2
 8006618:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 800661a:	bfbe      	ittt	lt
 800661c:	7ea3      	ldrblt	r3, [r4, #26]
 800661e:	f043 0302 	orrlt.w	r3, r3, #2
 8006622:	76a3      	strblt	r3, [r4, #26]
 8006624:	e667      	b.n	80062f6 <tcp_receive+0x166>
              pcb->ooseq = pcb->ooseq->next;
 8006626:	6803      	ldr	r3, [r0, #0]
 8006628:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800662a:	f7ff f8b3 	bl	8005794 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800662e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006630:	2800      	cmp	r0, #0
 8006632:	d1f8      	bne.n	8006626 <tcp_receive+0x496>
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8006634:	8839      	ldrh	r1, [r7, #0]

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;

        tcp_update_rcv_ann_wnd(pcb);
 8006636:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 8006638:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 800663a:	6832      	ldr	r2, [r6, #0]
        pcb->rcv_wnd -= tcplen;
 800663c:	1a5b      	subs	r3, r3, r1
        pcb->rcv_nxt = seqno + tcplen;
 800663e:	440a      	add	r2, r1
        pcb->rcv_wnd -= tcplen;
 8006640:	8523      	strh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 8006642:	6262      	str	r2, [r4, #36]	; 0x24
        tcp_update_rcv_ann_wnd(pcb);
 8006644:	f7ff f868 	bl	8005718 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8006648:	686b      	ldr	r3, [r5, #4]
 800664a:	891a      	ldrh	r2, [r3, #8]
 800664c:	b11a      	cbz	r2, 8006656 <tcp_receive+0x4c6>
          recv_data = inseg.p;
 800664e:	4a80      	ldr	r2, [pc, #512]	; (8006850 <tcp_receive+0x6c0>)
 8006650:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8006652:	2300      	movs	r3, #0
 8006654:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8006656:	68eb      	ldr	r3, [r5, #12]
            if (recv_data) {
              pbuf_cat(recv_data, cseg->p);
            } else {
              recv_data = cseg->p;
            }
            cseg->p = NULL;
 8006658:	f04f 0900 	mov.w	r9, #0
            if (recv_data) {
 800665c:	4f7c      	ldr	r7, [pc, #496]	; (8006850 <tcp_receive+0x6c0>)
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800665e:	8998      	ldrh	r0, [r3, #12]
 8006660:	f7fd fcfd 	bl	800405e <lwip_htons>
 8006664:	07c5      	lsls	r5, r0, #31
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8006666:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8006854 <tcp_receive+0x6c4>
          recv_flags |= TF_GOT_FIN;
 800666a:	bf41      	itttt	mi
 800666c:	4a79      	ldrmi	r2, [pc, #484]	; (8006854 <tcp_receive+0x6c4>)
 800666e:	7813      	ldrbmi	r3, [r2, #0]
 8006670:	f043 0320 	orrmi.w	r3, r3, #32
 8006674:	7013      	strbmi	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 8006676:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8006678:	b125      	cbz	r5, 8006684 <tcp_receive+0x4f4>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800667a:	68e9      	ldr	r1, [r5, #12]
        while (pcb->ooseq != NULL &&
 800667c:	6a62      	ldr	r2, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800667e:	684b      	ldr	r3, [r1, #4]
        while (pcb->ooseq != NULL &&
 8006680:	4293      	cmp	r3, r2
 8006682:	d032      	beq.n	80066ea <tcp_receive+0x55a>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8006684:	7ea3      	ldrb	r3, [r4, #26]
 8006686:	07d9      	lsls	r1, r3, #31
 8006688:	d574      	bpl.n	8006774 <tcp_receive+0x5e4>
 800668a:	f023 0301 	bic.w	r3, r3, #1
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 800668e:	f043 0302 	orr.w	r3, r3, #2
 8006692:	e071      	b.n	8006778 <tcp_receive+0x5e8>
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
 8006694:	f8be 000c 	ldrh.w	r0, [lr, #12]
 8006698:	f7fd fce1 	bl	800405e <lwip_htons>
 800669c:	07c1      	lsls	r1, r0, #31
 800669e:	d51d      	bpl.n	80066dc <tcp_receive+0x54c>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80066a0:	68eb      	ldr	r3, [r5, #12]
 80066a2:	8998      	ldrh	r0, [r3, #12]
 80066a4:	f7fd fcdb 	bl	800405e <lwip_htons>
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
 80066a8:	0782      	lsls	r2, r0, #30
 80066aa:	d417      	bmi.n	80066dc <tcp_receive+0x54c>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80066ac:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80066b0:	2001      	movs	r0, #1
 80066b2:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 80066b6:	f7fd fcd2 	bl	800405e <lwip_htons>
                tcplen = TCP_TCPLEN(&inseg);
 80066ba:	68eb      	ldr	r3, [r5, #12]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80066bc:	ea49 0000 	orr.w	r0, r9, r0
                tcplen = TCP_TCPLEN(&inseg);
 80066c0:	f8b5 9008 	ldrh.w	r9, [r5, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80066c4:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80066c8:	8998      	ldrh	r0, [r3, #12]
 80066ca:	f7fd fcc8 	bl	800405e <lwip_htons>
 80066ce:	f010 0003 	ands.w	r0, r0, #3
 80066d2:	bf18      	it	ne
 80066d4:	2001      	movne	r0, #1
 80066d6:	4481      	add	r9, r0
 80066d8:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 80066dc:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(prev);
 80066e0:	4640      	mov	r0, r8
 80066e2:	f7ff f857 	bl	8005794 <tcp_seg_free>
              next = next->next;
 80066e6:	46c8      	mov	r8, r9
 80066e8:	e667      	b.n	80063ba <tcp_receive+0x22a>
          seqno = pcb->ooseq->tcphdr->seqno;
 80066ea:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80066ec:	8988      	ldrh	r0, [r1, #12]
 80066ee:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 80066f2:	f7fd fcb4 	bl	800405e <lwip_htons>
 80066f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066f8:	f010 0003 	ands.w	r0, r0, #3
 80066fc:	4453      	add	r3, sl
 80066fe:	bf18      	it	ne
 8006700:	2001      	movne	r0, #1
 8006702:	4418      	add	r0, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8006704:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8006706:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8006708:	8998      	ldrh	r0, [r3, #12]
 800670a:	f7fd fca8 	bl	800405e <lwip_htons>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800670e:	68eb      	ldr	r3, [r5, #12]
 8006710:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8006714:	8998      	ldrh	r0, [r3, #12]
 8006716:	f7fd fca2 	bl	800405e <lwip_htons>
 800671a:	f010 0003 	ands.w	r0, r0, #3
 800671e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006720:	bf18      	it	ne
 8006722:	2001      	movne	r0, #1
 8006724:	4450      	add	r0, sl
 8006726:	1a18      	subs	r0, r3, r0
 8006728:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 800672a:	4620      	mov	r0, r4
 800672c:	f7fe fff4 	bl	8005718 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8006730:	6869      	ldr	r1, [r5, #4]
 8006732:	890b      	ldrh	r3, [r1, #8]
 8006734:	b12b      	cbz	r3, 8006742 <tcp_receive+0x5b2>
            if (recv_data) {
 8006736:	6838      	ldr	r0, [r7, #0]
 8006738:	b1d0      	cbz	r0, 8006770 <tcp_receive+0x5e0>
              pbuf_cat(recv_data, cseg->p);
 800673a:	f7fe feb7 	bl	80054ac <pbuf_cat>
            cseg->p = NULL;
 800673e:	f8c5 9004 	str.w	r9, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8006742:	68eb      	ldr	r3, [r5, #12]
 8006744:	8998      	ldrh	r0, [r3, #12]
 8006746:	f7fd fc8a 	bl	800405e <lwip_htons>
 800674a:	07c0      	lsls	r0, r0, #31
 800674c:	d50a      	bpl.n	8006764 <tcp_receive+0x5d4>
            recv_flags |= TF_GOT_FIN;
 800674e:	f898 3000 	ldrb.w	r3, [r8]
 8006752:	f043 0320 	orr.w	r3, r3, #32
 8006756:	f888 3000 	strb.w	r3, [r8]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800675a:	7d23      	ldrb	r3, [r4, #20]
 800675c:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 800675e:	bf04      	itt	eq
 8006760:	2307      	moveq	r3, #7
 8006762:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 8006764:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 8006766:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 8006768:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 800676a:	f7ff f813 	bl	8005794 <tcp_seg_free>
 800676e:	e782      	b.n	8006676 <tcp_receive+0x4e6>
              recv_data = cseg->p;
 8006770:	6039      	str	r1, [r7, #0]
 8006772:	e7e4      	b.n	800673e <tcp_receive+0x5ae>
        tcp_ack(pcb);
 8006774:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 8006778:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 800677a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        tcp_send_empty_ack(pcb);
 800677e:	4620      	mov	r0, r4
 8006780:	f001 f830 	bl	80077e4 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 8006784:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8006786:	b92d      	cbnz	r5, 8006794 <tcp_receive+0x604>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8006788:	4833      	ldr	r0, [pc, #204]	; (8006858 <tcp_receive+0x6c8>)
 800678a:	f7ff f81b 	bl	80057c4 <tcp_seg_copy>
 800678e:	6720      	str	r0, [r4, #112]	; 0x70
 8006790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (seqno == next->tcphdr->seqno) {
 8006794:	6833      	ldr	r3, [r6, #0]
 8006796:	f04f 0800 	mov.w	r8, #0
 800679a:	f103 3eff 	add.w	lr, r3, #4294967295
 800679e:	f103 0c01 	add.w	ip, r3, #1
 80067a2:	68e8      	ldr	r0, [r5, #12]
 80067a4:	6842      	ldr	r2, [r0, #4]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d118      	bne.n	80067dc <tcp_receive+0x64c>
              if (inseg.len > next->len) {
 80067aa:	482b      	ldr	r0, [pc, #172]	; (8006858 <tcp_receive+0x6c8>)
 80067ac:	892b      	ldrh	r3, [r5, #8]
 80067ae:	8902      	ldrh	r2, [r0, #8]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	f240 80c3 	bls.w	800693c <tcp_receive+0x7ac>
                cseg = tcp_seg_copy(&inseg);
 80067b6:	f7ff f805 	bl	80057c4 <tcp_seg_copy>
                if (cseg != NULL) {
 80067ba:	2800      	cmp	r0, #0
 80067bc:	f000 80be 	beq.w	800693c <tcp_receive+0x7ac>
                  if (prev != NULL) {
 80067c0:	f1b8 0f00 	cmp.w	r8, #0
 80067c4:	d008      	beq.n	80067d8 <tcp_receive+0x648>
                    prev->next = cseg;
 80067c6:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 80067ca:	4629      	mov	r1, r5
}
 80067cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                    tcp_oos_insert_segment(cseg, next);
 80067d0:	f7ff bca0 	b.w	8006114 <tcp_oos_insert_segment>
 80067d4:	460d      	mov	r5, r1
 80067d6:	e7e4      	b.n	80067a2 <tcp_receive+0x612>
                    pcb->ooseq = cseg;
 80067d8:	6720      	str	r0, [r4, #112]	; 0x70
 80067da:	e7f6      	b.n	80067ca <tcp_receive+0x63a>
              if (prev == NULL) {
 80067dc:	f1b8 0f00 	cmp.w	r8, #0
 80067e0:	d10a      	bne.n	80067f8 <tcp_receive+0x668>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80067e2:	1a99      	subs	r1, r3, r2
 80067e4:	2900      	cmp	r1, #0
 80067e6:	da39      	bge.n	800685c <tcp_receive+0x6cc>
                  cseg = tcp_seg_copy(&inseg);
 80067e8:	481b      	ldr	r0, [pc, #108]	; (8006858 <tcp_receive+0x6c8>)
 80067ea:	f7fe ffeb 	bl	80057c4 <tcp_seg_copy>
                  if (cseg != NULL) {
 80067ee:	2800      	cmp	r0, #0
 80067f0:	f000 80a4 	beq.w	800693c <tcp_receive+0x7ac>
                    pcb->ooseq = cseg;
 80067f4:	6720      	str	r0, [r4, #112]	; 0x70
 80067f6:	e7e8      	b.n	80067ca <tcp_receive+0x63a>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 80067f8:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80067fc:	6849      	ldr	r1, [r1, #4]
 80067fe:	ebae 0101 	sub.w	r1, lr, r1
 8006802:	2900      	cmp	r1, #0
 8006804:	db2a      	blt.n	800685c <tcp_receive+0x6cc>
 8006806:	ebac 0102 	sub.w	r1, ip, r2
 800680a:	2900      	cmp	r1, #0
 800680c:	dc26      	bgt.n	800685c <tcp_receive+0x6cc>
                  cseg = tcp_seg_copy(&inseg);
 800680e:	4812      	ldr	r0, [pc, #72]	; (8006858 <tcp_receive+0x6c8>)
 8006810:	f7fe ffd8 	bl	80057c4 <tcp_seg_copy>
                  if (cseg != NULL) {
 8006814:	4604      	mov	r4, r0
 8006816:	2800      	cmp	r0, #0
 8006818:	f000 8090 	beq.w	800693c <tcp_receive+0x7ac>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800681c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006820:	6831      	ldr	r1, [r6, #0]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8006828:	4413      	add	r3, r2
 800682a:	1a5b      	subs	r3, r3, r1
 800682c:	2b00      	cmp	r3, #0
 800682e:	dd07      	ble.n	8006840 <tcp_receive+0x6b0>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8006830:	1a89      	subs	r1, r1, r2
                      pbuf_realloc(prev->p, prev->len);
 8006832:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8006836:	b289      	uxth	r1, r1
 8006838:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 800683c:	f7fe fe00 	bl	8005440 <pbuf_realloc>
                    prev->next = cseg;
 8006840:	f8c8 4000 	str.w	r4, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8006844:	4629      	mov	r1, r5
 8006846:	4620      	mov	r0, r4
 8006848:	e7c0      	b.n	80067cc <tcp_receive+0x63c>
 800684a:	bf00      	nop
 800684c:	2000b0bc 	.word	0x2000b0bc
 8006850:	20000360 	.word	0x20000360
 8006854:	20000364 	.word	0x20000364
 8006858:	2000034c 	.word	0x2000034c
              if (next->next == NULL &&
 800685c:	6829      	ldr	r1, [r5, #0]
 800685e:	46a8      	mov	r8, r5
 8006860:	2900      	cmp	r1, #0
 8006862:	d1b7      	bne.n	80067d4 <tcp_receive+0x644>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8006864:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 8006866:	2b00      	cmp	r3, #0
 8006868:	dd68      	ble.n	800693c <tcp_receive+0x7ac>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800686a:	8980      	ldrh	r0, [r0, #12]
 800686c:	f7fd fbf7 	bl	800405e <lwip_htons>
 8006870:	07c2      	lsls	r2, r0, #31
 8006872:	d463      	bmi.n	800693c <tcp_receive+0x7ac>
                next->next = tcp_seg_copy(&inseg);
 8006874:	4832      	ldr	r0, [pc, #200]	; (8006940 <tcp_receive+0x7b0>)
 8006876:	f7fe ffa5 	bl	80057c4 <tcp_seg_copy>
 800687a:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800687c:	2800      	cmp	r0, #0
 800687e:	d05d      	beq.n	800693c <tcp_receive+0x7ac>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8006880:	68eb      	ldr	r3, [r5, #12]
 8006882:	6831      	ldr	r1, [r6, #0]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	892b      	ldrh	r3, [r5, #8]
 8006888:	4413      	add	r3, r2
 800688a:	1a5b      	subs	r3, r3, r1
 800688c:	2b00      	cmp	r3, #0
 800688e:	dd05      	ble.n	800689c <tcp_receive+0x70c>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8006890:	1a89      	subs	r1, r1, r2
                    pbuf_realloc(next->p, next->len);
 8006892:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8006894:	b289      	uxth	r1, r1
 8006896:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8006898:	f7fe fdd2 	bl	8005440 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800689c:	6832      	ldr	r2, [r6, #0]
 800689e:	883b      	ldrh	r3, [r7, #0]
 80068a0:	4413      	add	r3, r2
 80068a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80068a4:	1a9b      	subs	r3, r3, r2
 80068a6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80068a8:	1a9b      	subs	r3, r3, r2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	dd46      	ble.n	800693c <tcp_receive+0x7ac>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80068ae:	682b      	ldr	r3, [r5, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	8998      	ldrh	r0, [r3, #12]
 80068b4:	f7fd fbd3 	bl	800405e <lwip_htons>
 80068b8:	07c3      	lsls	r3, r0, #31
 80068ba:	d511      	bpl.n	80068e0 <tcp_receive+0x750>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80068bc:	682b      	ldr	r3, [r5, #0]
 80068be:	f8d3 900c 	ldr.w	r9, [r3, #12]
 80068c2:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 80068c6:	4640      	mov	r0, r8
 80068c8:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 80068cc:	f7fd fbc7 	bl	800405e <lwip_htons>
 80068d0:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 80068d4:	f7fd fbc3 	bl	800405e <lwip_htons>
 80068d8:	ea40 0808 	orr.w	r8, r0, r8
 80068dc:	f8a9 800c 	strh.w	r8, [r9, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80068e0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80068e2:	6832      	ldr	r2, [r6, #0]
 80068e4:	682b      	ldr	r3, [r5, #0]
 80068e6:	1a89      	subs	r1, r1, r2
 80068e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 80068ea:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80068ec:	4411      	add	r1, r2
 80068ee:	b289      	uxth	r1, r1
 80068f0:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80068f2:	f7fe fda5 	bl	8005440 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80068f6:	682b      	ldr	r3, [r5, #0]
 80068f8:	891c      	ldrh	r4, [r3, #8]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	8998      	ldrh	r0, [r3, #12]
 80068fe:	f7fd fbae 	bl	800405e <lwip_htons>
 8006902:	f010 0003 	ands.w	r0, r0, #3
 8006906:	bf18      	it	ne
 8006908:	2001      	movne	r0, #1
 800690a:	4404      	add	r4, r0
 800690c:	803c      	strh	r4, [r7, #0]
 800690e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      tcp_send_empty_ack(pcb);
 8006912:	4620      	mov	r0, r4
}
 8006914:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      tcp_send_empty_ack(pcb);
 8006918:	f000 bf64 	b.w	80077e4 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800691c:	6833      	ldr	r3, [r6, #0]
 800691e:	1a99      	subs	r1, r3, r2
 8006920:	2900      	cmp	r1, #0
 8006922:	db05      	blt.n	8006930 <tcp_receive+0x7a0>
 8006924:	3301      	adds	r3, #1
 8006926:	1a9b      	subs	r3, r3, r2
 8006928:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800692a:	1a9b      	subs	r3, r3, r2
 800692c:	2b00      	cmp	r3, #0
 800692e:	dd05      	ble.n	800693c <tcp_receive+0x7ac>
      tcp_ack_now(pcb);
 8006930:	7ea3      	ldrb	r3, [r4, #26]
 8006932:	e6ac      	b.n	800668e <tcp_receive+0x4fe>
        pcb->dupacks = 0;
 8006934:	2300      	movs	r3, #0
 8006936:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800693a:	e499      	b.n	8006270 <tcp_receive+0xe0>
 800693c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006940:	2000034c 	.word	0x2000034c

08006944 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8006944:	4b0b      	ldr	r3, [pc, #44]	; (8006974 <tcp_getoptbyte+0x30>)
 8006946:	4a0c      	ldr	r2, [pc, #48]	; (8006978 <tcp_getoptbyte+0x34>)
 8006948:	6819      	ldr	r1, [r3, #0]
{
 800694a:	b510      	push	{r4, lr}
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800694c:	b121      	cbz	r1, 8006958 <tcp_getoptbyte+0x14>
 800694e:	480b      	ldr	r0, [pc, #44]	; (800697c <tcp_getoptbyte+0x38>)
 8006950:	8813      	ldrh	r3, [r2, #0]
 8006952:	8800      	ldrh	r0, [r0, #0]
 8006954:	4283      	cmp	r3, r0
 8006956:	d207      	bcs.n	8006968 <tcp_getoptbyte+0x24>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8006958:	4b09      	ldr	r3, [pc, #36]	; (8006980 <tcp_getoptbyte+0x3c>)
    return opts[tcp_optidx++];
 800695a:	8811      	ldrh	r1, [r2, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800695c:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 800695e:	1c48      	adds	r0, r1, #1
 8006960:	440b      	add	r3, r1
 8006962:	8010      	strh	r0, [r2, #0]
 8006964:	7d18      	ldrb	r0, [r3, #20]
 8006966:	bd10      	pop	{r4, pc}
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8006968:	1c5c      	adds	r4, r3, #1
 800696a:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 800696c:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800696e:	8014      	strh	r4, [r2, #0]
    return tcphdr_opt2[idx];
 8006970:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8006972:	bd10      	pop	{r4, pc}
 8006974:	20000378 	.word	0x20000378
 8006978:	2000036c 	.word	0x2000036c
 800697c:	20000374 	.word	0x20000374
 8006980:	20000370 	.word	0x20000370

08006984 <tcp_parseopt.isra.1.part.2>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 8006984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8006986:	4d19      	ldr	r5, [pc, #100]	; (80069ec <tcp_parseopt.isra.1.part.2+0x68>)
 8006988:	2300      	movs	r3, #0
tcp_parseopt(struct tcp_pcb *pcb)
 800698a:	4607      	mov	r7, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800698c:	4e18      	ldr	r6, [pc, #96]	; (80069f0 <tcp_parseopt.isra.1.part.2+0x6c>)
 800698e:	802b      	strh	r3, [r5, #0]
 8006990:	8834      	ldrh	r4, [r6, #0]
 8006992:	882b      	ldrh	r3, [r5, #0]
 8006994:	42a3      	cmp	r3, r4
 8006996:	d300      	bcc.n	800699a <tcp_parseopt.isra.1.part.2+0x16>
 8006998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8_t opt = tcp_getoptbyte();
 800699a:	f7ff ffd3 	bl	8006944 <tcp_getoptbyte>
      switch (opt) {
 800699e:	2801      	cmp	r0, #1
 80069a0:	d0f6      	beq.n	8006990 <tcp_parseopt.isra.1.part.2+0xc>
 80069a2:	d3f9      	bcc.n	8006998 <tcp_parseopt.isra.1.part.2+0x14>
 80069a4:	2802      	cmp	r0, #2
 80069a6:	d117      	bne.n	80069d8 <tcp_parseopt.isra.1.part.2+0x54>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80069a8:	f7ff ffcc 	bl	8006944 <tcp_getoptbyte>
 80069ac:	2804      	cmp	r0, #4
 80069ae:	d1f3      	bne.n	8006998 <tcp_parseopt.isra.1.part.2+0x14>
 80069b0:	882b      	ldrh	r3, [r5, #0]
 80069b2:	3301      	adds	r3, #1
 80069b4:	42a3      	cmp	r3, r4
 80069b6:	daef      	bge.n	8006998 <tcp_parseopt.isra.1.part.2+0x14>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 80069b8:	f7ff ffc4 	bl	8006944 <tcp_getoptbyte>
 80069bc:	0200      	lsls	r0, r0, #8
 80069be:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 80069c0:	f7ff ffc0 	bl	8006944 <tcp_getoptbyte>
 80069c4:	4320      	orrs	r0, r4
 80069c6:	b280      	uxth	r0, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80069c8:	1e43      	subs	r3, r0, #1
 80069ca:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80069ce:	bf28      	it	cs
 80069d0:	f44f 7006 	movcs.w	r0, #536	; 0x218
 80069d4:	8038      	strh	r0, [r7, #0]
 80069d6:	e7db      	b.n	8006990 <tcp_parseopt.isra.1.part.2+0xc>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 80069d8:	f7ff ffb4 	bl	8006944 <tcp_getoptbyte>
        if (data < 2) {
 80069dc:	2801      	cmp	r0, #1
 80069de:	d9db      	bls.n	8006998 <tcp_parseopt.isra.1.part.2+0x14>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 80069e0:	882b      	ldrh	r3, [r5, #0]
 80069e2:	3b02      	subs	r3, #2
 80069e4:	4418      	add	r0, r3
 80069e6:	8028      	strh	r0, [r5, #0]
 80069e8:	e7d2      	b.n	8006990 <tcp_parseopt.isra.1.part.2+0xc>
 80069ea:	bf00      	nop
 80069ec:	2000036c 	.word	0x2000036c
 80069f0:	2000037c 	.word	0x2000037c

080069f4 <tcp_input>:
{
 80069f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tcphdr = (struct tcp_hdr *)p->payload;
 80069f8:	6843      	ldr	r3, [r0, #4]
{
 80069fa:	b089      	sub	sp, #36	; 0x24
  tcphdr = (struct tcp_hdr *)p->payload;
 80069fc:	4da8      	ldr	r5, [pc, #672]	; (8006ca0 <tcp_input+0x2ac>)
{
 80069fe:	4681      	mov	r9, r0
  tcphdr = (struct tcp_hdr *)p->payload;
 8006a00:	602b      	str	r3, [r5, #0]
  if (p->len < TCP_HLEN) {
 8006a02:	8943      	ldrh	r3, [r0, #10]
 8006a04:	2b13      	cmp	r3, #19
 8006a06:	f240 8144 	bls.w	8006c92 <tcp_input+0x29e>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006a0a:	4ea6      	ldr	r6, [pc, #664]	; (8006ca4 <tcp_input+0x2b0>)
 8006a0c:	6831      	ldr	r1, [r6, #0]
 8006a0e:	6970      	ldr	r0, [r6, #20]
 8006a10:	f7fd ff47 	bl	80048a2 <ip4_addr_isbroadcast_u32>
 8006a14:	4604      	mov	r4, r0
 8006a16:	2800      	cmp	r0, #0
 8006a18:	f040 813b 	bne.w	8006c92 <tcp_input+0x29e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8006a1c:	6973      	ldr	r3, [r6, #20]
 8006a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006a22:	2be0      	cmp	r3, #224	; 0xe0
 8006a24:	f000 8135 	beq.w	8006c92 <tcp_input+0x29e>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8006a28:	682b      	ldr	r3, [r5, #0]
 8006a2a:	8998      	ldrh	r0, [r3, #12]
 8006a2c:	f7fd fb17 	bl	800405e <lwip_htons>
 8006a30:	0a81      	lsrs	r1, r0, #10
 8006a32:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8006a36:	2913      	cmp	r1, #19
 8006a38:	f240 812b 	bls.w	8006c92 <tcp_input+0x29e>
 8006a3c:	b289      	uxth	r1, r1
 8006a3e:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 8006a42:	428b      	cmp	r3, r1
 8006a44:	f0c0 8125 	bcc.w	8006c92 <tcp_input+0x29e>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8006a48:	f1a1 0314 	sub.w	r3, r1, #20
  if (p->len >= hdrlen_bytes) {
 8006a4c:	f8b9 200a 	ldrh.w	r2, [r9, #10]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8006a50:	f8df 8280 	ldr.w	r8, [pc, #640]	; 8006cd4 <tcp_input+0x2e0>
 8006a54:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 8006a56:	4f94      	ldr	r7, [pc, #592]	; (8006ca8 <tcp_input+0x2b4>)
  if (p->len >= hdrlen_bytes) {
 8006a58:	428a      	cmp	r2, r1
  tcphdr_opt2 = NULL;
 8006a5a:	603c      	str	r4, [r7, #0]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8006a5c:	f8a8 3000 	strh.w	r3, [r8]
 8006a60:	4c92      	ldr	r4, [pc, #584]	; (8006cac <tcp_input+0x2b8>)
  if (p->len >= hdrlen_bytes) {
 8006a62:	d34b      	bcc.n	8006afc <tcp_input+0x108>
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8006a64:	4249      	negs	r1, r1
 8006a66:	4648      	mov	r0, r9
    tcphdr_opt1len = tcphdr_optlen;
 8006a68:	8023      	strh	r3, [r4, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8006a6a:	f7fe fc2e 	bl	80052ca <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8006a6e:	682c      	ldr	r4, [r5, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006a70:	f8df b268 	ldr.w	fp, [pc, #616]	; 8006cdc <tcp_input+0x2e8>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8006a74:	8820      	ldrh	r0, [r4, #0]
 8006a76:	f7fd faf2 	bl	800405e <lwip_htons>
 8006a7a:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8006a7c:	682c      	ldr	r4, [r5, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006a7e:	f8df 8260 	ldr.w	r8, [pc, #608]	; 8006ce0 <tcp_input+0x2ec>
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8006a82:	8860      	ldrh	r0, [r4, #2]
 8006a84:	f7fd faeb 	bl	800405e <lwip_htons>
 8006a88:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006a8a:	682c      	ldr	r4, [r5, #0]
 8006a8c:	6860      	ldr	r0, [r4, #4]
 8006a8e:	f7fd fae9 	bl	8004064 <lwip_htonl>
 8006a92:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006a94:	682c      	ldr	r4, [r5, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006a96:	f8cb 0000 	str.w	r0, [fp]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006a9a:	68a0      	ldr	r0, [r4, #8]
 8006a9c:	f7fd fae2 	bl	8004064 <lwip_htonl>
 8006aa0:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006aa2:	682c      	ldr	r4, [r5, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006aa4:	f8c8 0000 	str.w	r0, [r8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006aa8:	89e0      	ldrh	r0, [r4, #14]
 8006aaa:	f7fd fad8 	bl	800405e <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 8006aae:	682b      	ldr	r3, [r5, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006ab0:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 8006ab2:	8998      	ldrh	r0, [r3, #12]
 8006ab4:	f7fd fad3 	bl	800405e <lwip_htons>
 8006ab8:	4a7d      	ldr	r2, [pc, #500]	; (8006cb0 <tcp_input+0x2bc>)
 8006aba:	b2c3      	uxtb	r3, r0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006abc:	4c7d      	ldr	r4, [pc, #500]	; (8006cb4 <tcp_input+0x2c0>)
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8006abe:	487e      	ldr	r0, [pc, #504]	; (8006cb8 <tcp_input+0x2c4>)
  prev = NULL;
 8006ac0:	f04f 0e00 	mov.w	lr, #0
  flags = TCPH_FLAGS(tcphdr);
 8006ac4:	f003 013f 	and.w	r1, r3, #63	; 0x3f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ac8:	6824      	ldr	r4, [r4, #0]
    if (pcb->remote_port == tcphdr->src &&
 8006aca:	682f      	ldr	r7, [r5, #0]
  flags = TCPH_FLAGS(tcphdr);
 8006acc:	7011      	strb	r1, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8006ace:	f013 0103 	ands.w	r1, r3, #3
 8006ad2:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 8006ad6:	bf18      	it	ne
 8006ad8:	2101      	movne	r1, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ada:	9406      	str	r4, [sp, #24]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006adc:	6934      	ldr	r4, [r6, #16]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8006ade:	4411      	add	r1, r2
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006ae0:	f8d6 a014 	ldr.w	sl, [r6, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006ae4:	9407      	str	r4, [sp, #28]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8006ae6:	b289      	uxth	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ae8:	9c06      	ldr	r4, [sp, #24]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8006aea:	9205      	str	r2, [sp, #20]
 8006aec:	8001      	strh	r1, [r0, #0]
 8006aee:	f8cd 800c 	str.w	r8, [sp, #12]
 8006af2:	9004      	str	r0, [sp, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006af4:	bb2c      	cbnz	r4, 8006b42 <tcp_input+0x14e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006af6:	4871      	ldr	r0, [pc, #452]	; (8006cbc <tcp_input+0x2c8>)
 8006af8:	6800      	ldr	r0, [r0, #0]
 8006afa:	e0f6      	b.n	8006cea <tcp_input+0x2f6>
    pbuf_header(p, -TCP_HLEN);
 8006afc:	f06f 0113 	mvn.w	r1, #19
 8006b00:	4648      	mov	r0, r9
 8006b02:	f7fe fbe2 	bl	80052ca <pbuf_header>
    tcphdr_opt1len = p->len;
 8006b06:	f8b9 100a 	ldrh.w	r1, [r9, #10]
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8006b0a:	4648      	mov	r0, r9
    tcphdr_opt1len = p->len;
 8006b0c:	8021      	strh	r1, [r4, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8006b0e:	f8b8 4000 	ldrh.w	r4, [r8]
 8006b12:	1a64      	subs	r4, r4, r1
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8006b14:	4249      	negs	r1, r1
 8006b16:	b209      	sxth	r1, r1
 8006b18:	f7fe fbd7 	bl	80052ca <pbuf_header>
    if (opt2len > p->next->len) {
 8006b1c:	f8d9 0000 	ldr.w	r0, [r9]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8006b20:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 8006b22:	8943      	ldrh	r3, [r0, #10]
 8006b24:	42a3      	cmp	r3, r4
 8006b26:	f0c0 80b4 	bcc.w	8006c92 <tcp_input+0x29e>
    pbuf_header(p->next, -(s16_t)opt2len);
 8006b2a:	4261      	negs	r1, r4
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8006b2c:	6843      	ldr	r3, [r0, #4]
    pbuf_header(p->next, -(s16_t)opt2len);
 8006b2e:	b209      	sxth	r1, r1
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8006b30:	603b      	str	r3, [r7, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 8006b32:	f7fe fbca 	bl	80052ca <pbuf_header>
    p->tot_len -= opt2len;
 8006b36:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 8006b3a:	1b1c      	subs	r4, r3, r4
 8006b3c:	f8a9 4008 	strh.w	r4, [r9, #8]
 8006b40:	e795      	b.n	8006a6e <tcp_input+0x7a>
    if (pcb->remote_port == tcphdr->src &&
 8006b42:	f8b4 c018 	ldrh.w	ip, [r4, #24]
 8006b46:	8838      	ldrh	r0, [r7, #0]
 8006b48:	4584      	cmp	ip, r0
 8006b4a:	d169      	bne.n	8006c20 <tcp_input+0x22c>
 8006b4c:	f8b4 c016 	ldrh.w	ip, [r4, #22]
 8006b50:	8878      	ldrh	r0, [r7, #2]
 8006b52:	4584      	cmp	ip, r0
 8006b54:	d164      	bne.n	8006c20 <tcp_input+0x22c>
        pcb->local_port == tcphdr->dest &&
 8006b56:	6862      	ldr	r2, [r4, #4]
 8006b58:	9807      	ldr	r0, [sp, #28]
 8006b5a:	4282      	cmp	r2, r0
 8006b5c:	d160      	bne.n	8006c20 <tcp_input+0x22c>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006b5e:	6820      	ldr	r0, [r4, #0]
 8006b60:	4550      	cmp	r0, sl
 8006b62:	d15d      	bne.n	8006c20 <tcp_input+0x22c>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006b64:	68e1      	ldr	r1, [r4, #12]
      if (prev != NULL) {
 8006b66:	f1be 0f00 	cmp.w	lr, #0
 8006b6a:	d005      	beq.n	8006b78 <tcp_input+0x184>
        prev->next = pcb->next;
 8006b6c:	f8ce 100c 	str.w	r1, [lr, #12]
        pcb->next = tcp_active_pcbs;
 8006b70:	9906      	ldr	r1, [sp, #24]
 8006b72:	60e1      	str	r1, [r4, #12]
        tcp_active_pcbs = pcb;
 8006b74:	494f      	ldr	r1, [pc, #316]	; (8006cb4 <tcp_input+0x2c0>)
 8006b76:	600c      	str	r4, [r1, #0]
    inseg.next = NULL;
 8006b78:	4851      	ldr	r0, [pc, #324]	; (8006cc0 <tcp_input+0x2cc>)
 8006b7a:	2100      	movs	r1, #0
    inseg.len = p->tot_len;
 8006b7c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    if (flags & TCP_PSH) {
 8006b80:	f013 0f08 	tst.w	r3, #8
    inseg.tcphdr = tcphdr;
 8006b84:	60c7      	str	r7, [r0, #12]
    recv_flags = 0;
 8006b86:	4e4f      	ldr	r6, [pc, #316]	; (8006cc4 <tcp_input+0x2d0>)
    recv_data = NULL;
 8006b88:	4f4f      	ldr	r7, [pc, #316]	; (8006cc8 <tcp_input+0x2d4>)
    recv_acked = 0;
 8006b8a:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8006ce4 <tcp_input+0x2f0>
    recv_data = NULL;
 8006b8e:	6039      	str	r1, [r7, #0]
 8006b90:	46ba      	mov	sl, r7
    inseg.next = NULL;
 8006b92:	6001      	str	r1, [r0, #0]
 8006b94:	4607      	mov	r7, r0
    inseg.len = p->tot_len;
 8006b96:	8102      	strh	r2, [r0, #8]
    inseg.p = p;
 8006b98:	f8c0 9004 	str.w	r9, [r0, #4]
    recv_flags = 0;
 8006b9c:	7031      	strb	r1, [r6, #0]
    recv_acked = 0;
 8006b9e:	f8a8 1000 	strh.w	r1, [r8]
    if (flags & TCP_PSH) {
 8006ba2:	d005      	beq.n	8006bb0 <tcp_input+0x1bc>
      p->flags |= PBUF_FLAG_PUSH;
 8006ba4:	f899 300d 	ldrb.w	r3, [r9, #13]
 8006ba8:	f043 0301 	orr.w	r3, r3, #1
 8006bac:	f889 300d 	strb.w	r3, [r9, #13]
    if (pcb->refused_data != NULL) {
 8006bb0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	f040 8116 	bne.w	8006de4 <tcp_input+0x3f0>
    tcp_input_pcb = pcb;
 8006bb8:	4b44      	ldr	r3, [pc, #272]	; (8006ccc <tcp_input+0x2d8>)
  if (flags & TCP_RST) {
 8006bba:	493d      	ldr	r1, [pc, #244]	; (8006cb0 <tcp_input+0x2bc>)
    tcp_input_pcb = pcb;
 8006bbc:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 8006bbe:	780b      	ldrb	r3, [r1, #0]
 8006bc0:	4689      	mov	r9, r1
 8006bc2:	f013 0f04 	tst.w	r3, #4
 8006bc6:	f040 8128 	bne.w	8006e1a <tcp_input+0x426>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8006bca:	f013 0102 	ands.w	r1, r3, #2
 8006bce:	d004      	beq.n	8006bda <tcp_input+0x1e6>
 8006bd0:	7d20      	ldrb	r0, [r4, #20]
 8006bd2:	3802      	subs	r0, #2
 8006bd4:	2801      	cmp	r0, #1
 8006bd6:	f200 813c 	bhi.w	8006e52 <tcp_input+0x45e>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8006bda:	7ea0      	ldrb	r0, [r4, #26]
 8006bdc:	06c0      	lsls	r0, r0, #27
    pcb->tmr = tcp_ticks;
 8006bde:	bf5e      	ittt	pl
 8006be0:	483b      	ldrpl	r0, [pc, #236]	; (8006cd0 <tcp_input+0x2dc>)
 8006be2:	6800      	ldrpl	r0, [r0, #0]
 8006be4:	6220      	strpl	r0, [r4, #32]
  pcb->keep_cnt_sent = 0;
 8006be6:	2000      	movs	r0, #0
 8006be8:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
  if (tcphdr_optlen != 0) {
 8006bec:	4839      	ldr	r0, [pc, #228]	; (8006cd4 <tcp_input+0x2e0>)
 8006bee:	8800      	ldrh	r0, [r0, #0]
 8006bf0:	b138      	cbz	r0, 8006c02 <tcp_input+0x20e>
 8006bf2:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8006bf6:	9106      	str	r1, [sp, #24]
 8006bf8:	9305      	str	r3, [sp, #20]
 8006bfa:	f7ff fec3 	bl	8006984 <tcp_parseopt.isra.1.part.2>
 8006bfe:	9906      	ldr	r1, [sp, #24]
 8006c00:	9b05      	ldr	r3, [sp, #20]
  switch (pcb->state) {
 8006c02:	7d20      	ldrb	r0, [r4, #20]
 8006c04:	3802      	subs	r0, #2
 8006c06:	2807      	cmp	r0, #7
 8006c08:	f200 8192 	bhi.w	8006f30 <tcp_input+0x53c>
 8006c0c:	e8df f010 	tbh	[pc, r0, lsl #1]
 8006c10:	01a40126 	.word	0x01a40126
 8006c14:	02190215 	.word	0x02190215
 8006c18:	02150263 	.word	0x02150263
 8006c1c:	029c027c 	.word	0x029c027c
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006c20:	46a6      	mov	lr, r4
 8006c22:	68e4      	ldr	r4, [r4, #12]
 8006c24:	e766      	b.n	8006af4 <tcp_input+0x100>
      if (pcb->remote_port == tcphdr->src &&
 8006c26:	8b04      	ldrh	r4, [r0, #24]
 8006c28:	f8b7 c000 	ldrh.w	ip, [r7]
 8006c2c:	45a4      	cmp	ip, r4
 8006c2e:	d15b      	bne.n	8006ce8 <tcp_input+0x2f4>
          pcb->local_port == tcphdr->dest &&
 8006c30:	8ac4      	ldrh	r4, [r0, #22]
      if (pcb->remote_port == tcphdr->src &&
 8006c32:	f8b7 e002 	ldrh.w	lr, [r7, #2]
 8006c36:	45a6      	cmp	lr, r4
 8006c38:	d156      	bne.n	8006ce8 <tcp_input+0x2f4>
          pcb->local_port == tcphdr->dest &&
 8006c3a:	6844      	ldr	r4, [r0, #4]
 8006c3c:	9a07      	ldr	r2, [sp, #28]
 8006c3e:	42a2      	cmp	r2, r4
 8006c40:	d152      	bne.n	8006ce8 <tcp_input+0x2f4>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006c42:	6804      	ldr	r4, [r0, #0]
 8006c44:	45a2      	cmp	sl, r4
 8006c46:	d14f      	bne.n	8006ce8 <tcp_input+0x2f4>
  if (flags & TCP_RST) {
 8006c48:	075e      	lsls	r6, r3, #29
 8006c4a:	d422      	bmi.n	8006c92 <tcp_input+0x29e>
  if (flags & TCP_SYN) {
 8006c4c:	079d      	lsls	r5, r3, #30
 8006c4e:	d514      	bpl.n	8006c7a <tcp_input+0x286>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8006c50:	f8db 4000 	ldr.w	r4, [fp]
 8006c54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006c56:	1ae3      	subs	r3, r4, r3
 8006c58:	d414      	bmi.n	8006c84 <tcp_input+0x290>
 8006c5a:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 8006c5c:	1a9b      	subs	r3, r3, r2
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	dc10      	bgt.n	8006c84 <tcp_input+0x290>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006c62:	4b1d      	ldr	r3, [pc, #116]	; (8006cd8 <tcp_input+0x2e4>)
 8006c64:	4421      	add	r1, r4
 8006c66:	f8cd c004 	str.w	ip, [sp, #4]
 8006c6a:	1d1a      	adds	r2, r3, #4
 8006c6c:	f8cd e000 	str.w	lr, [sp]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006c70:	9803      	ldr	r0, [sp, #12]
 8006c72:	6800      	ldr	r0, [r0, #0]
 8006c74:	f000 ff2e 	bl	8007ad4 <tcp_rst>
 8006c78:	e00b      	b.n	8006c92 <tcp_input+0x29e>
  } else if (flags & TCP_FIN) {
 8006c7a:	07dc      	lsls	r4, r3, #31
    pcb->tmr = tcp_ticks;
 8006c7c:	bf42      	ittt	mi
 8006c7e:	4b14      	ldrmi	r3, [pc, #80]	; (8006cd0 <tcp_input+0x2dc>)
 8006c80:	681b      	ldrmi	r3, [r3, #0]
 8006c82:	6203      	strmi	r3, [r0, #32]
  if ((tcplen > 0)) {
 8006c84:	b129      	cbz	r1, 8006c92 <tcp_input+0x29e>
    pcb->flags |= TF_ACK_NOW;
 8006c86:	7e83      	ldrb	r3, [r0, #26]
 8006c88:	f043 0302 	orr.w	r3, r3, #2
 8006c8c:	7683      	strb	r3, [r0, #26]
    tcp_output(pcb);
 8006c8e:	f000 fddf 	bl	8007850 <tcp_output>
  pbuf_free(p);
 8006c92:	4648      	mov	r0, r9
}
 8006c94:	b009      	add	sp, #36	; 0x24
 8006c96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8006c9a:	f7fe bb1d 	b.w	80052d8 <pbuf_free>
 8006c9e:	bf00      	nop
 8006ca0:	20000370 	.word	0x20000370
 8006ca4:	200003f8 	.word	0x200003f8
 8006ca8:	20000378 	.word	0x20000378
 8006cac:	20000374 	.word	0x20000374
 8006cb0:	20000348 	.word	0x20000348
 8006cb4:	2000b0b8 	.word	0x2000b0b8
 8006cb8:	2000037e 	.word	0x2000037e
 8006cbc:	2000b0c8 	.word	0x2000b0c8
 8006cc0:	2000034c 	.word	0x2000034c
 8006cc4:	20000364 	.word	0x20000364
 8006cc8:	20000360 	.word	0x20000360
 8006ccc:	2000b0cc 	.word	0x2000b0cc
 8006cd0:	2000b0bc 	.word	0x2000b0bc
 8006cd4:	2000037c 	.word	0x2000037c
 8006cd8:	20000408 	.word	0x20000408
 8006cdc:	20000368 	.word	0x20000368
 8006ce0:	20000344 	.word	0x20000344
 8006ce4:	2000035c 	.word	0x2000035c
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ce8:	68c0      	ldr	r0, [r0, #12]
 8006cea:	2800      	cmp	r0, #0
 8006cec:	d19b      	bne.n	8006c26 <tcp_input+0x232>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006cee:	4ca4      	ldr	r4, [pc, #656]	; (8006f80 <tcp_input+0x58c>)
 8006cf0:	f8d4 c000 	ldr.w	ip, [r4]
 8006cf4:	4664      	mov	r4, ip
 8006cf6:	b974      	cbnz	r4, 8006d16 <tcp_input+0x322>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8006cf8:	89b8      	ldrh	r0, [r7, #12]
 8006cfa:	f7fd f9b0 	bl	800405e <lwip_htons>
 8006cfe:	0743      	lsls	r3, r0, #29
 8006d00:	d4c7      	bmi.n	8006c92 <tcp_input+0x29e>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006d02:	682b      	ldr	r3, [r5, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006d04:	9a04      	ldr	r2, [sp, #16]
 8006d06:	f8db 1000 	ldr.w	r1, [fp]
 8006d0a:	8810      	ldrh	r0, [r2, #0]
 8006d0c:	881a      	ldrh	r2, [r3, #0]
 8006d0e:	9201      	str	r2, [sp, #4]
 8006d10:	885b      	ldrh	r3, [r3, #2]
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	e2a0      	b.n	8007258 <tcp_input+0x864>
      if (lpcb->local_port == tcphdr->dest) {
 8006d16:	f8b4 e016 	ldrh.w	lr, [r4, #22]
 8006d1a:	f8b7 8002 	ldrh.w	r8, [r7, #2]
 8006d1e:	45f0      	cmp	r8, lr
 8006d20:	d108      	bne.n	8006d34 <tcp_input+0x340>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006d22:	f8d4 8000 	ldr.w	r8, [r4]
 8006d26:	45c2      	cmp	sl, r8
 8006d28:	f000 8283 	beq.w	8007232 <tcp_input+0x83e>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8006d2c:	f1b8 0f00 	cmp.w	r8, #0
 8006d30:	f000 827f 	beq.w	8007232 <tcp_input+0x83e>
 8006d34:	4620      	mov	r0, r4
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006d36:	68e4      	ldr	r4, [r4, #12]
 8006d38:	e7dd      	b.n	8006cf6 <tcp_input+0x302>
  } else if (flags & TCP_SYN) {
 8006d3a:	079f      	lsls	r7, r3, #30
 8006d3c:	d5a9      	bpl.n	8006c92 <tcp_input+0x29e>
    npcb = tcp_alloc(pcb->prio);
 8006d3e:	7d60      	ldrb	r0, [r4, #21]
 8006d40:	f7ff f924 	bl	8005f8c <tcp_alloc>
    if (npcb == NULL) {
 8006d44:	4607      	mov	r7, r0
 8006d46:	b940      	cbnz	r0, 8006d5a <tcp_input+0x366>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8006d48:	69a3      	ldr	r3, [r4, #24]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0a1      	beq.n	8006c92 <tcp_input+0x29e>
 8006d4e:	4601      	mov	r1, r0
 8006d50:	f04f 32ff 	mov.w	r2, #4294967295
 8006d54:	6920      	ldr	r0, [r4, #16]
 8006d56:	4798      	blx	r3
 8006d58:	e79b      	b.n	8006c92 <tcp_input+0x29e>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8006d5a:	6973      	ldr	r3, [r6, #20]
    npcb->remote_port = tcphdr->src;
 8006d5c:	6829      	ldr	r1, [r5, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8006d5e:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8006d60:	6933      	ldr	r3, [r6, #16]
 8006d62:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8006d64:	8ae3      	ldrh	r3, [r4, #22]
 8006d66:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8006d68:	780b      	ldrb	r3, [r1, #0]
 8006d6a:	7849      	ldrb	r1, [r1, #1]
 8006d6c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006d70:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8006d72:	2303      	movs	r3, #3
 8006d74:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8006d76:	f8db 3000 	ldr.w	r3, [fp]
 8006d7a:	1c5a      	adds	r2, r3, #1
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	6503      	str	r3, [r0, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8006d80:	6923      	ldr	r3, [r4, #16]
    npcb->rcv_nxt = seqno + 1;
 8006d82:	6242      	str	r2, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8006d84:	62c2      	str	r2, [r0, #44]	; 0x2c
    npcb->callback_arg = pcb->callback_arg;
 8006d86:	6103      	str	r3, [r0, #16]
    npcb->listener = pcb;
 8006d88:	6784      	str	r4, [r0, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8006d8a:	7a23      	ldrb	r3, [r4, #8]
 8006d8c:	f003 030c 	and.w	r3, r3, #12
 8006d90:	7203      	strb	r3, [r0, #8]
    TCP_REG_ACTIVE(npcb);
 8006d92:	4b7c      	ldr	r3, [pc, #496]	; (8006f84 <tcp_input+0x590>)
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	6018      	str	r0, [r3, #0]
 8006d98:	60c2      	str	r2, [r0, #12]
 8006d9a:	f001 f819 	bl	8007dd0 <tcp_timer_needed>
 8006d9e:	4b7a      	ldr	r3, [pc, #488]	; (8006f88 <tcp_input+0x594>)
 8006da0:	2201      	movs	r2, #1
 8006da2:	701a      	strb	r2, [r3, #0]
  if (tcphdr_optlen != 0) {
 8006da4:	4b79      	ldr	r3, [pc, #484]	; (8006f8c <tcp_input+0x598>)
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	b11b      	cbz	r3, 8006db2 <tcp_input+0x3be>
 8006daa:	f107 0032 	add.w	r0, r7, #50	; 0x32
 8006dae:	f7ff fde9 	bl	8006984 <tcp_parseopt.isra.1.part.2>
    npcb->snd_wnd = SND_WND_SCALE(npcb, tcphdr->wnd);
 8006db2:	682b      	ldr	r3, [r5, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8006db4:	1d39      	adds	r1, r7, #4
 8006db6:	8e78      	ldrh	r0, [r7, #50]	; 0x32
    npcb->snd_wnd = SND_WND_SCALE(npcb, tcphdr->wnd);
 8006db8:	89db      	ldrh	r3, [r3, #14]
 8006dba:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8006dbe:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    npcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(npcb);
 8006dc2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8006dc6:	f7ff f970 	bl	80060aa <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8006dca:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8006dcc:	8678      	strh	r0, [r7, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8006dce:	4638      	mov	r0, r7
 8006dd0:	f000 fc9c 	bl	800770c <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8006dd4:	b120      	cbz	r0, 8006de0 <tcp_input+0x3ec>
      tcp_abandon(npcb, 0);
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	4638      	mov	r0, r7
 8006dda:	f7ff f82f 	bl	8005e3c <tcp_abandon>
 8006dde:	e758      	b.n	8006c92 <tcp_input+0x29e>
    tcp_output(npcb);
 8006de0:	4638      	mov	r0, r7
 8006de2:	e754      	b.n	8006c8e <tcp_input+0x29a>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006de4:	4620      	mov	r0, r4
 8006de6:	f7fe ffab 	bl	8005d40 <tcp_process_refused_data>
 8006dea:	300d      	adds	r0, #13
 8006dec:	d008      	beq.n	8006e00 <tcp_input+0x40c>
 8006dee:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f43f aee1 	beq.w	8006bb8 <tcp_input+0x1c4>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006df6:	4b66      	ldr	r3, [pc, #408]	; (8006f90 <tcp_input+0x59c>)
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f43f aedc 	beq.w	8006bb8 <tcp_input+0x1c4>
    tcp_input_pcb = NULL;
 8006e00:	2400      	movs	r4, #0
 8006e02:	4b64      	ldr	r3, [pc, #400]	; (8006f94 <tcp_input+0x5a0>)
    if (inseg.p != NULL)
 8006e04:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 8006e06:	601c      	str	r4, [r3, #0]
    recv_data = NULL;
 8006e08:	f8ca 4000 	str.w	r4, [sl]
    if (inseg.p != NULL)
 8006e0c:	b110      	cbz	r0, 8006e14 <tcp_input+0x420>
      pbuf_free(inseg.p);
 8006e0e:	f7fe fa63 	bl	80052d8 <pbuf_free>
      inseg.p = NULL;
 8006e12:	607c      	str	r4, [r7, #4]
}
 8006e14:	b009      	add	sp, #36	; 0x24
 8006e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pcb->state == SYN_SENT) {
 8006e1a:	7d23      	ldrb	r3, [r4, #20]
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d10d      	bne.n	8006e3c <tcp_input+0x448>
      if (ackno == pcb->snd_nxt) {
 8006e20:	4b5d      	ldr	r3, [pc, #372]	; (8006f98 <tcp_input+0x5a4>)
 8006e22:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	f040 8082 	bne.w	8006f30 <tcp_input+0x53c>
      recv_flags |= TF_RESET;
 8006e2c:	7833      	ldrb	r3, [r6, #0]
 8006e2e:	f043 0308 	orr.w	r3, r3, #8
 8006e32:	7033      	strb	r3, [r6, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8006e34:	7ea3      	ldrb	r3, [r4, #26]
 8006e36:	f023 0301 	bic.w	r3, r3, #1
 8006e3a:	e00d      	b.n	8006e58 <tcp_input+0x464>
      if (seqno == pcb->rcv_nxt) {
 8006e3c:	4b57      	ldr	r3, [pc, #348]	; (8006f9c <tcp_input+0x5a8>)
 8006e3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d0f2      	beq.n	8006e2c <tcp_input+0x438>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8006e46:	1a9b      	subs	r3, r3, r2
 8006e48:	d472      	bmi.n	8006f30 <tcp_input+0x53c>
 8006e4a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006e4c:	1a9b      	subs	r3, r3, r2
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	dc6e      	bgt.n	8006f30 <tcp_input+0x53c>
      tcp_ack_now(pcb);
 8006e52:	7ea3      	ldrb	r3, [r4, #26]
 8006e54:	f043 0302 	orr.w	r3, r3, #2
      pcb->flags &= ~TF_ACK_DELAY;
 8006e58:	76a3      	strb	r3, [r4, #26]
 8006e5a:	e069      	b.n	8006f30 <tcp_input+0x53c>
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8006e5c:	f003 0112 	and.w	r1, r3, #18
 8006e60:	2912      	cmp	r1, #18
 8006e62:	d14e      	bne.n	8006f02 <tcp_input+0x50e>
        && (ackno == pcb->lastack + 1)) {
 8006e64:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006e66:	484c      	ldr	r0, [pc, #304]	; (8006f98 <tcp_input+0x5a4>)
 8006e68:	3101      	adds	r1, #1
 8006e6a:	6800      	ldr	r0, [r0, #0]
 8006e6c:	4281      	cmp	r1, r0
 8006e6e:	d148      	bne.n	8006f02 <tcp_input+0x50e>
      pcb->rcv_nxt = seqno + 1;
 8006e70:	f8db 3000 	ldr.w	r3, [fp]
      pcb->lastack = ackno;
 8006e74:	6461      	str	r1, [r4, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 8006e76:	1c5a      	adds	r2, r3, #1
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8006e78:	3b01      	subs	r3, #1
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8006e7a:	8e60      	ldrh	r0, [r4, #50]	; 0x32
      pcb->rcv_nxt = seqno + 1;
 8006e7c:	6262      	str	r2, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8006e7e:	62e2      	str	r2, [r4, #44]	; 0x2c
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8006e80:	682a      	ldr	r2, [r5, #0]
 8006e82:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8006e84:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8006e86:	2304      	movs	r3, #4
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8006e88:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8006e8c:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8006e90:	18e1      	adds	r1, r4, r3
      pcb->state = ESTABLISHED;
 8006e92:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8006e94:	f7ff f909 	bl	80060aa <tcp_eff_send_mss_impl>
      pcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(pcb);
 8006e98:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006e9c:	f241 121c 	movw	r2, #4380	; 0x111c
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8006ea0:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(pcb);
 8006ea2:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006ea6:	0043      	lsls	r3, r0, #1
 8006ea8:	0080      	lsls	r0, r0, #2
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	bf38      	it	cc
 8006eae:	4613      	movcc	r3, r2
 8006eb0:	4283      	cmp	r3, r0
 8006eb2:	bf28      	it	cs
 8006eb4:	4603      	movcs	r3, r0
      rseg = pcb->unacked;
 8006eb6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006eb8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      --pcb->snd_queuelen;
 8006ebc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rseg == NULL) {
 8006ec6:	b9a0      	cbnz	r0, 8006ef2 <tcp_input+0x4fe>
        rseg = pcb->unsent;
 8006ec8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
        pcb->unsent = rseg->next;
 8006eca:	6803      	ldr	r3, [r0, #0]
 8006ecc:	66a3      	str	r3, [r4, #104]	; 0x68
      tcp_seg_free(rseg);
 8006ece:	f7fe fc61 	bl	8005794 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 8006ed2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006ed4:	b983      	cbnz	r3, 8006ef8 <tcp_input+0x504>
        pcb->rtime = -1;
 8006ed6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006eda:	8623      	strh	r3, [r4, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8006edc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d0b6      	beq.n	8006e52 <tcp_input+0x45e>
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	6920      	ldr	r0, [r4, #16]
 8006eea:	4798      	blx	r3
      if (err == ERR_ABRT) {
 8006eec:	300d      	adds	r0, #13
 8006eee:	d1b0      	bne.n	8006e52 <tcp_input+0x45e>
 8006ef0:	e786      	b.n	8006e00 <tcp_input+0x40c>
        pcb->unacked = rseg->next;
 8006ef2:	6803      	ldr	r3, [r0, #0]
 8006ef4:	66e3      	str	r3, [r4, #108]	; 0x6c
 8006ef6:	e7ea      	b.n	8006ece <tcp_input+0x4da>
        pcb->rtime = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 8006efc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f00:	e7ec      	b.n	8006edc <tcp_input+0x4e8>
    else if (flags & TCP_ACK) {
 8006f02:	06da      	lsls	r2, r3, #27
 8006f04:	d514      	bpl.n	8006f30 <tcp_input+0x53c>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006f06:	682b      	ldr	r3, [r5, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006f08:	9a04      	ldr	r2, [sp, #16]
 8006f0a:	f8db 1000 	ldr.w	r1, [fp]
 8006f0e:	8810      	ldrh	r0, [r2, #0]
 8006f10:	881a      	ldrh	r2, [r3, #0]
 8006f12:	4401      	add	r1, r0
 8006f14:	9803      	ldr	r0, [sp, #12]
 8006f16:	9201      	str	r2, [sp, #4]
 8006f18:	885b      	ldrh	r3, [r3, #2]
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	4b20      	ldr	r3, [pc, #128]	; (8006fa0 <tcp_input+0x5ac>)
 8006f1e:	6800      	ldr	r0, [r0, #0]
 8006f20:	1d1a      	adds	r2, r3, #4
 8006f22:	f000 fdd7 	bl	8007ad4 <tcp_rst>
      pcb->rtime = 0;
 8006f26:	2300      	movs	r3, #0
      tcp_rexmit_rto(pcb);
 8006f28:	4620      	mov	r0, r4
      pcb->rtime = 0;
 8006f2a:	8623      	strh	r3, [r4, #48]	; 0x30
      tcp_rexmit_rto(pcb);
 8006f2c:	f000 fe1a 	bl	8007b64 <tcp_rexmit_rto>
      if (recv_flags & TF_RESET) {
 8006f30:	7833      	ldrb	r3, [r6, #0]
 8006f32:	071d      	lsls	r5, r3, #28
 8006f34:	f140 811f 	bpl.w	8007176 <tcp_input+0x782>
        TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
 8006f38:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006f3c:	b11b      	cbz	r3, 8006f46 <tcp_input+0x552>
 8006f3e:	f06f 010d 	mvn.w	r1, #13
            TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
 8006f42:	6920      	ldr	r0, [r4, #16]
 8006f44:	4798      	blx	r3
          tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006f46:	4621      	mov	r1, r4
 8006f48:	480e      	ldr	r0, [pc, #56]	; (8006f84 <tcp_input+0x590>)
 8006f4a:	f7fe fe03 	bl	8005b54 <tcp_pcb_remove>
          memp_free(MEMP_TCP_PCB, pcb);
 8006f4e:	4621      	mov	r1, r4
 8006f50:	2001      	movs	r0, #1
 8006f52:	f7fe f8a9 	bl	80050a8 <memp_free>
          goto aborted;
 8006f56:	e753      	b.n	8006e00 <tcp_input+0x40c>
    if (flags & TCP_ACK) {
 8006f58:	06db      	lsls	r3, r3, #27
 8006f5a:	d561      	bpl.n	8007020 <tcp_input+0x62c>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8006f5c:	4b0e      	ldr	r3, [pc, #56]	; (8006f98 <tcp_input+0x5a4>)
 8006f5e:	6818      	ldr	r0, [r3, #0]
 8006f60:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006f62:	43db      	mvns	r3, r3
 8006f64:	42c3      	cmn	r3, r0
 8006f66:	d44c      	bmi.n	8007002 <tcp_input+0x60e>
 8006f68:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006f6a:	1ac3      	subs	r3, r0, r3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	dc48      	bgt.n	8007002 <tcp_input+0x60e>
        pcb->state = ESTABLISHED;
 8006f70:	2304      	movs	r3, #4
 8006f72:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8006f74:	6fa3      	ldr	r3, [r4, #120]	; 0x78
        if (pcb->listener == NULL) {
 8006f76:	b9ab      	cbnz	r3, 8006fa4 <tcp_input+0x5b0>
            tcp_abort(pcb);
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f7fe ffc5 	bl	8005f08 <tcp_abort>
            goto aborted;
 8006f7e:	e73f      	b.n	8006e00 <tcp_input+0x40c>
 8006f80:	2000b0c0 	.word	0x2000b0c0
 8006f84:	2000b0b8 	.word	0x2000b0b8
 8006f88:	2000b0b4 	.word	0x2000b0b4
 8006f8c:	2000037c 	.word	0x2000037c
 8006f90:	2000037e 	.word	0x2000037e
 8006f94:	2000b0cc 	.word	0x2000b0cc
 8006f98:	20000344 	.word	0x20000344
 8006f9c:	20000368 	.word	0x20000368
 8006fa0:	20000408 	.word	0x20000408
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0e6      	beq.n	8006f78 <tcp_input+0x584>
 8006faa:	2200      	movs	r2, #0
 8006fac:	4621      	mov	r1, r4
 8006fae:	6920      	ldr	r0, [r4, #16]
 8006fb0:	4798      	blx	r3
        if (err != ERR_OK) {
 8006fb2:	b110      	cbz	r0, 8006fba <tcp_input+0x5c6>
          if (err != ERR_ABRT) {
 8006fb4:	300d      	adds	r0, #13
 8006fb6:	d1df      	bne.n	8006f78 <tcp_input+0x584>
 8006fb8:	e722      	b.n	8006e00 <tcp_input+0x40c>
        tcp_receive(pcb);
 8006fba:	4620      	mov	r0, r4
 8006fbc:	f7ff f8e8 	bl	8006190 <tcp_receive>
        pcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(pcb);
 8006fc0:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8006fc4:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
        if (recv_acked != 0) {
 8006fc8:	f8b8 3000 	ldrh.w	r3, [r8]
 8006fcc:	b113      	cbz	r3, 8006fd4 <tcp_input+0x5e0>
          recv_acked--;
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	f8a8 3000 	strh.w	r3, [r8]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006fd4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8006fd6:	f241 111c 	movw	r1, #4380	; 0x111c
 8006fda:	0053      	lsls	r3, r2, #1
 8006fdc:	0092      	lsls	r2, r2, #2
 8006fde:	428b      	cmp	r3, r1
 8006fe0:	bf38      	it	cc
 8006fe2:	460b      	movcc	r3, r1
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	bf28      	it	cs
 8006fe8:	4613      	movcs	r3, r2
 8006fea:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8006fee:	7833      	ldrb	r3, [r6, #0]
 8006ff0:	069d      	lsls	r5, r3, #26
 8006ff2:	d59d      	bpl.n	8006f30 <tcp_input+0x53c>
      tcp_ack_now(pcb);
 8006ff4:	7ea3      	ldrb	r3, [r4, #26]
 8006ff6:	f043 0302 	orr.w	r3, r3, #2
 8006ffa:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 8006ffc:	2307      	movs	r3, #7
      pcb->state = FIN_WAIT_2;
 8006ffe:	7523      	strb	r3, [r4, #20]
 8007000:	e796      	b.n	8006f30 <tcp_input+0x53c>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007002:	682b      	ldr	r3, [r5, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007004:	9a04      	ldr	r2, [sp, #16]
 8007006:	f8db 1000 	ldr.w	r1, [fp]
 800700a:	8815      	ldrh	r5, [r2, #0]
 800700c:	881a      	ldrh	r2, [r3, #0]
 800700e:	4429      	add	r1, r5
 8007010:	9201      	str	r2, [sp, #4]
 8007012:	885b      	ldrh	r3, [r3, #2]
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	4b92      	ldr	r3, [pc, #584]	; (8007260 <tcp_input+0x86c>)
 8007018:	1d1a      	adds	r2, r3, #4
 800701a:	f000 fd5b 	bl	8007ad4 <tcp_rst>
 800701e:	e787      	b.n	8006f30 <tcp_input+0x53c>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007020:	2900      	cmp	r1, #0
 8007022:	d085      	beq.n	8006f30 <tcp_input+0x53c>
 8007024:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007026:	4a8f      	ldr	r2, [pc, #572]	; (8007264 <tcp_input+0x870>)
 8007028:	3b01      	subs	r3, #1
 800702a:	6812      	ldr	r2, [r2, #0]
 800702c:	4293      	cmp	r3, r2
 800702e:	f47f af7f 	bne.w	8006f30 <tcp_input+0x53c>
      tcp_rexmit(pcb);
 8007032:	4620      	mov	r0, r4
 8007034:	f000 fdaf 	bl	8007b96 <tcp_rexmit>
 8007038:	e77a      	b.n	8006f30 <tcp_input+0x53c>
    tcp_receive(pcb);
 800703a:	4620      	mov	r0, r4
 800703c:	f7ff f8a8 	bl	8006190 <tcp_receive>
 8007040:	e7d5      	b.n	8006fee <tcp_input+0x5fa>
    tcp_receive(pcb);
 8007042:	4620      	mov	r0, r4
 8007044:	f7ff f8a4 	bl	8006190 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8007048:	7833      	ldrb	r3, [r6, #0]
 800704a:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800704e:	f899 3000 	ldrb.w	r3, [r9]
    if (recv_flags & TF_GOT_FIN) {
 8007052:	d031      	beq.n	80070b8 <tcp_input+0x6c4>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007054:	f013 0f10 	tst.w	r3, #16
 8007058:	7ea3      	ldrb	r3, [r4, #26]
 800705a:	d028      	beq.n	80070ae <tcp_input+0x6ba>
 800705c:	4a82      	ldr	r2, [pc, #520]	; (8007268 <tcp_input+0x874>)
 800705e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007060:	6812      	ldr	r2, [r2, #0]
 8007062:	4291      	cmp	r1, r2
 8007064:	d123      	bne.n	80070ae <tcp_input+0x6ba>
 8007066:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8007068:	bb0a      	cbnz	r2, 80070ae <tcp_input+0x6ba>
        tcp_ack_now(pcb);
 800706a:	f043 0302 	orr.w	r3, r3, #2
        tcp_pcb_purge(pcb);
 800706e:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 8007070:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 8007072:	f7fe fbd5 	bl	8005820 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007076:	4a7d      	ldr	r2, [pc, #500]	; (800726c <tcp_input+0x878>)
 8007078:	6813      	ldr	r3, [r2, #0]
 800707a:	429c      	cmp	r4, r3
 800707c:	d109      	bne.n	8007092 <tcp_input+0x69e>
      TCP_RMV_ACTIVE(pcb);
 800707e:	68e3      	ldr	r3, [r4, #12]
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	e008      	b.n	8007096 <tcp_input+0x6a2>
        TCP_RMV_ACTIVE(pcb);
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	4294      	cmp	r4, r2
 8007088:	d102      	bne.n	8007090 <tcp_input+0x69c>
      TCP_RMV_ACTIVE(pcb);
 800708a:	68e2      	ldr	r2, [r4, #12]
 800708c:	60da      	str	r2, [r3, #12]
 800708e:	e002      	b.n	8007096 <tcp_input+0x6a2>
        TCP_RMV_ACTIVE(pcb);
 8007090:	4613      	mov	r3, r2
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1f6      	bne.n	8007084 <tcp_input+0x690>
      TCP_RMV_ACTIVE(pcb);
 8007096:	2201      	movs	r2, #1
 8007098:	4b75      	ldr	r3, [pc, #468]	; (8007270 <tcp_input+0x87c>)
 800709a:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800709c:	230a      	movs	r3, #10
 800709e:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80070a0:	4b74      	ldr	r3, [pc, #464]	; (8007274 <tcp_input+0x880>)
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	601c      	str	r4, [r3, #0]
 80070a6:	60e2      	str	r2, [r4, #12]
 80070a8:	f000 fe92 	bl	8007dd0 <tcp_timer_needed>
 80070ac:	e740      	b.n	8006f30 <tcp_input+0x53c>
        tcp_ack_now(pcb);
 80070ae:	f043 0302 	orr.w	r3, r3, #2
 80070b2:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 80070b4:	2308      	movs	r3, #8
 80070b6:	e7a2      	b.n	8006ffe <tcp_input+0x60a>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80070b8:	06d8      	lsls	r0, r3, #27
 80070ba:	f57f af39 	bpl.w	8006f30 <tcp_input+0x53c>
 80070be:	4b6a      	ldr	r3, [pc, #424]	; (8007268 <tcp_input+0x874>)
 80070c0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	f47f af33 	bne.w	8006f30 <tcp_input+0x53c>
 80070ca:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f47f af2f 	bne.w	8006f30 <tcp_input+0x53c>
      pcb->state = FIN_WAIT_2;
 80070d2:	2306      	movs	r3, #6
 80070d4:	e793      	b.n	8006ffe <tcp_input+0x60a>
    tcp_receive(pcb);
 80070d6:	4620      	mov	r0, r4
 80070d8:	f7ff f85a 	bl	8006190 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80070dc:	7833      	ldrb	r3, [r6, #0]
 80070de:	0699      	lsls	r1, r3, #26
 80070e0:	f57f af26 	bpl.w	8006f30 <tcp_input+0x53c>
      tcp_ack_now(pcb);
 80070e4:	7ea3      	ldrb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 80070e6:	4620      	mov	r0, r4
      tcp_ack_now(pcb);
 80070e8:	f043 0302 	orr.w	r3, r3, #2
 80070ec:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 80070ee:	f7fe fb97 	bl	8005820 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80070f2:	4a5e      	ldr	r2, [pc, #376]	; (800726c <tcp_input+0x878>)
 80070f4:	6813      	ldr	r3, [r2, #0]
 80070f6:	429c      	cmp	r4, r3
 80070f8:	d0c1      	beq.n	800707e <tcp_input+0x68a>
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d0cb      	beq.n	8007096 <tcp_input+0x6a2>
 80070fe:	68da      	ldr	r2, [r3, #12]
 8007100:	4294      	cmp	r4, r2
 8007102:	d0c2      	beq.n	800708a <tcp_input+0x696>
 8007104:	4613      	mov	r3, r2
 8007106:	e7f8      	b.n	80070fa <tcp_input+0x706>
    tcp_receive(pcb);
 8007108:	4620      	mov	r0, r4
 800710a:	f7ff f841 	bl	8006190 <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800710e:	f899 3000 	ldrb.w	r3, [r9]
 8007112:	06da      	lsls	r2, r3, #27
 8007114:	f57f af0c 	bpl.w	8006f30 <tcp_input+0x53c>
 8007118:	4b53      	ldr	r3, [pc, #332]	; (8007268 <tcp_input+0x874>)
 800711a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	429a      	cmp	r2, r3
 8007120:	f47f af06 	bne.w	8006f30 <tcp_input+0x53c>
 8007124:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007126:	2b00      	cmp	r3, #0
 8007128:	f47f af02 	bne.w	8006f30 <tcp_input+0x53c>
      tcp_pcb_purge(pcb);
 800712c:	4620      	mov	r0, r4
 800712e:	f7fe fb77 	bl	8005820 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007132:	4a4e      	ldr	r2, [pc, #312]	; (800726c <tcp_input+0x878>)
 8007134:	6813      	ldr	r3, [r2, #0]
 8007136:	429c      	cmp	r4, r3
 8007138:	d0a1      	beq.n	800707e <tcp_input+0x68a>
 800713a:	2b00      	cmp	r3, #0
 800713c:	d0ab      	beq.n	8007096 <tcp_input+0x6a2>
 800713e:	68da      	ldr	r2, [r3, #12]
 8007140:	4294      	cmp	r4, r2
 8007142:	d0a2      	beq.n	800708a <tcp_input+0x696>
 8007144:	4613      	mov	r3, r2
 8007146:	e7f8      	b.n	800713a <tcp_input+0x746>
    tcp_receive(pcb);
 8007148:	4620      	mov	r0, r4
 800714a:	f7ff f821 	bl	8006190 <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800714e:	f899 3000 	ldrb.w	r3, [r9]
 8007152:	06db      	lsls	r3, r3, #27
 8007154:	f57f aeec 	bpl.w	8006f30 <tcp_input+0x53c>
 8007158:	4b43      	ldr	r3, [pc, #268]	; (8007268 <tcp_input+0x874>)
 800715a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	429a      	cmp	r2, r3
 8007160:	f47f aee6 	bne.w	8006f30 <tcp_input+0x53c>
 8007164:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007166:	2b00      	cmp	r3, #0
 8007168:	f47f aee2 	bne.w	8006f30 <tcp_input+0x53c>
      recv_flags |= TF_CLOSED;
 800716c:	7833      	ldrb	r3, [r6, #0]
 800716e:	f043 0310 	orr.w	r3, r3, #16
 8007172:	7033      	strb	r3, [r6, #0]
 8007174:	e6dc      	b.n	8006f30 <tcp_input+0x53c>
        if (recv_acked > 0) {
 8007176:	f8b8 2000 	ldrh.w	r2, [r8]
 800717a:	b122      	cbz	r2, 8007186 <tcp_input+0x792>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800717c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800717e:	b98b      	cbnz	r3, 80071a4 <tcp_input+0x7b0>
          recv_acked = 0;
 8007180:	2300      	movs	r3, #0
 8007182:	f8a8 3000 	strh.w	r3, [r8]
        if (recv_flags & TF_CLOSED) {
 8007186:	7833      	ldrb	r3, [r6, #0]
 8007188:	06d8      	lsls	r0, r3, #27
 800718a:	d511      	bpl.n	80071b0 <tcp_input+0x7bc>
          if (!(pcb->flags & TF_RXCLOSED)) {
 800718c:	7ea3      	ldrb	r3, [r4, #26]
 800718e:	06d9      	lsls	r1, r3, #27
 8007190:	f53f aed9 	bmi.w	8006f46 <tcp_input+0x552>
            TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007194:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007198:	2b00      	cmp	r3, #0
 800719a:	f43f aed4 	beq.w	8006f46 <tcp_input+0x552>
 800719e:	f06f 010e 	mvn.w	r1, #14
 80071a2:	e6ce      	b.n	8006f42 <tcp_input+0x54e>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80071a4:	4621      	mov	r1, r4
 80071a6:	6920      	ldr	r0, [r4, #16]
 80071a8:	4798      	blx	r3
            if (err == ERR_ABRT) {
 80071aa:	300d      	adds	r0, #13
 80071ac:	d1e8      	bne.n	8007180 <tcp_input+0x78c>
 80071ae:	e627      	b.n	8006e00 <tcp_input+0x40c>
        if (recv_data != NULL) {
 80071b0:	f8da 2000 	ldr.w	r2, [sl]
 80071b4:	b1aa      	cbz	r2, 80071e2 <tcp_input+0x7ee>
          if (pcb->flags & TF_RXCLOSED) {
 80071b6:	7ea3      	ldrb	r3, [r4, #26]
 80071b8:	f013 0310 	ands.w	r3, r3, #16
 80071bc:	d003      	beq.n	80071c6 <tcp_input+0x7d2>
            pbuf_free(recv_data);
 80071be:	4610      	mov	r0, r2
 80071c0:	f7fe f88a 	bl	80052d8 <pbuf_free>
 80071c4:	e6d8      	b.n	8006f78 <tcp_input+0x584>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80071c6:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80071ca:	b1d5      	cbz	r5, 8007202 <tcp_input+0x80e>
 80071cc:	4621      	mov	r1, r4
 80071ce:	6920      	ldr	r0, [r4, #16]
 80071d0:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 80071d2:	f110 0f0d 	cmn.w	r0, #13
 80071d6:	f43f ae13 	beq.w	8006e00 <tcp_input+0x40c>
          if (err != ERR_OK) {
 80071da:	b110      	cbz	r0, 80071e2 <tcp_input+0x7ee>
            pcb->refused_data = recv_data;
 80071dc:	f8da 3000 	ldr.w	r3, [sl]
 80071e0:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 80071e2:	7833      	ldrb	r3, [r6, #0]
 80071e4:	069a      	lsls	r2, r3, #26
 80071e6:	d505      	bpl.n	80071f4 <tcp_input+0x800>
          if (pcb->refused_data != NULL) {
 80071e8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80071ea:	b183      	cbz	r3, 800720e <tcp_input+0x81a>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80071ec:	7b5a      	ldrb	r2, [r3, #13]
 80071ee:	f042 0220 	orr.w	r2, r2, #32
 80071f2:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 80071f4:	2300      	movs	r3, #0
 80071f6:	4a20      	ldr	r2, [pc, #128]	; (8007278 <tcp_input+0x884>)
        tcp_output(pcb);
 80071f8:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 80071fa:	6013      	str	r3, [r2, #0]
        tcp_output(pcb);
 80071fc:	f000 fb28 	bl	8007850 <tcp_output>
 8007200:	e5fe      	b.n	8006e00 <tcp_input+0x40c>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007202:	462b      	mov	r3, r5
 8007204:	4621      	mov	r1, r4
 8007206:	4628      	mov	r0, r5
 8007208:	f7fe fd88 	bl	8005d1c <tcp_recv_null>
 800720c:	e7e1      	b.n	80071d2 <tcp_input+0x7de>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800720e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8007210:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007214:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 8007218:	bf1c      	itt	ne
 800721a:	3301      	addne	r3, #1
 800721c:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800721e:	2d00      	cmp	r5, #0
 8007220:	d0e8      	beq.n	80071f4 <tcp_input+0x800>
 8007222:	2300      	movs	r3, #0
 8007224:	4621      	mov	r1, r4
 8007226:	6920      	ldr	r0, [r4, #16]
 8007228:	461a      	mov	r2, r3
 800722a:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 800722c:	300d      	adds	r0, #13
 800722e:	d1e1      	bne.n	80071f4 <tcp_input+0x800>
 8007230:	e5e6      	b.n	8006e00 <tcp_input+0x40c>
      if (prev != NULL) {
 8007232:	b128      	cbz	r0, 8007240 <tcp_input+0x84c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007234:	68e2      	ldr	r2, [r4, #12]
 8007236:	60c2      	str	r2, [r0, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007238:	4810      	ldr	r0, [pc, #64]	; (800727c <tcp_input+0x888>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800723a:	f8c4 c00c 	str.w	ip, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800723e:	6004      	str	r4, [r0, #0]
  if (flags & TCP_RST) {
 8007240:	0758      	lsls	r0, r3, #29
 8007242:	f53f ad26 	bmi.w	8006c92 <tcp_input+0x29e>
  if (flags & TCP_ACK) {
 8007246:	06da      	lsls	r2, r3, #27
 8007248:	f57f ad77 	bpl.w	8006d3a <tcp_input+0x346>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800724c:	883b      	ldrh	r3, [r7, #0]
 800724e:	f8db 0000 	ldr.w	r0, [fp]
 8007252:	9301      	str	r3, [sp, #4]
 8007254:	f8cd e000 	str.w	lr, [sp]
 8007258:	4b01      	ldr	r3, [pc, #4]	; (8007260 <tcp_input+0x86c>)
 800725a:	4401      	add	r1, r0
 800725c:	1d1a      	adds	r2, r3, #4
 800725e:	e507      	b.n	8006c70 <tcp_input+0x27c>
 8007260:	20000408 	.word	0x20000408
 8007264:	20000368 	.word	0x20000368
 8007268:	20000344 	.word	0x20000344
 800726c:	2000b0b8 	.word	0x2000b0b8
 8007270:	2000b0b4 	.word	0x2000b0b4
 8007274:	2000b0c8 	.word	0x2000b0c8
 8007278:	2000b0cc 	.word	0x2000b0cc
 800727c:	2000b0c0 	.word	0x2000b0c0

08007280 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8007280:	4a02      	ldr	r2, [pc, #8]	; (800728c <tcp_trigger_input_pcb_close+0xc>)
 8007282:	7813      	ldrb	r3, [r2, #0]
 8007284:	f043 0310 	orr.w	r3, r3, #16
 8007288:	7013      	strb	r3, [r2, #0]
 800728a:	4770      	bx	lr
 800728c:	20000364 	.word	0x20000364

08007290 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8007290:	b570      	push	{r4, r5, r6, lr}
 8007292:	460d      	mov	r5, r1
 8007294:	461e      	mov	r6, r3
 8007296:	f89d 1018 	ldrb.w	r1, [sp, #24]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800729a:	4295      	cmp	r5, r2
{
 800729c:	9b04      	ldr	r3, [sp, #16]
  if (length < max_length) {
 800729e:	d21d      	bcs.n	80072dc <tcp_pbuf_prealloc+0x4c>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80072a0:	f89d 4014 	ldrb.w	r4, [sp, #20]
 80072a4:	07a4      	lsls	r4, r4, #30
 80072a6:	d407      	bmi.n	80072b8 <tcp_pbuf_prealloc+0x28>
 80072a8:	7e9c      	ldrb	r4, [r3, #26]
 80072aa:	0664      	lsls	r4, r4, #25
 80072ac:	d416      	bmi.n	80072dc <tcp_pbuf_prealloc+0x4c>
        (!(pcb->flags & TF_NODELAY) &&
 80072ae:	b119      	cbz	r1, 80072b8 <tcp_pbuf_prealloc+0x28>
         (!first_seg ||
 80072b0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80072b2:	b909      	cbnz	r1, 80072b8 <tcp_pbuf_prealloc+0x28>
          pcb->unsent != NULL ||
 80072b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072b6:	b18b      	cbz	r3, 80072dc <tcp_pbuf_prealloc+0x4c>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80072b8:	f205 241b 	addw	r4, r5, #539	; 0x21b
 80072bc:	f024 0103 	bic.w	r1, r4, #3
 80072c0:	428a      	cmp	r2, r1
 80072c2:	bf28      	it	cs
 80072c4:	460a      	movcs	r2, r1
 80072c6:	b291      	uxth	r1, r2
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80072c8:	2200      	movs	r2, #0
 80072ca:	f7fe f82d 	bl	8005328 <pbuf_alloc>
  if (p == NULL) {
 80072ce:	b120      	cbz	r0, 80072da <tcp_pbuf_prealloc+0x4a>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  *oversize = p->len - length;
 80072d0:	8942      	ldrh	r2, [r0, #10]
 80072d2:	1b52      	subs	r2, r2, r5
 80072d4:	8032      	strh	r2, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80072d6:	8105      	strh	r5, [r0, #8]
 80072d8:	8145      	strh	r5, [r0, #10]
  return p;
}
 80072da:	bd70      	pop	{r4, r5, r6, pc}
 80072dc:	4629      	mov	r1, r5
 80072de:	e7f3      	b.n	80072c8 <tcp_pbuf_prealloc+0x38>

080072e0 <tcp_create_segment>:
{
 80072e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072e4:	f89d 9020 	ldrb.w	r9, [sp, #32]
 80072e8:	4680      	mov	r8, r0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80072ea:	2003      	movs	r0, #3
{
 80072ec:	460f      	mov	r7, r1
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80072ee:	f019 0f01 	tst.w	r9, #1
{
 80072f2:	4616      	mov	r6, r2
 80072f4:	469a      	mov	sl, r3
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80072f6:	bf14      	ite	ne
 80072f8:	2504      	movne	r5, #4
 80072fa:	2500      	moveq	r5, #0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80072fc:	f7fd fec4 	bl	8005088 <memp_malloc>
 8007300:	4604      	mov	r4, r0
 8007302:	b928      	cbnz	r0, 8007310 <tcp_create_segment+0x30>
    pbuf_free(p);
 8007304:	4638      	mov	r0, r7
 8007306:	f7fd ffe7 	bl	80052d8 <pbuf_free>
}
 800730a:	4620      	mov	r0, r4
 800730c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->flags = optflags;
 8007310:	f880 900a 	strb.w	r9, [r0, #10]
  seg->next = NULL;
 8007314:	f04f 0900 	mov.w	r9, #0
  seg->len = p->tot_len - optlen;
 8007318:	893b      	ldrh	r3, [r7, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 800731a:	2114      	movs	r1, #20
  seg->p = p;
 800731c:	6047      	str	r7, [r0, #4]
  seg->len = p->tot_len - optlen;
 800731e:	1b5b      	subs	r3, r3, r5
  seg->next = NULL;
 8007320:	f8c0 9000 	str.w	r9, [r0]
  seg->len = p->tot_len - optlen;
 8007324:	8103      	strh	r3, [r0, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 8007326:	4638      	mov	r0, r7
 8007328:	f7fd ffcf 	bl	80052ca <pbuf_header>
 800732c:	4607      	mov	r7, r0
 800732e:	b120      	cbz	r0, 800733a <tcp_create_segment+0x5a>
    tcp_seg_free(seg);
 8007330:	4620      	mov	r0, r4
    return NULL;
 8007332:	464c      	mov	r4, r9
    tcp_seg_free(seg);
 8007334:	f7fe fa2e 	bl	8005794 <tcp_seg_free>
    return NULL;
 8007338:	e7e7      	b.n	800730a <tcp_create_segment+0x2a>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800733a:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800733c:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800733e:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8007342:	f8d3 9004 	ldr.w	r9, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8007346:	3505      	adds	r5, #5
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8007348:	f8c4 900c 	str.w	r9, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800734c:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8007350:	f7fc fe85 	bl	800405e <lwip_htons>
 8007354:	f8a9 0000 	strh.w	r0, [r9]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8007358:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800735c:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 8007360:	f7fc fe7d 	bl	800405e <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8007364:	f8d4 800c 	ldr.w	r8, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8007368:	f8a9 0002 	strh.w	r0, [r9, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800736c:	4650      	mov	r0, sl
 800736e:	f7fc fe79 	bl	8004064 <lwip_htonl>
 8007372:	f8c8 0004 	str.w	r0, [r8, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8007376:	b2a8      	uxth	r0, r5
 8007378:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800737c:	f7fc fe6f 	bl	800405e <lwip_htons>
  seg->tcphdr->urgp = 0;
 8007380:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8007382:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 8007386:	749f      	strb	r7, [r3, #18]
 8007388:	74df      	strb	r7, [r3, #19]
  return seg;
 800738a:	e7be      	b.n	800730a <tcp_create_segment+0x2a>

0800738c <tcp_output_alloc_header.constprop.0>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800738c:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800738e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8007390:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8007392:	4605      	mov	r5, r0
 8007394:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8007396:	2001      	movs	r0, #1
 8007398:	2200      	movs	r2, #0
 800739a:	f7fd ffc5 	bl	8005328 <pbuf_alloc>
  if (p != NULL) {
 800739e:	4606      	mov	r6, r0
 80073a0:	b1f8      	cbz	r0, 80073e2 <tcp_output_alloc_header.constprop.0+0x56>
    tcphdr = (struct tcp_hdr *)p->payload;
 80073a2:	6844      	ldr	r4, [r0, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 80073a4:	8ae8      	ldrh	r0, [r5, #22]
 80073a6:	f7fc fe5a 	bl	800405e <lwip_htons>
 80073aa:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80073ac:	8b28      	ldrh	r0, [r5, #24]
 80073ae:	f7fc fe56 	bl	800405e <lwip_htons>
    tcphdr->seqno = seqno_be;
 80073b2:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80073b4:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80073b6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80073b8:	f7fc fe54 	bl	8004064 <lwip_htonl>
 80073bc:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 80073be:	f245 0010 	movw	r0, #20496	; 0x5010
 80073c2:	f7fc fe4c 	bl	800405e <lwip_htons>
 80073c6:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80073c8:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 80073ca:	f7fc fe48 	bl	800405e <lwip_htons>
    tcphdr->chksum = 0;
 80073ce:	2300      	movs	r3, #0
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80073d0:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
    tcphdr->chksum = 0;
 80073d2:	7423      	strb	r3, [r4, #16]
 80073d4:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 80073d6:	74a3      	strb	r3, [r4, #18]
 80073d8:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80073da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80073dc:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80073de:	4413      	add	r3, r2
 80073e0:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 80073e2:	4630      	mov	r0, r6
 80073e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080073e6 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80073e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ea:	b08f      	sub	sp, #60	; 0x3c
 80073ec:	4692      	mov	sl, r2
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80073ee:	8e42      	ldrh	r2, [r0, #50]	; 0x32
{
 80073f0:	4604      	mov	r4, r0
 80073f2:	9307      	str	r3, [sp, #28]
  u16_t oversize = 0;
 80073f4:	2300      	movs	r3, #0
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80073f6:	9106      	str	r1, [sp, #24]
  u16_t oversize = 0;
 80073f8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80073fc:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007400:	085b      	lsrs	r3, r3, #1
 8007402:	4293      	cmp	r3, r2
 8007404:	bf28      	it	cs
 8007406:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 8007408:	2b00      	cmp	r3, #0
 800740a:	bf08      	it	eq
 800740c:	4613      	moveq	r3, r2
 800740e:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8007410:	2900      	cmp	r1, #0
 8007412:	f000 8168 	beq.w	80076e6 <tcp_write+0x300>
  if ((pcb->state != ESTABLISHED) &&
 8007416:	7d23      	ldrb	r3, [r4, #20]
 8007418:	2b07      	cmp	r3, #7
 800741a:	d003      	beq.n	8007424 <tcp_write+0x3e>
      (pcb->state != CLOSE_WAIT) &&
 800741c:	3b02      	subs	r3, #2
 800741e:	2b02      	cmp	r3, #2
 8007420:	f200 8164 	bhi.w	80076ec <tcp_write+0x306>
  } else if (len == 0) {
 8007424:	f1ba 0f00 	cmp.w	sl, #0
 8007428:	d010      	beq.n	800744c <tcp_write+0x66>
  if (len > pcb->snd_buf) {
 800742a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800742e:	4553      	cmp	r3, sl
 8007430:	d208      	bcs.n	8007444 <tcp_write+0x5e>
    pcb->flags |= TF_NAGLEMEMERR;
 8007432:	7ea3      	ldrb	r3, [r4, #26]
 8007434:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007438:	76a3      	strb	r3, [r4, #26]
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800743a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800743e:	b00f      	add	sp, #60	; 0x3c
 8007440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8007444:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8007448:	2b08      	cmp	r3, #8
 800744a:	d8f2      	bhi.n	8007432 <tcp_write+0x4c>
  queuelen = pcb->snd_queuelen;
 800744c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (pcb->unsent != NULL) {
 8007450:	f8d4 b068 	ldr.w	fp, [r4, #104]	; 0x68
  queuelen = pcb->snd_queuelen;
 8007454:	9305      	str	r3, [sp, #20]
  if (pcb->unsent != NULL) {
 8007456:	465f      	mov	r7, fp
 8007458:	f1bb 0f00 	cmp.w	fp, #0
 800745c:	d104      	bne.n	8007468 <tcp_write+0x82>
  u16_t oversize_used = 0;
 800745e:	465e      	mov	r6, fp
  u16_t pos = 0; /* position in 'arg' data */
 8007460:	46d8      	mov	r8, fp
  struct pbuf *concat_p = NULL;
 8007462:	465d      	mov	r5, fp
 8007464:	e055      	b.n	8007512 <tcp_write+0x12c>
 8007466:	464f      	mov	r7, r9
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8007468:	f8d7 9000 	ldr.w	r9, [r7]
 800746c:	f1b9 0f00 	cmp.w	r9, #0
 8007470:	d1f9      	bne.n	8007466 <tcp_write+0x80>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8007472:	7abb      	ldrb	r3, [r7, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8007474:	893d      	ldrh	r5, [r7, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8007476:	f013 0f01 	tst.w	r3, #1
    space = mss_local - (last_unsent->len + unsent_optlen);
 800747a:	9a04      	ldr	r2, [sp, #16]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800747c:	bf18      	it	ne
 800747e:	2304      	movne	r3, #4
    space = mss_local - (last_unsent->len + unsent_optlen);
 8007480:	eba2 0205 	sub.w	r2, r2, r5
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8007484:	bf08      	it	eq
 8007486:	2300      	moveq	r3, #0
    space = mss_local - (last_unsent->len + unsent_optlen);
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	b29a      	uxth	r2, r3
    oversize = pcb->unsent_oversize;
 800748c:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    if (oversize > 0) {
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 8135 	beq.w	8007700 <tcp_write+0x31a>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8007496:	4553      	cmp	r3, sl
 8007498:	461e      	mov	r6, r3
 800749a:	46bb      	mov	fp, r7
 800749c:	bf28      	it	cs
 800749e:	4656      	movcs	r6, sl
 80074a0:	4296      	cmp	r6, r2
 80074a2:	bfa8      	it	ge
 80074a4:	4616      	movge	r6, r2
      oversize -= oversize_used;
 80074a6:	1b9b      	subs	r3, r3, r6
      space -= oversize_used;
 80074a8:	1b92      	subs	r2, r2, r6
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80074aa:	45b2      	cmp	sl, r6
      oversize -= oversize_used;
 80074ac:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
      space -= oversize_used;
 80074b0:	b292      	uxth	r2, r2
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80074b2:	f240 811e 	bls.w	80076f2 <tcp_write+0x30c>
 80074b6:	2a00      	cmp	r2, #0
 80074b8:	d061      	beq.n	800757e <tcp_write+0x198>
 80074ba:	2d00      	cmp	r5, #0
 80074bc:	d062      	beq.n	8007584 <tcp_write+0x19e>
      u16_t seglen = space < len - pos ? space : len - pos;
 80074be:	ebaa 0b06 	sub.w	fp, sl, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80074c2:	9b07      	ldr	r3, [sp, #28]
      u16_t seglen = space < len - pos ? space : len - pos;
 80074c4:	4593      	cmp	fp, r2
 80074c6:	bfa8      	it	ge
 80074c8:	4693      	movge	fp, r2
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80074ca:	07db      	lsls	r3, r3, #31
      u16_t seglen = space < len - pos ? space : len - pos;
 80074cc:	fa1f f88b 	uxth.w	r8, fp
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80074d0:	d548      	bpl.n	8007564 <tcp_write+0x17e>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80074d2:	2301      	movs	r3, #1
 80074d4:	9400      	str	r4, [sp, #0]
 80074d6:	4641      	mov	r1, r8
 80074d8:	2004      	movs	r0, #4
 80074da:	9302      	str	r3, [sp, #8]
 80074dc:	9b07      	ldr	r3, [sp, #28]
 80074de:	9301      	str	r3, [sp, #4]
 80074e0:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 80074e4:	f7ff fed4 	bl	8007290 <tcp_pbuf_prealloc>
 80074e8:	4605      	mov	r5, r0
 80074ea:	2800      	cmp	r0, #0
 80074ec:	f000 80f9 	beq.w	80076e2 <tcp_write+0x2fc>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80074f0:	9b06      	ldr	r3, [sp, #24]
 80074f2:	4642      	mov	r2, r8
 80074f4:	6840      	ldr	r0, [r0, #4]
 80074f6:	1999      	adds	r1, r3, r6
 80074f8:	f003 ffdb 	bl	800b4b2 <memcpy>
      queuelen += pbuf_clen(concat_p);
 80074fc:	4628      	mov	r0, r5
      pos += seglen;
 80074fe:	44b0      	add	r8, r6
      queuelen += pbuf_clen(concat_p);
 8007500:	f7fd ffc7 	bl	8005492 <pbuf_clen>
 8007504:	9b05      	ldr	r3, [sp, #20]
      pos += seglen;
 8007506:	fa1f f888 	uxth.w	r8, r8
      queuelen += pbuf_clen(concat_p);
 800750a:	46bb      	mov	fp, r7
 800750c:	4403      	add	r3, r0
 800750e:	b29b      	uxth	r3, r3
 8007510:	9305      	str	r3, [sp, #20]
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8007512:	9b07      	ldr	r3, [sp, #28]
 8007514:	f04f 0900 	mov.w	r9, #0
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8007520:	9308      	str	r3, [sp, #32]
  while (pos < len) {
 8007522:	45d0      	cmp	r8, sl
 8007524:	d330      	bcc.n	8007588 <tcp_write+0x1a2>
  if (oversize_used > 0) {
 8007526:	b146      	cbz	r6, 800753a <tcp_write+0x154>
    for (p = last_unsent->p; p; p = p->next) {
 8007528:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800752c:	f1b8 0f00 	cmp.w	r8, #0
 8007530:	f040 809a 	bne.w	8007668 <tcp_write+0x282>
    last_unsent->len += oversize_used;
 8007534:	893b      	ldrh	r3, [r7, #8]
 8007536:	441e      	add	r6, r3
 8007538:	813e      	strh	r6, [r7, #8]
  pcb->unsent_oversize = oversize;
 800753a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800753e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if (concat_p != NULL) {
 8007542:	2d00      	cmp	r5, #0
 8007544:	f000 80a9 	beq.w	800769a <tcp_write+0x2b4>
    pbuf_cat(last_unsent->p, concat_p);
 8007548:	4629      	mov	r1, r5
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7fd ffae 	bl	80054ac <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8007550:	893b      	ldrh	r3, [r7, #8]
 8007552:	892a      	ldrh	r2, [r5, #8]
 8007554:	4413      	add	r3, r2
 8007556:	813b      	strh	r3, [r7, #8]
    last_unsent->next = queue;
 8007558:	f8c7 9000 	str.w	r9, [r7]
 800755c:	e0a2      	b.n	80076a4 <tcp_write+0x2be>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800755e:	464e      	mov	r6, r9
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8007560:	46cb      	mov	fp, r9
 8007562:	e7a8      	b.n	80074b6 <tcp_write+0xd0>
        if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8007564:	2201      	movs	r2, #1
 8007566:	4641      	mov	r1, r8
 8007568:	2004      	movs	r0, #4
 800756a:	f7fd fedd 	bl	8005328 <pbuf_alloc>
 800756e:	4605      	mov	r5, r0
 8007570:	2800      	cmp	r0, #0
 8007572:	f000 80b6 	beq.w	80076e2 <tcp_write+0x2fc>
        ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8007576:	9b06      	ldr	r3, [sp, #24]
 8007578:	4433      	add	r3, r6
 800757a:	6043      	str	r3, [r0, #4]
 800757c:	e7be      	b.n	80074fc <tcp_write+0x116>
 800757e:	46b0      	mov	r8, r6
  struct pbuf *concat_p = NULL;
 8007580:	4615      	mov	r5, r2
 8007582:	e7c6      	b.n	8007512 <tcp_write+0x12c>
 8007584:	46b0      	mov	r8, r6
 8007586:	e7c4      	b.n	8007512 <tcp_write+0x12c>
    u16_t left = len - pos;
 8007588:	ebaa 0308 	sub.w	r3, sl, r8
    u16_t seglen = left > max_len ? max_len : left;
 800758c:	9a04      	ldr	r2, [sp, #16]
 800758e:	b29b      	uxth	r3, r3
 8007590:	4293      	cmp	r3, r2
 8007592:	bf28      	it	cs
 8007594:	4613      	movcs	r3, r2
 8007596:	b29b      	uxth	r3, r3
 8007598:	9309      	str	r3, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800759a:	9b08      	ldr	r3, [sp, #32]
 800759c:	b303      	cbz	r3, 80075e0 <tcp_write+0x1fa>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800759e:	fab9 f389 	clz	r3, r9
 80075a2:	9400      	str	r4, [sp, #0]
 80075a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075a6:	2000      	movs	r0, #0
 80075a8:	095b      	lsrs	r3, r3, #5
 80075aa:	9302      	str	r3, [sp, #8]
 80075ac:	9b07      	ldr	r3, [sp, #28]
 80075ae:	9301      	str	r3, [sp, #4]
 80075b0:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 80075b4:	f7ff fe6c 	bl	8007290 <tcp_pbuf_prealloc>
 80075b8:	4683      	mov	fp, r0
 80075ba:	b330      	cbz	r0, 800760a <tcp_write+0x224>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 80075bc:	9b06      	ldr	r3, [sp, #24]
 80075be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075c0:	eb03 0108 	add.w	r1, r3, r8
 80075c4:	6840      	ldr	r0, [r0, #4]
 80075c6:	f003 ff74 	bl	800b4b2 <memcpy>
    queuelen += pbuf_clen(p);
 80075ca:	4658      	mov	r0, fp
 80075cc:	f7fd ff61 	bl	8005492 <pbuf_clen>
 80075d0:	9b05      	ldr	r3, [sp, #20]
 80075d2:	4403      	add	r3, r0
 80075d4:	b29b      	uxth	r3, r3
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80075d6:	2b09      	cmp	r3, #9
    queuelen += pbuf_clen(p);
 80075d8:	9305      	str	r3, [sp, #20]
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80075da:	d92a      	bls.n	8007632 <tcp_write+0x24c>
      pbuf_free(p);
 80075dc:	4658      	mov	r0, fp
 80075de:	e012      	b.n	8007606 <tcp_write+0x220>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80075e0:	2201      	movs	r2, #1
 80075e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075e4:	9808      	ldr	r0, [sp, #32]
 80075e6:	f7fd fe9f 	bl	8005328 <pbuf_alloc>
 80075ea:	b170      	cbz	r0, 800760a <tcp_write+0x224>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 80075ec:	9a06      	ldr	r2, [sp, #24]
 80075ee:	900b      	str	r0, [sp, #44]	; 0x2c
 80075f0:	4442      	add	r2, r8
 80075f2:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80075f4:	9a08      	ldr	r2, [sp, #32]
 80075f6:	4611      	mov	r1, r2
 80075f8:	4610      	mov	r0, r2
 80075fa:	f7fd fe95 	bl	8005328 <pbuf_alloc>
 80075fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007600:	4683      	mov	fp, r0
 8007602:	b990      	cbnz	r0, 800762a <tcp_write+0x244>
        pbuf_free(p2);
 8007604:	4618      	mov	r0, r3
      pbuf_free(p);
 8007606:	f7fd fe67 	bl	80052d8 <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 800760a:	7ea3      	ldrb	r3, [r4, #26]
 800760c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007610:	76a3      	strb	r3, [r4, #26]
  if (concat_p != NULL) {
 8007612:	b115      	cbz	r5, 800761a <tcp_write+0x234>
    pbuf_free(concat_p);
 8007614:	4628      	mov	r0, r5
 8007616:	f7fd fe5f 	bl	80052d8 <pbuf_free>
  if (queue != NULL) {
 800761a:	f1b9 0f00 	cmp.w	r9, #0
 800761e:	f43f af0c 	beq.w	800743a <tcp_write+0x54>
    tcp_segs_free(queue);
 8007622:	4648      	mov	r0, r9
 8007624:	f7fe f8c4 	bl	80057b0 <tcp_segs_free>
 8007628:	e707      	b.n	800743a <tcp_write+0x54>
      pbuf_cat(p/*header*/, p2/*data*/);
 800762a:	4619      	mov	r1, r3
 800762c:	f7fd ff3e 	bl	80054ac <pbuf_cat>
 8007630:	e7cb      	b.n	80075ca <tcp_write+0x1e4>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8007632:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007634:	2200      	movs	r2, #0
 8007636:	4659      	mov	r1, fp
 8007638:	4620      	mov	r0, r4
 800763a:	9200      	str	r2, [sp, #0]
 800763c:	4443      	add	r3, r8
 800763e:	f7ff fe4f 	bl	80072e0 <tcp_create_segment>
 8007642:	4683      	mov	fp, r0
 8007644:	2800      	cmp	r0, #0
 8007646:	d0e0      	beq.n	800760a <tcp_write+0x224>
    if (queue == NULL) {
 8007648:	f1b9 0f00 	cmp.w	r9, #0
 800764c:	d008      	beq.n	8007660 <tcp_write+0x27a>
      prev_seg->next = seg;
 800764e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007650:	6018      	str	r0, [r3, #0]
    pos += seglen;
 8007652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007654:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007658:	4498      	add	r8, r3
 800765a:	fa1f f888 	uxth.w	r8, r8
 800765e:	e760      	b.n	8007522 <tcp_write+0x13c>
 8007660:	4681      	mov	r9, r0
 8007662:	e7f6      	b.n	8007652 <tcp_write+0x26c>
  struct pbuf *concat_p = NULL;
 8007664:	464d      	mov	r5, r9
 8007666:	e75f      	b.n	8007528 <tcp_write+0x142>
      p->tot_len += oversize_used;
 8007668:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800766c:	4433      	add	r3, r6
 800766e:	f8a8 3008 	strh.w	r3, [r8, #8]
      if (p->next == NULL) {
 8007672:	f8d8 3000 	ldr.w	r3, [r8]
 8007676:	b96b      	cbnz	r3, 8007694 <tcp_write+0x2ae>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8007678:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800767c:	4632      	mov	r2, r6
 800767e:	f8b8 000a 	ldrh.w	r0, [r8, #10]
 8007682:	9906      	ldr	r1, [sp, #24]
 8007684:	4418      	add	r0, r3
 8007686:	f003 ff14 	bl	800b4b2 <memcpy>
        p->len += oversize_used;
 800768a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800768e:	4433      	add	r3, r6
 8007690:	f8a8 300a 	strh.w	r3, [r8, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8007694:	f8d8 8000 	ldr.w	r8, [r8]
 8007698:	e748      	b.n	800752c <tcp_write+0x146>
  if (last_unsent == NULL) {
 800769a:	2f00      	cmp	r7, #0
 800769c:	f47f af5c 	bne.w	8007558 <tcp_write+0x172>
    pcb->unsent = queue;
 80076a0:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
  pcb->snd_lbb += len;
 80076a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076a6:	4453      	add	r3, sl
 80076a8:	65a3      	str	r3, [r4, #88]	; 0x58
  pcb->snd_buf -= len;
 80076aa:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80076ae:	eba3 0a0a 	sub.w	sl, r3, sl
  pcb->snd_queuelen = queuelen;
 80076b2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  pcb->snd_buf -= len;
 80076b6:	f8a4 a060 	strh.w	sl, [r4, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 80076ba:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 80076be:	f1bb 0f00 	cmp.w	fp, #0
 80076c2:	d00c      	beq.n	80076de <tcp_write+0x2f8>
 80076c4:	f8db 400c 	ldr.w	r4, [fp, #12]
 80076c8:	b14c      	cbz	r4, 80076de <tcp_write+0x2f8>
 80076ca:	9b07      	ldr	r3, [sp, #28]
 80076cc:	f013 0b02 	ands.w	fp, r3, #2
 80076d0:	d105      	bne.n	80076de <tcp_write+0x2f8>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80076d2:	89a5      	ldrh	r5, [r4, #12]
 80076d4:	2008      	movs	r0, #8
 80076d6:	f7fc fcc2 	bl	800405e <lwip_htons>
 80076da:	4328      	orrs	r0, r5
 80076dc:	81a0      	strh	r0, [r4, #12]
  return ERR_OK;
 80076de:	2000      	movs	r0, #0
 80076e0:	e6ad      	b.n	800743e <tcp_write+0x58>
  struct pbuf *concat_p = NULL;
 80076e2:	2500      	movs	r5, #0
 80076e4:	e791      	b.n	800760a <tcp_write+0x224>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80076e6:	f06f 000f 	mvn.w	r0, #15
 80076ea:	e6a8      	b.n	800743e <tcp_write+0x58>
    return ERR_CONN;
 80076ec:	f06f 000a 	mvn.w	r0, #10
 80076f0:	e6a5      	b.n	800743e <tcp_write+0x58>
  if (oversize_used > 0) {
 80076f2:	2e00      	cmp	r6, #0
 80076f4:	d1b6      	bne.n	8007664 <tcp_write+0x27e>
  pcb->unsent_oversize = oversize;
 80076f6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80076fa:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 80076fe:	e72b      	b.n	8007558 <tcp_write+0x172>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8007700:	f1ba 0f00 	cmp.w	sl, #0
 8007704:	f47f af2b 	bne.w	800755e <tcp_write+0x178>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8007708:	46d3      	mov	fp, sl
 800770a:	e7f4      	b.n	80076f6 <tcp_write+0x310>

0800770c <tcp_enqueue_flags>:

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800770c:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 8007710:	2b08      	cmp	r3, #8
{
 8007712:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007714:	4604      	mov	r4, r0
 8007716:	460d      	mov	r5, r1
 8007718:	f001 0603 	and.w	r6, r1, #3
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800771c:	d909      	bls.n	8007732 <tcp_enqueue_flags+0x26>
 800771e:	07ca      	lsls	r2, r1, #31
 8007720:	d407      	bmi.n	8007732 <tcp_enqueue_flags+0x26>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
 8007722:	7ea3      	ldrb	r3, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8007724:	f04f 30ff 	mov.w	r0, #4294967295
    pcb->flags |= TF_NAGLEMEMERR;
 8007728:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800772c:	76a3      	strb	r3, [r4, #26]
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 800772e:	b003      	add	sp, #12
 8007730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007732:	f005 0302 	and.w	r3, r5, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8007736:	2200      	movs	r2, #0
  if (flags & TCP_SYN) {
 8007738:	2b00      	cmp	r3, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800773a:	4610      	mov	r0, r2
 800773c:	bf15      	itete	ne
 800773e:	2104      	movne	r1, #4
 8007740:	4611      	moveq	r1, r2
  u8_t optflags = 0;
 8007742:	2701      	movne	r7, #1
 8007744:	2700      	moveq	r7, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8007746:	f7fd fdef 	bl	8005328 <pbuf_alloc>
 800774a:	4601      	mov	r1, r0
 800774c:	2800      	cmp	r0, #0
 800774e:	d0e8      	beq.n	8007722 <tcp_enqueue_flags+0x16>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8007750:	9700      	str	r7, [sp, #0]
 8007752:	462a      	mov	r2, r5
 8007754:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007756:	4620      	mov	r0, r4
 8007758:	f7ff fdc2 	bl	80072e0 <tcp_create_segment>
 800775c:	2800      	cmp	r0, #0
 800775e:	d0e0      	beq.n	8007722 <tcp_enqueue_flags+0x16>
  if (pcb->unsent == NULL) {
 8007760:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007762:	b9c3      	cbnz	r3, 8007796 <tcp_enqueue_flags+0x8a>
    pcb->unsent = seg;
 8007764:	66a0      	str	r0, [r4, #104]	; 0x68
  pcb->unsent_oversize = 0;
 8007766:	2300      	movs	r3, #0
 8007768:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800776c:	b116      	cbz	r6, 8007774 <tcp_enqueue_flags+0x68>
    pcb->snd_lbb++;
 800776e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007770:	3301      	adds	r3, #1
 8007772:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 8007774:	07eb      	lsls	r3, r5, #31
    pcb->flags |= TF_FIN;
 8007776:	bf42      	ittt	mi
 8007778:	7ea3      	ldrbmi	r3, [r4, #26]
 800777a:	f043 0320 	orrmi.w	r3, r3, #32
 800777e:	76a3      	strbmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8007780:	6840      	ldr	r0, [r0, #4]
 8007782:	f7fd fe86 	bl	8005492 <pbuf_clen>
 8007786:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800778a:	4418      	add	r0, r3
 800778c:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  return ERR_OK;
 8007790:	2000      	movs	r0, #0
 8007792:	e7cc      	b.n	800772e <tcp_enqueue_flags+0x22>
 8007794:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	2a00      	cmp	r2, #0
 800779a:	d1fb      	bne.n	8007794 <tcp_enqueue_flags+0x88>
    useg->next = seg;
 800779c:	6018      	str	r0, [r3, #0]
 800779e:	e7e2      	b.n	8007766 <tcp_enqueue_flags+0x5a>

080077a0 <tcp_send_fin>:
{
 80077a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 80077a2:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 80077a4:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 80077a6:	b934      	cbnz	r4, 80077b6 <tcp_send_fin+0x16>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80077a8:	4628      	mov	r0, r5
 80077aa:	2101      	movs	r1, #1
}
 80077ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80077b0:	f7ff bfac 	b.w	800770c <tcp_enqueue_flags>
 80077b4:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1fb      	bne.n	80077b4 <tcp_send_fin+0x14>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80077bc:	68e3      	ldr	r3, [r4, #12]
 80077be:	8998      	ldrh	r0, [r3, #12]
 80077c0:	f7fc fc4d 	bl	800405e <lwip_htons>
 80077c4:	f010 0707 	ands.w	r7, r0, #7
 80077c8:	d1ee      	bne.n	80077a8 <tcp_send_fin+0x8>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80077ca:	68e6      	ldr	r6, [r4, #12]
 80077cc:	2001      	movs	r0, #1
 80077ce:	89b4      	ldrh	r4, [r6, #12]
 80077d0:	f7fc fc45 	bl	800405e <lwip_htons>
 80077d4:	4320      	orrs	r0, r4
 80077d6:	81b0      	strh	r0, [r6, #12]
}
 80077d8:	4638      	mov	r0, r7
      pcb->flags |= TF_FIN;
 80077da:	7eab      	ldrb	r3, [r5, #26]
 80077dc:	f043 0320 	orr.w	r3, r3, #32
 80077e0:	76ab      	strb	r3, [r5, #26]
}
 80077e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080077e4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80077e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80077e6:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80077e8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80077ea:	f7fc fc3b 	bl	8004064 <lwip_htonl>
 80077ee:	2100      	movs	r1, #0
 80077f0:	4602      	mov	r2, r0
 80077f2:	4620      	mov	r0, r4
 80077f4:	f7ff fdca 	bl	800738c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80077f8:	4606      	mov	r6, r0
 80077fa:	b940      	cbnz	r0, 800780e <tcp_send_empty_ack+0x2a>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80077fc:	7ea3      	ldrb	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80077fe:	f06f 0501 	mvn.w	r5, #1
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8007802:	f043 0303 	orr.w	r3, r3, #3
 8007806:	76a3      	strb	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 8007808:	4628      	mov	r0, r5
 800780a:	b004      	add	sp, #16
 800780c:	bd70      	pop	{r4, r5, r6, pc}
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800780e:	1d25      	adds	r5, r4, #4
 8007810:	4628      	mov	r0, r5
 8007812:	f7fc ff03 	bl	800461c <ip4_route>
  if (netif == NULL) {
 8007816:	b1a0      	cbz	r0, 8007842 <tcp_send_empty_ack+0x5e>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8007818:	2206      	movs	r2, #6
 800781a:	9002      	str	r0, [sp, #8]
 800781c:	7aa3      	ldrb	r3, [r4, #10]
 800781e:	4621      	mov	r1, r4
 8007820:	9201      	str	r2, [sp, #4]
 8007822:	4630      	mov	r0, r6
 8007824:	7a62      	ldrb	r2, [r4, #9]
 8007826:	9200      	str	r2, [sp, #0]
 8007828:	462a      	mov	r2, r5
 800782a:	f7fd f829 	bl	8004880 <ip4_output_if>
 800782e:	4605      	mov	r5, r0
  pbuf_free(p);
 8007830:	4630      	mov	r0, r6
 8007832:	f7fd fd51 	bl	80052d8 <pbuf_free>
 8007836:	7ea3      	ldrb	r3, [r4, #26]
  if (err != ERR_OK) {
 8007838:	b135      	cbz	r5, 8007848 <tcp_send_empty_ack+0x64>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800783a:	f043 0303 	orr.w	r3, r3, #3
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800783e:	76a3      	strb	r3, [r4, #26]
 8007840:	e7e2      	b.n	8007808 <tcp_send_empty_ack+0x24>
    err = ERR_RTE;
 8007842:	f06f 0503 	mvn.w	r5, #3
 8007846:	e7f3      	b.n	8007830 <tcp_send_empty_ack+0x4c>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8007848:	f023 0303 	bic.w	r3, r3, #3
 800784c:	e7f7      	b.n	800783e <tcp_send_empty_ack+0x5a>
	...

08007850 <tcp_output>:

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8007850:	4b9e      	ldr	r3, [pc, #632]	; (8007acc <tcp_output+0x27c>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4298      	cmp	r0, r3
{
 8007856:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785a:	4604      	mov	r4, r0
 800785c:	b087      	sub	sp, #28
  if (tcp_input_pcb == pcb) {
 800785e:	d038      	beq.n	80078d2 <tcp_output+0x82>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8007860:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
 8007864:	f8b0 705c 	ldrh.w	r7, [r0, #92]	; 0x5c

  seg = pcb->unsent;
 8007868:	6e85      	ldr	r5, [r0, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800786a:	429f      	cmp	r7, r3
 800786c:	bf28      	it	cs
 800786e:	461f      	movcs	r7, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8007870:	7e83      	ldrb	r3, [r0, #26]
 8007872:	079a      	lsls	r2, r3, #30
 8007874:	d510      	bpl.n	8007898 <tcp_output+0x48>
 8007876:	b92d      	cbnz	r5, 8007884 <tcp_output+0x34>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 8007878:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 800787a:	b007      	add	sp, #28
 800787c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 8007880:	f7ff bfb0 	b.w	80077e4 <tcp_send_empty_ack>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8007884:	68eb      	ldr	r3, [r5, #12]
 8007886:	6858      	ldr	r0, [r3, #4]
 8007888:	f7fc fbec 	bl	8004064 <lwip_htonl>
 800788c:	892b      	ldrh	r3, [r5, #8]
 800788e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007890:	1a9b      	subs	r3, r3, r2
 8007892:	4418      	add	r0, r3
     (seg == NULL ||
 8007894:	4287      	cmp	r7, r0
 8007896:	d3ef      	bcc.n	8007878 <tcp_output+0x28>
  useg = pcb->unacked;
 8007898:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  if (useg != NULL) {
 800789a:	b9ee      	cbnz	r6, 80078d8 <tcp_output+0x88>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800789c:	f104 0904 	add.w	r9, r4, #4
 80078a0:	4648      	mov	r0, r9
 80078a2:	f7fc febb 	bl	800461c <ip4_route>
  if (netif == NULL) {
 80078a6:	4682      	mov	sl, r0
 80078a8:	2800      	cmp	r0, #0
 80078aa:	f000 8108 	beq.w	8007abe <tcp_output+0x26e>
  if (ip_addr_isany(&pcb->local_ip)) {
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	b90b      	cbnz	r3, 80078b6 <tcp_output+0x66>
    ip_addr_copy(pcb->local_ip, *local_ip);
 80078b2:	6843      	ldr	r3, [r0, #4]
 80078b4:	6023      	str	r3, [r4, #0]
  seg->p->len -= len;
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;

  seg->tcphdr->chksum = 0;
 80078b6:	f04f 0800 	mov.w	r8, #0
    pcb->rttest = tcp_ticks;
 80078ba:	f8df b214 	ldr.w	fp, [pc, #532]	; 8007ad0 <tcp_output+0x280>
  while (seg != NULL &&
 80078be:	2d00      	cmp	r5, #0
 80078c0:	d170      	bne.n	80079a4 <tcp_output+0x154>
  if (pcb->unsent == NULL) {
 80078c2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80078c4:	b90b      	cbnz	r3, 80078ca <tcp_output+0x7a>
    pcb->unsent_oversize = 0;
 80078c6:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->flags &= ~TF_NAGLEMEMERR;
 80078ca:	7ea3      	ldrb	r3, [r4, #26]
 80078cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078d0:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 80078d2:	2000      	movs	r0, #0
 80078d4:	e0f0      	b.n	8007ab8 <tcp_output+0x268>
 80078d6:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 80078d8:	6833      	ldr	r3, [r6, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1fb      	bne.n	80078d6 <tcp_output+0x86>
 80078de:	e7dd      	b.n	800789c <tcp_output+0x4c>
    pcb->unsent = seg->next;
 80078e0:	682b      	ldr	r3, [r5, #0]
 80078e2:	66a3      	str	r3, [r4, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 80078e4:	7d23      	ldrb	r3, [r4, #20]
 80078e6:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80078e8:	bf1e      	ittt	ne
 80078ea:	7ea3      	ldrbne	r3, [r4, #26]
 80078ec:	f023 0303 	bicne.w	r3, r3, #3
 80078f0:	76a3      	strbne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80078f2:	68eb      	ldr	r3, [r5, #12]
 80078f4:	6858      	ldr	r0, [r3, #4]
 80078f6:	f7fc fbb5 	bl	8004064 <lwip_htonl>
 80078fa:	892a      	ldrh	r2, [r5, #8]
 80078fc:	68e9      	ldr	r1, [r5, #12]
 80078fe:	9204      	str	r2, [sp, #16]
 8007900:	9005      	str	r0, [sp, #20]
 8007902:	8988      	ldrh	r0, [r1, #12]
 8007904:	f7fc fbab 	bl	800405e <lwip_htons>
 8007908:	9a04      	ldr	r2, [sp, #16]
 800790a:	f010 0003 	ands.w	r0, r0, #3
 800790e:	9b05      	ldr	r3, [sp, #20]
 8007910:	bf18      	it	ne
 8007912:	2001      	movne	r0, #1
 8007914:	4413      	add	r3, r2
    if (TCP_TCPLEN(seg) > 0) {
 8007916:	68ea      	ldr	r2, [r5, #12]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8007918:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800791a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800791c:	1a1b      	subs	r3, r3, r0
 800791e:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 8007920:	892b      	ldrh	r3, [r5, #8]
      pcb->snd_nxt = snd_nxt;
 8007922:	bfb8      	it	lt
 8007924:	64e0      	strlt	r0, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 8007926:	9304      	str	r3, [sp, #16]
 8007928:	8990      	ldrh	r0, [r2, #12]
 800792a:	f7fc fb98 	bl	800405e <lwip_htons>
 800792e:	f010 0003 	ands.w	r0, r0, #3
 8007932:	9b04      	ldr	r3, [sp, #16]
 8007934:	bf18      	it	ne
 8007936:	2001      	movne	r0, #1
 8007938:	42d8      	cmn	r0, r3
 800793a:	d02f      	beq.n	800799c <tcp_output+0x14c>
      if (pcb->unacked == NULL) {
 800793c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
      seg->next = NULL;
 800793e:	f8c5 8000 	str.w	r8, [r5]
      if (pcb->unacked == NULL) {
 8007942:	b913      	cbnz	r3, 800794a <tcp_output+0xfa>
        pcb->unacked = seg;
 8007944:	66e5      	str	r5, [r4, #108]	; 0x6c
          useg->next = seg;
 8007946:	462e      	mov	r6, r5
 8007948:	e013      	b.n	8007972 <tcp_output+0x122>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800794a:	68eb      	ldr	r3, [r5, #12]
 800794c:	6858      	ldr	r0, [r3, #4]
 800794e:	f7fc fb89 	bl	8004064 <lwip_htonl>
 8007952:	68f2      	ldr	r2, [r6, #12]
 8007954:	9004      	str	r0, [sp, #16]
 8007956:	6850      	ldr	r0, [r2, #4]
 8007958:	f7fc fb84 	bl	8004064 <lwip_htonl>
 800795c:	9b04      	ldr	r3, [sp, #16]
 800795e:	1a18      	subs	r0, r3, r0
 8007960:	2800      	cmp	r0, #0
 8007962:	da19      	bge.n	8007998 <tcp_output+0x148>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8007964:	f104 036c 	add.w	r3, r4, #108	; 0x6c
          while (*cur_seg &&
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	b922      	cbnz	r2, 8007976 <tcp_output+0x126>
          seg->next = (*cur_seg);
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 8007970:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 8007972:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8007974:	e7a3      	b.n	80078be <tcp_output+0x6e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8007976:	68d2      	ldr	r2, [r2, #12]
 8007978:	9305      	str	r3, [sp, #20]
 800797a:	6850      	ldr	r0, [r2, #4]
 800797c:	f7fc fb72 	bl	8004064 <lwip_htonl>
 8007980:	68e9      	ldr	r1, [r5, #12]
 8007982:	9004      	str	r0, [sp, #16]
 8007984:	6848      	ldr	r0, [r1, #4]
 8007986:	f7fc fb6d 	bl	8004064 <lwip_htonl>
 800798a:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 800798c:	9b05      	ldr	r3, [sp, #20]
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800798e:	1a10      	subs	r0, r2, r0
          while (*cur_seg &&
 8007990:	2800      	cmp	r0, #0
 8007992:	daeb      	bge.n	800796c <tcp_output+0x11c>
              cur_seg = &((*cur_seg)->next );
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	e7e7      	b.n	8007968 <tcp_output+0x118>
          useg->next = seg;
 8007998:	6035      	str	r5, [r6, #0]
 800799a:	e7d4      	b.n	8007946 <tcp_output+0xf6>
      tcp_seg_free(seg);
 800799c:	4628      	mov	r0, r5
 800799e:	f7fd fef9 	bl	8005794 <tcp_seg_free>
 80079a2:	e7e6      	b.n	8007972 <tcp_output+0x122>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80079a4:	68eb      	ldr	r3, [r5, #12]
 80079a6:	6858      	ldr	r0, [r3, #4]
 80079a8:	f7fc fb5c 	bl	8004064 <lwip_htonl>
 80079ac:	892b      	ldrh	r3, [r5, #8]
 80079ae:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80079b0:	1a9b      	subs	r3, r3, r2
 80079b2:	4418      	add	r0, r3
  while (seg != NULL &&
 80079b4:	4287      	cmp	r7, r0
 80079b6:	d384      	bcc.n	80078c2 <tcp_output+0x72>
    LWIP_ASSERT("RST not expected here!",
 80079b8:	68eb      	ldr	r3, [r5, #12]
 80079ba:	8998      	ldrh	r0, [r3, #12]
 80079bc:	f7fc fb4f 	bl	800405e <lwip_htons>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80079c0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80079c2:	b193      	cbz	r3, 80079ea <tcp_output+0x19a>
 80079c4:	7ea2      	ldrb	r2, [r4, #26]
 80079c6:	f012 0f44 	tst.w	r2, #68	; 0x44
 80079ca:	d10e      	bne.n	80079ea <tcp_output+0x19a>
 80079cc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80079ce:	b12b      	cbz	r3, 80079dc <tcp_output+0x18c>
 80079d0:	6819      	ldr	r1, [r3, #0]
 80079d2:	b951      	cbnz	r1, 80079ea <tcp_output+0x19a>
 80079d4:	8919      	ldrh	r1, [r3, #8]
 80079d6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80079d8:	4299      	cmp	r1, r3
 80079da:	d206      	bcs.n	80079ea <tcp_output+0x19a>
 80079dc:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80079e0:	b11b      	cbz	r3, 80079ea <tcp_output+0x19a>
 80079e2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80079e6:	2b08      	cmp	r3, #8
 80079e8:	d96c      	bls.n	8007ac4 <tcp_output+0x274>
    if (pcb->state != SYN_SENT) {
 80079ea:	7d23      	ldrb	r3, [r4, #20]
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d00a      	beq.n	8007a06 <tcp_output+0x1b6>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80079f0:	68ea      	ldr	r2, [r5, #12]
 80079f2:	2010      	movs	r0, #16
 80079f4:	8993      	ldrh	r3, [r2, #12]
 80079f6:	9205      	str	r2, [sp, #20]
 80079f8:	9304      	str	r3, [sp, #16]
 80079fa:	f7fc fb30 	bl	800405e <lwip_htons>
 80079fe:	9b04      	ldr	r3, [sp, #16]
 8007a00:	9a05      	ldr	r2, [sp, #20]
 8007a02:	4318      	orrs	r0, r3
 8007a04:	8190      	strh	r0, [r2, #12]
  if (seg->p->ref != 1) {
 8007a06:	686b      	ldr	r3, [r5, #4]
 8007a08:	89db      	ldrh	r3, [r3, #14]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	f47f af68 	bne.w	80078e0 <tcp_output+0x90>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8007a10:	68eb      	ldr	r3, [r5, #12]
 8007a12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007a14:	9304      	str	r3, [sp, #16]
 8007a16:	f7fc fb25 	bl	8004064 <lwip_htonl>
 8007a1a:	9b04      	ldr	r3, [sp, #16]
 8007a1c:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8007a1e:	68eb      	ldr	r3, [r5, #12]
 8007a20:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8007a22:	9304      	str	r3, [sp, #16]
 8007a24:	f7fc fb1b 	bl	800405e <lwip_htons>
 8007a28:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8007a2a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8007a2c:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8007a2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a30:	4413      	add	r3, r2
 8007a32:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8007a34:	7aab      	ldrb	r3, [r5, #10]
 8007a36:	07db      	lsls	r3, r3, #31
 8007a38:	d50c      	bpl.n	8007a54 <tcp_output+0x204>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8007a3a:	68eb      	ldr	r3, [r5, #12]
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8007a3c:	4649      	mov	r1, r9
 8007a3e:	f44f 7006 	mov.w	r0, #536	; 0x218
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8007a42:	9304      	str	r3, [sp, #16]
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8007a44:	f7fe fb31 	bl	80060aa <tcp_eff_send_mss_impl>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8007a48:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8007a4c:	f7fc fb0a 	bl	8004064 <lwip_htonl>
 8007a50:	9b04      	ldr	r3, [sp, #16]
 8007a52:	6158      	str	r0, [r3, #20]
  if (pcb->rtime < 0) {
 8007a54:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8007a58:	2b00      	cmp	r3, #0
  if (pcb->rttest == 0) {
 8007a5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    pcb->rtime = 0;
 8007a5c:	bfb8      	it	lt
 8007a5e:	f8a4 8030 	strhlt.w	r8, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 8007a62:	b93b      	cbnz	r3, 8007a74 <tcp_output+0x224>
    pcb->rttest = tcp_ticks;
 8007a64:	f8db 3000 	ldr.w	r3, [fp]
 8007a68:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8007a6a:	68eb      	ldr	r3, [r5, #12]
 8007a6c:	6858      	ldr	r0, [r3, #4]
 8007a6e:	f7fc faf9 	bl	8004064 <lwip_htonl>
 8007a72:	63a0      	str	r0, [r4, #56]	; 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8007a74:	6868      	ldr	r0, [r5, #4]
 8007a76:	68ea      	ldr	r2, [r5, #12]
 8007a78:	6843      	ldr	r3, [r0, #4]
  seg->p->len -= len;
 8007a7a:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8007a7c:	1ad3      	subs	r3, r2, r3
  seg->p->payload = seg->tcphdr;
 8007a7e:	6042      	str	r2, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8007a80:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 8007a82:	1ac9      	subs	r1, r1, r3
 8007a84:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 8007a86:	8901      	ldrh	r1, [r0, #8]
 8007a88:	1acb      	subs	r3, r1, r3
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8007a8a:	4621      	mov	r1, r4
  seg->p->tot_len -= len;
 8007a8c:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 8007a8e:	f882 8010 	strb.w	r8, [r2, #16]
 8007a92:	f882 8011 	strb.w	r8, [r2, #17]
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8007a96:	2206      	movs	r2, #6
 8007a98:	7aa3      	ldrb	r3, [r4, #10]
 8007a9a:	9201      	str	r2, [sp, #4]
 8007a9c:	7a62      	ldrb	r2, [r4, #9]
 8007a9e:	f8cd a008 	str.w	sl, [sp, #8]
 8007aa2:	9200      	str	r2, [sp, #0]
 8007aa4:	464a      	mov	r2, r9
 8007aa6:	f7fc feeb 	bl	8004880 <ip4_output_if>
    if (err != ERR_OK) {
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	f43f af18 	beq.w	80078e0 <tcp_output+0x90>
      pcb->flags |= TF_NAGLEMEMERR;
 8007ab0:	7ea3      	ldrb	r3, [r4, #26]
 8007ab2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ab6:	76a3      	strb	r3, [r4, #26]
}
 8007ab8:	b007      	add	sp, #28
 8007aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return ERR_RTE;
 8007abe:	f06f 0003 	mvn.w	r0, #3
 8007ac2:	e7f9      	b.n	8007ab8 <tcp_output+0x268>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8007ac4:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 8007ac8:	d18f      	bne.n	80079ea <tcp_output+0x19a>
 8007aca:	e6fa      	b.n	80078c2 <tcp_output+0x72>
 8007acc:	2000b0cc 	.word	0x2000b0cc
 8007ad0:	2000b0bc 	.word	0x2000b0bc

08007ad4 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8007ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad8:	b085      	sub	sp, #20
 8007ada:	4681      	mov	r9, r0
 8007adc:	460d      	mov	r5, r1
 8007ade:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8007ae0:	2114      	movs	r1, #20
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	2001      	movs	r0, #1
{
 8007ae6:	461f      	mov	r7, r3
 8007ae8:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 8007aec:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8007af0:	f7fd fc1a 	bl	8005328 <pbuf_alloc>
  if (p == NULL) {
 8007af4:	4606      	mov	r6, r0
 8007af6:	b390      	cbz	r0, 8007b5e <tcp_rst+0x8a>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8007af8:	6844      	ldr	r4, [r0, #4]
  tcphdr->src = lwip_htons(local_port);
 8007afa:	4658      	mov	r0, fp
 8007afc:	f7fc faaf 	bl	800405e <lwip_htons>
 8007b00:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8007b02:	4650      	mov	r0, sl
 8007b04:	f7fc faab 	bl	800405e <lwip_htons>
 8007b08:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8007b0a:	4648      	mov	r0, r9
 8007b0c:	f7fc faaa 	bl	8004064 <lwip_htonl>
 8007b10:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8007b12:	4628      	mov	r0, r5
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8007b14:	2500      	movs	r5, #0
  tcphdr->ackno = lwip_htonl(ackno);
 8007b16:	f7fc faa5 	bl	8004064 <lwip_htonl>
 8007b1a:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8007b1c:	f245 0014 	movw	r0, #20500	; 0x5014
 8007b20:	f7fc fa9d 	bl	800405e <lwip_htons>
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8007b24:	2308      	movs	r3, #8
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8007b26:	81a0      	strh	r0, [r4, #12]
  tcphdr->urgp = 0;

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8007b28:	4638      	mov	r0, r7
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8007b2a:	73a3      	strb	r3, [r4, #14]
 8007b2c:	2360      	movs	r3, #96	; 0x60
  tcphdr->chksum = 0;
 8007b2e:	7425      	strb	r5, [r4, #16]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8007b30:	73e3      	strb	r3, [r4, #15]
  tcphdr->chksum = 0;
 8007b32:	7465      	strb	r5, [r4, #17]
  tcphdr->urgp = 0;
 8007b34:	74a5      	strb	r5, [r4, #18]
 8007b36:	74e5      	strb	r5, [r4, #19]
  netif = ip_route(local_ip, remote_ip);
 8007b38:	f7fc fd70 	bl	800461c <ip4_route>
  if (netif != NULL) {
 8007b3c:	b148      	cbz	r0, 8007b52 <tcp_rst+0x7e>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8007b3e:	2306      	movs	r3, #6
 8007b40:	9002      	str	r0, [sp, #8]
 8007b42:	9500      	str	r5, [sp, #0]
 8007b44:	463a      	mov	r2, r7
 8007b46:	9301      	str	r3, [sp, #4]
 8007b48:	4641      	mov	r1, r8
 8007b4a:	23ff      	movs	r3, #255	; 0xff
 8007b4c:	4630      	mov	r0, r6
 8007b4e:	f7fc fe97 	bl	8004880 <ip4_output_if>
  }
  pbuf_free(p);
 8007b52:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8007b54:	b005      	add	sp, #20
 8007b56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8007b5a:	f7fd bbbd 	b.w	80052d8 <pbuf_free>
}
 8007b5e:	b005      	add	sp, #20
 8007b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b64 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8007b64:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
{
 8007b66:	b410      	push	{r4}
  if (pcb->unacked == NULL) {
 8007b68:	b192      	cbz	r2, 8007b90 <tcp_rexmit_rto+0x2c>
 8007b6a:	4611      	mov	r1, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8007b6c:	680b      	ldr	r3, [r1, #0]
 8007b6e:	b96b      	cbnz	r3, 8007b8c <tcp_rexmit_rto+0x28>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8007b70:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8007b72:	600c      	str	r4, [r1, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8007b74:	6682      	str	r2, [r0, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;

  /* increment number of retransmissions */
  ++pcb->nrtx;
 8007b76:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
  pcb->unacked = NULL;
 8007b7a:	66c3      	str	r3, [r0, #108]	; 0x6c
  ++pcb->nrtx;
 8007b7c:	3201      	adds	r2, #1

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8007b7e:	6343      	str	r3, [r0, #52]	; 0x34
  ++pcb->nrtx;
 8007b80:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 8007b84:	f85d 4b04 	ldr.w	r4, [sp], #4
  tcp_output(pcb);
 8007b88:	f7ff be62 	b.w	8007850 <tcp_output>
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	e7ed      	b.n	8007b6c <tcp_rexmit_rto+0x8>
}
 8007b90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b94:	4770      	bx	lr

08007b96 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8007b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8007b98:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
 8007b9a:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 8007b9c:	b19d      	cbz	r5, 8007bc6 <tcp_rexmit+0x30>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 8007b9e:	682b      	ldr	r3, [r5, #0]

  cur_seg = &(pcb->unsent);
 8007ba0:	f100 0668 	add.w	r6, r0, #104	; 0x68
  pcb->unacked = seg->next;
 8007ba4:	66c3      	str	r3, [r0, #108]	; 0x6c
  while (*cur_seg &&
 8007ba6:	6833      	ldr	r3, [r6, #0]
 8007ba8:	b973      	cbnz	r3, 8007bc8 <tcp_rexmit+0x32>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 8007baa:	6833      	ldr	r3, [r6, #0]
 8007bac:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 8007bae:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8007bb0:	682b      	ldr	r3, [r5, #0]
 8007bb2:	b90b      	cbnz	r3, 8007bb8 <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8007bb4:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  ++pcb->nrtx;
 8007bb8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	6363      	str	r3, [r4, #52]	; 0x34
 8007bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	6858      	ldr	r0, [r3, #4]
 8007bcc:	f7fc fa4a 	bl	8004064 <lwip_htonl>
 8007bd0:	68eb      	ldr	r3, [r5, #12]
 8007bd2:	4607      	mov	r7, r0
 8007bd4:	6858      	ldr	r0, [r3, #4]
 8007bd6:	f7fc fa45 	bl	8004064 <lwip_htonl>
 8007bda:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	dae4      	bge.n	8007baa <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 8007be0:	6836      	ldr	r6, [r6, #0]
 8007be2:	e7e0      	b.n	8007ba6 <tcp_rexmit+0x10>

08007be4 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8007be4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 8007be6:	b510      	push	{r4, lr}
 8007be8:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8007bea:	b32b      	cbz	r3, 8007c38 <tcp_rexmit_fast+0x54>
 8007bec:	7e83      	ldrb	r3, [r0, #26]
 8007bee:	075b      	lsls	r3, r3, #29
 8007bf0:	d422      	bmi.n	8007c38 <tcp_rexmit_fast+0x54>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8007bf2:	f7ff ffd0 	bl	8007b96 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
 8007bf6:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8007bfa:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8007bfe:	4293      	cmp	r3, r2
      pcb->ssthresh = pcb->snd_wnd / 2;
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
 8007c00:	bf96      	itet	ls
 8007c02:	085b      	lsrls	r3, r3, #1
      pcb->ssthresh = pcb->snd_wnd / 2;
 8007c04:	0852      	lsrhi	r2, r2, #1
      pcb->ssthresh = pcb->cwnd / 2;
 8007c06:	f8a4 304a 	strhls.w	r3, [r4, #74]	; 0x4a
    }

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8007c0a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
      pcb->ssthresh = pcb->snd_wnd / 2;
 8007c0c:	bf88      	it	hi
 8007c0e:	f8a4 204a 	strhhi.w	r2, [r4, #74]	; 0x4a
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8007c12:	005a      	lsls	r2, r3, #1
 8007c14:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 8007c18:	4291      	cmp	r1, r2
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8007c1a:	4413      	add	r3, r2
      pcb->ssthresh = 2*pcb->mss;
 8007c1c:	bf38      	it	cc
 8007c1e:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8007c22:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8007c26:	4413      	add	r3, r2
 8007c28:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8007c2c:	7ea3      	ldrb	r3, [r4, #26]
 8007c2e:	f043 0304 	orr.w	r3, r3, #4
 8007c32:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8007c34:	2300      	movs	r3, #0
 8007c36:	8623      	strh	r3, [r4, #48]	; 0x30
 8007c38:	bd10      	pop	{r4, pc}

08007c3a <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8007c3a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007c3c:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8007c3e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8007c40:	3801      	subs	r0, #1
 8007c42:	f7fc fa0f 	bl	8004064 <lwip_htonl>
 8007c46:	2100      	movs	r1, #0
 8007c48:	4602      	mov	r2, r0
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	f7ff fb9e 	bl	800738c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8007c50:	4605      	mov	r5, r0
 8007c52:	b1c8      	cbz	r0, 8007c88 <tcp_keepalive+0x4e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8007c54:	1d26      	adds	r6, r4, #4
 8007c56:	4630      	mov	r0, r6
 8007c58:	f7fc fce0 	bl	800461c <ip4_route>
  if (netif == NULL) {
 8007c5c:	b188      	cbz	r0, 8007c82 <tcp_keepalive+0x48>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8007c5e:	2100      	movs	r1, #0
 8007c60:	2206      	movs	r2, #6
 8007c62:	7aa3      	ldrb	r3, [r4, #10]
 8007c64:	9002      	str	r0, [sp, #8]
 8007c66:	4628      	mov	r0, r5
 8007c68:	e88d 0006 	stmia.w	sp, {r1, r2}
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	4632      	mov	r2, r6
 8007c70:	f7fc fe06 	bl	8004880 <ip4_output_if>
 8007c74:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8007c76:	4628      	mov	r0, r5
 8007c78:	f7fd fb2e 	bl	80052d8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	b004      	add	sp, #16
 8007c80:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 8007c82:	f06f 0403 	mvn.w	r4, #3
 8007c86:	e7f6      	b.n	8007c76 <tcp_keepalive+0x3c>
    return ERR_MEM;
 8007c88:	f04f 34ff 	mov.w	r4, #4294967295
 8007c8c:	e7f6      	b.n	8007c7c <tcp_keepalive+0x42>

08007c8e <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8007c8e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8007c92:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 8007c94:	4606      	mov	r6, r0

  if (seg == NULL) {
 8007c96:	b914      	cbnz	r4, 8007c9e <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 8007c98:	6e84      	ldr	r4, [r0, #104]	; 0x68
  }
  if (seg == NULL) {
 8007c9a:	2c00      	cmp	r4, #0
 8007c9c:	d041      	beq.n	8007d22 <tcp_zero_window_probe+0x94>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8007c9e:	68e3      	ldr	r3, [r4, #12]
 8007ca0:	8998      	ldrh	r0, [r3, #12]
 8007ca2:	f7fc f9dc 	bl	800405e <lwip_htons>
 8007ca6:	f010 0501 	ands.w	r5, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8007caa:	68e3      	ldr	r3, [r4, #12]
 8007cac:	4630      	mov	r0, r6
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8007cae:	bf18      	it	ne
 8007cb0:	8925      	ldrhne	r5, [r4, #8]
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8007cb2:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8007cb4:	bf1c      	itt	ne
 8007cb6:	fab5 f585 	clzne	r5, r5
 8007cba:	096d      	lsrne	r5, r5, #5
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8007cbc:	f085 0101 	eor.w	r1, r5, #1
 8007cc0:	f7ff fb64 	bl	800738c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8007cc4:	4607      	mov	r7, r0
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d03d      	beq.n	8007d46 <tcp_zero_window_probe+0xb8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8007cca:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 8007cce:	b365      	cbz	r5, 8007d2a <tcp_zero_window_probe+0x9c>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8007cd0:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 8007cd4:	2011      	movs	r0, #17
 8007cd6:	f7fc f9c2 	bl	800405e <lwip_htons>
 8007cda:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8007cde:	b2ad      	uxth	r5, r5
 8007ce0:	4328      	orrs	r0, r5
 8007ce2:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8007ce6:	68e3      	ldr	r3, [r4, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8007ce8:	1d34      	adds	r4, r6, #4
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8007cea:	6858      	ldr	r0, [r3, #4]
 8007cec:	f7fc f9ba 	bl	8004064 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8007cf0:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8007cf2:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8007cf4:	1a1b      	subs	r3, r3, r0
 8007cf6:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 8007cf8:	bfb8      	it	lt
 8007cfa:	64f0      	strlt	r0, [r6, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	f7fc fc8d 	bl	800461c <ip4_route>
  if (netif == NULL) {
 8007d02:	b1e8      	cbz	r0, 8007d40 <tcp_zero_window_probe+0xb2>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8007d04:	2100      	movs	r1, #0
 8007d06:	2206      	movs	r2, #6
 8007d08:	9002      	str	r0, [sp, #8]
 8007d0a:	4638      	mov	r0, r7
 8007d0c:	7ab3      	ldrb	r3, [r6, #10]
 8007d0e:	e88d 0006 	stmia.w	sp, {r1, r2}
 8007d12:	4622      	mov	r2, r4
 8007d14:	4631      	mov	r1, r6
 8007d16:	f7fc fdb3 	bl	8004880 <ip4_output_if>
 8007d1a:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8007d1c:	4638      	mov	r0, r7
 8007d1e:	f7fd fadb 	bl	80052d8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8007d22:	4620      	mov	r0, r4
 8007d24:	b004      	add	sp, #16
 8007d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8007d2a:	6860      	ldr	r0, [r4, #4]
 8007d2c:	f108 0114 	add.w	r1, r8, #20
 8007d30:	8922      	ldrh	r2, [r4, #8]
 8007d32:	8903      	ldrh	r3, [r0, #8]
 8007d34:	1a9b      	subs	r3, r3, r2
 8007d36:	2201      	movs	r2, #1
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	f7fd fc13 	bl	8005564 <pbuf_copy_partial>
 8007d3e:	e7d2      	b.n	8007ce6 <tcp_zero_window_probe+0x58>
    err = ERR_RTE;
 8007d40:	f06f 0403 	mvn.w	r4, #3
 8007d44:	e7ea      	b.n	8007d1c <tcp_zero_window_probe+0x8e>
    return ERR_MEM;
 8007d46:	f04f 34ff 	mov.w	r4, #4294967295
 8007d4a:	e7ea      	b.n	8007d22 <tcp_zero_window_probe+0x94>

08007d4c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8007d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4e:	4605      	mov	r5, r0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8007d50:	2006      	movs	r0, #6
{
 8007d52:	460f      	mov	r7, r1
 8007d54:	4616      	mov	r6, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8007d56:	f7fd f997 	bl	8005088 <memp_malloc>
  if (timeout == NULL) {
 8007d5a:	4604      	mov	r4, r0
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	d032      	beq.n	8007dc6 <sys_timeout+0x7a>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  now = sys_now();
 8007d60:	f000 fc1a 	bl	8008598 <sys_now>
  if (next_timeout == NULL) {
 8007d64:	4a18      	ldr	r2, [pc, #96]	; (8007dc8 <sys_timeout+0x7c>)
 8007d66:	4919      	ldr	r1, [pc, #100]	; (8007dcc <sys_timeout+0x80>)
 8007d68:	6813      	ldr	r3, [r2, #0]
 8007d6a:	b953      	cbnz	r3, 8007d82 <sys_timeout+0x36>
    diff = 0;
    timeouts_last_time = now;
 8007d6c:	6008      	str	r0, [r1, #0]
    diff = 0;
 8007d6e:	4618      	mov	r0, r3
  } else {
    diff = now - timeouts_last_time;
  }

  timeout->next = NULL;
 8007d70:	2100      	movs	r1, #0
  timeout->h = handler;
  timeout->arg = arg;
  timeout->time = msecs + diff;
 8007d72:	4428      	add	r0, r5
  timeout->h = handler;
 8007d74:	60a7      	str	r7, [r4, #8]
  timeout->next = NULL;
 8007d76:	6021      	str	r1, [r4, #0]
  timeout->arg = arg;
 8007d78:	60e6      	str	r6, [r4, #12]
  timeout->time = msecs + diff;
 8007d7a:	6060      	str	r0, [r4, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8007d7c:	b923      	cbnz	r3, 8007d88 <sys_timeout+0x3c>
  }

  if (next_timeout->time > msecs) {
    next_timeout->time -= msecs;
    timeout->next = next_timeout;
    next_timeout = timeout;
 8007d7e:	6014      	str	r4, [r2, #0]
 8007d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    diff = now - timeouts_last_time;
 8007d82:	6809      	ldr	r1, [r1, #0]
 8007d84:	1a40      	subs	r0, r0, r1
 8007d86:	e7f3      	b.n	8007d70 <sys_timeout+0x24>
  if (next_timeout->time > msecs) {
 8007d88:	6859      	ldr	r1, [r3, #4]
 8007d8a:	428d      	cmp	r5, r1
 8007d8c:	d216      	bcs.n	8007dbc <sys_timeout+0x70>
    next_timeout->time -= msecs;
 8007d8e:	1b4d      	subs	r5, r1, r5
 8007d90:	605d      	str	r5, [r3, #4]
    timeout->next = next_timeout;
 8007d92:	6023      	str	r3, [r4, #0]
 8007d94:	e7f3      	b.n	8007d7e <sys_timeout+0x32>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      timeout->time -= t->time;
      if (t->next == NULL || t->next->time > timeout->time) {
 8007d96:	6848      	ldr	r0, [r1, #4]
 8007d98:	4282      	cmp	r2, r0
 8007d9a:	d311      	bcc.n	8007dc0 <sys_timeout+0x74>
 8007d9c:	460e      	mov	r6, r1
      timeout->time -= t->time;
 8007d9e:	6871      	ldr	r1, [r6, #4]
 8007da0:	6862      	ldr	r2, [r4, #4]
 8007da2:	1a52      	subs	r2, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 8007da4:	6831      	ldr	r1, [r6, #0]
      timeout->time -= t->time;
 8007da6:	6062      	str	r2, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8007da8:	2900      	cmp	r1, #0
 8007daa:	d1f4      	bne.n	8007d96 <sys_timeout+0x4a>
        if (t->next != NULL) {
          t->next->time -= timeout->time;
        } else if (timeout->time > msecs) {
 8007dac:	4295      	cmp	r5, r2
 8007dae:	d202      	bcs.n	8007db6 <sys_timeout+0x6a>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	441d      	add	r5, r3
 8007db4:	6065      	str	r5, [r4, #4]
        }
        timeout->next = t->next;
 8007db6:	6021      	str	r1, [r4, #0]
        t->next = timeout;
 8007db8:	6034      	str	r4, [r6, #0]
        break;
 8007dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dbc:	461e      	mov	r6, r3
 8007dbe:	e7ee      	b.n	8007d9e <sys_timeout+0x52>
          t->next->time -= timeout->time;
 8007dc0:	1a82      	subs	r2, r0, r2
 8007dc2:	604a      	str	r2, [r1, #4]
 8007dc4:	e7f7      	b.n	8007db6 <sys_timeout+0x6a>
 8007dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dc8:	20000380 	.word	0x20000380
 8007dcc:	20000388 	.word	0x20000388

08007dd0 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8007dd0:	4b08      	ldr	r3, [pc, #32]	; (8007df4 <tcp_timer_needed+0x24>)
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	b962      	cbnz	r2, 8007df0 <tcp_timer_needed+0x20>
 8007dd6:	4a08      	ldr	r2, [pc, #32]	; (8007df8 <tcp_timer_needed+0x28>)
 8007dd8:	6812      	ldr	r2, [r2, #0]
 8007dda:	b912      	cbnz	r2, 8007de2 <tcp_timer_needed+0x12>
 8007ddc:	4a07      	ldr	r2, [pc, #28]	; (8007dfc <tcp_timer_needed+0x2c>)
 8007dde:	6812      	ldr	r2, [r2, #0]
 8007de0:	b132      	cbz	r2, 8007df0 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 8007de2:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8007de4:	4906      	ldr	r1, [pc, #24]	; (8007e00 <tcp_timer_needed+0x30>)
 8007de6:	20fa      	movs	r0, #250	; 0xfa
    tcpip_tcp_timer_active = 1;
 8007de8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8007dea:	2200      	movs	r2, #0
 8007dec:	f7ff bfae 	b.w	8007d4c <sys_timeout>
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	20000384 	.word	0x20000384
 8007df8:	2000b0b8 	.word	0x2000b0b8
 8007dfc:	2000b0c8 	.word	0x2000b0c8
 8007e00:	08007e05 	.word	0x08007e05

08007e04 <tcpip_tcp_timer>:
{
 8007e04:	b508      	push	{r3, lr}
  tcp_tmr();
 8007e06:	f7fe f807 	bl	8005e18 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8007e0a:	4b08      	ldr	r3, [pc, #32]	; (8007e2c <tcpip_tcp_timer+0x28>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	b913      	cbnz	r3, 8007e16 <tcpip_tcp_timer+0x12>
 8007e10:	4b07      	ldr	r3, [pc, #28]	; (8007e30 <tcpip_tcp_timer+0x2c>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	b133      	cbz	r3, 8007e24 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8007e16:	2200      	movs	r2, #0
 8007e18:	4906      	ldr	r1, [pc, #24]	; (8007e34 <tcpip_tcp_timer+0x30>)
 8007e1a:	20fa      	movs	r0, #250	; 0xfa
}
 8007e1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8007e20:	f7ff bf94 	b.w	8007d4c <sys_timeout>
    tcpip_tcp_timer_active = 0;
 8007e24:	4a04      	ldr	r2, [pc, #16]	; (8007e38 <tcpip_tcp_timer+0x34>)
 8007e26:	6013      	str	r3, [r2, #0]
 8007e28:	bd08      	pop	{r3, pc}
 8007e2a:	bf00      	nop
 8007e2c:	2000b0b8 	.word	0x2000b0b8
 8007e30:	2000b0c8 	.word	0x2000b0c8
 8007e34:	08007e05 	.word	0x08007e05
 8007e38:	20000384 	.word	0x20000384

08007e3c <sys_timeouts_init>:
{
 8007e3c:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, (void*)(size_t)&lwip_cyclic_timers[i]);
 8007e3e:	4d0a      	ldr	r5, [pc, #40]	; (8007e68 <sys_timeouts_init+0x2c>)
 8007e40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007e44:	4c09      	ldr	r4, [pc, #36]	; (8007e6c <sys_timeouts_init+0x30>)
 8007e46:	f105 0208 	add.w	r2, r5, #8
 8007e4a:	4621      	mov	r1, r4
 8007e4c:	f7ff ff7e 	bl	8007d4c <sys_timeout>
 8007e50:	f105 0210 	add.w	r2, r5, #16
 8007e54:	4621      	mov	r1, r4
 8007e56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007e5a:	f7ff ff77 	bl	8007d4c <sys_timeout>
  timeouts_last_time = sys_now();
 8007e5e:	f000 fb9b 	bl	8008598 <sys_now>
 8007e62:	4b03      	ldr	r3, [pc, #12]	; (8007e70 <sys_timeouts_init+0x34>)
 8007e64:	6018      	str	r0, [r3, #0]
 8007e66:	bd38      	pop	{r3, r4, r5, pc}
 8007e68:	0800b94c 	.word	0x0800b94c
 8007e6c:	08007e75 	.word	0x08007e75
 8007e70:	20000388 	.word	0x20000388

08007e74 <cyclic_timer>:
{
 8007e74:	b510      	push	{r4, lr}
 8007e76:	4604      	mov	r4, r0
  cyclic->handler();
 8007e78:	6843      	ldr	r3, [r0, #4]
 8007e7a:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8007e7c:	4903      	ldr	r1, [pc, #12]	; (8007e8c <cyclic_timer+0x18>)
 8007e7e:	4622      	mov	r2, r4
 8007e80:	6820      	ldr	r0, [r4, #0]
}
 8007e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8007e86:	f7ff bf61 	b.w	8007d4c <sys_timeout>
 8007e8a:	bf00      	nop
 8007e8c:	08007e75 	.word	0x08007e75

08007e90 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8007e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (next_timeout) {
 8007e94:	4d13      	ldr	r5, [pc, #76]	; (8007ee4 <sys_check_timeouts+0x54>)
 8007e96:	682b      	ldr	r3, [r5, #0]
 8007e98:	b30b      	cbz	r3, 8007ede <sys_check_timeouts+0x4e>
    u8_t had_one;
    u32_t now;

    now = sys_now();
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8007e9a:	4e13      	ldr	r6, [pc, #76]	; (8007ee8 <sys_check_timeouts+0x58>)
    now = sys_now();
 8007e9c:	f000 fb7c 	bl	8008598 <sys_now>
    do {
      PBUF_CHECK_FREE_OOSEQ();
 8007ea0:	4f12      	ldr	r7, [pc, #72]	; (8007eec <sys_check_timeouts+0x5c>)
    diff = now - timeouts_last_time;
 8007ea2:	6834      	ldr	r4, [r6, #0]
 8007ea4:	1b04      	subs	r4, r0, r4
      PBUF_CHECK_FREE_OOSEQ();
 8007ea6:	783b      	ldrb	r3, [r7, #0]
 8007ea8:	b10b      	cbz	r3, 8007eae <sys_check_timeouts+0x1e>
 8007eaa:	f7fd f9cd 	bl	8005248 <pbuf_free_ooseq>
      had_one = 0;
      tmptimeout = next_timeout;
 8007eae:	6829      	ldr	r1, [r5, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8007eb0:	b1a9      	cbz	r1, 8007ede <sys_check_timeouts+0x4e>
 8007eb2:	684b      	ldr	r3, [r1, #4]
 8007eb4:	429c      	cmp	r4, r3
 8007eb6:	d312      	bcc.n	8007ede <sys_check_timeouts+0x4e>
        /* timeout has expired */
        had_one = 1;
        timeouts_last_time += tmptimeout->time;
 8007eb8:	6832      	ldr	r2, [r6, #0]
        diff -= tmptimeout->time;
 8007eba:	1ae4      	subs	r4, r4, r3
        next_timeout = tmptimeout->next;
        handler = tmptimeout->h;
 8007ebc:	f8d1 8008 	ldr.w	r8, [r1, #8]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8007ec0:	2006      	movs	r0, #6
        timeouts_last_time += tmptimeout->time;
 8007ec2:	441a      	add	r2, r3
        next_timeout = tmptimeout->next;
 8007ec4:	680b      	ldr	r3, [r1, #0]
        arg = tmptimeout->arg;
 8007ec6:	f8d1 900c 	ldr.w	r9, [r1, #12]
        timeouts_last_time += tmptimeout->time;
 8007eca:	6032      	str	r2, [r6, #0]
        next_timeout = tmptimeout->next;
 8007ecc:	602b      	str	r3, [r5, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8007ece:	f7fd f8eb 	bl	80050a8 <memp_free>
        if (handler != NULL) {
 8007ed2:	f1b8 0f00 	cmp.w	r8, #0
 8007ed6:	d0e6      	beq.n	8007ea6 <sys_check_timeouts+0x16>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 8007ed8:	4648      	mov	r0, r9
 8007eda:	47c0      	blx	r8
 8007edc:	e7e3      	b.n	8007ea6 <sys_check_timeouts+0x16>
 8007ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20000380 	.word	0x20000380
 8007ee8:	20000388 	.word	0x20000388
 8007eec:	2000b0b0 	.word	0x2000b0b0

08007ef0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8007ef0:	4770      	bx	lr
	...

08007ef4 <udp_input>:
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8007ef4:	8943      	ldrh	r3, [r0, #10]
 8007ef6:	2b07      	cmp	r3, #7
{
 8007ef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007efc:	4605      	mov	r5, r0
 8007efe:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 8007f00:	d805      	bhi.n	8007f0e <udp_input+0x1a>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8007f02:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8007f04:	b003      	add	sp, #12
 8007f06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 8007f0a:	f7fd b9e5 	b.w	80052d8 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8007f0e:	4c30      	ldr	r4, [pc, #192]	; (8007fd0 <udp_input+0xdc>)
  udphdr = (struct udp_hdr *)p->payload;
 8007f10:	6846      	ldr	r6, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8007f12:	6821      	ldr	r1, [r4, #0]
 8007f14:	6960      	ldr	r0, [r4, #20]
 8007f16:	f7fc fcc4 	bl	80048a2 <ip4_addr_isbroadcast_u32>
 8007f1a:	4682      	mov	sl, r0
  src = lwip_ntohs(udphdr->src);
 8007f1c:	8830      	ldrh	r0, [r6, #0]
 8007f1e:	f7fc f89e 	bl	800405e <lwip_htons>
 8007f22:	4680      	mov	r8, r0
  dest = lwip_ntohs(udphdr->dest);
 8007f24:	8870      	ldrh	r0, [r6, #2]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f26:	4e2b      	ldr	r6, [pc, #172]	; (8007fd4 <udp_input+0xe0>)
  dest = lwip_ntohs(udphdr->dest);
 8007f28:	f7fc f899 	bl	800405e <lwip_htons>
       ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007f2c:	6962      	ldr	r2, [r4, #20]
  dest = lwip_ntohs(udphdr->dest);
 8007f2e:	4686      	mov	lr, r0
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8007f30:	f8d4 c010 	ldr.w	ip, [r4, #16]
  uncon_pcb = NULL;
 8007f34:	2400      	movs	r4, #0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f36:	6830      	ldr	r0, [r6, #0]
 8007f38:	46b3      	mov	fp, r6
  prev = NULL;
 8007f3a:	4627      	mov	r7, r4
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	b92b      	cbnz	r3, 8007f4c <udp_input+0x58>
  if (pcb != NULL) {
 8007f40:	bb04      	cbnz	r4, 8007f84 <udp_input+0x90>
  if (for_us) {
 8007f42:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d1db      	bne.n	8007f02 <udp_input+0xe>
 8007f4a:	e01b      	b.n	8007f84 <udp_input+0x90>
    if ((pcb->local_port == dest) &&
 8007f4c:	8a59      	ldrh	r1, [r3, #18]
 8007f4e:	4571      	cmp	r1, lr
 8007f50:	d132      	bne.n	8007fb8 <udp_input+0xc4>
 8007f52:	6819      	ldr	r1, [r3, #0]
    if (broadcast != 0) {
 8007f54:	f1ba 0f00 	cmp.w	sl, #0
 8007f58:	d02a      	beq.n	8007fb0 <udp_input+0xbc>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8007f5a:	b131      	cbz	r1, 8007f6a <udp_input+0x76>
 8007f5c:	1c56      	adds	r6, r2, #1
 8007f5e:	d004      	beq.n	8007f6a <udp_input+0x76>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8007f60:	4051      	eors	r1, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8007f62:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8007f66:	4231      	tst	r1, r6
 8007f68:	d126      	bne.n	8007fb8 <udp_input+0xc4>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8007f6a:	7c19      	ldrb	r1, [r3, #16]
 8007f6c:	0749      	lsls	r1, r1, #29
 8007f6e:	d402      	bmi.n	8007f76 <udp_input+0x82>
 8007f70:	2c00      	cmp	r4, #0
 8007f72:	bf08      	it	eq
 8007f74:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 8007f76:	8a99      	ldrh	r1, [r3, #20]
 8007f78:	4541      	cmp	r1, r8
 8007f7a:	d11d      	bne.n	8007fb8 <udp_input+0xc4>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8007f7c:	6859      	ldr	r1, [r3, #4]
      if ((pcb->remote_port == src) &&
 8007f7e:	b9f1      	cbnz	r1, 8007fbe <udp_input+0xca>
        if (prev != NULL) {
 8007f80:	bb07      	cbnz	r7, 8007fc4 <udp_input+0xd0>
 8007f82:	461c      	mov	r4, r3
    if (pbuf_header(p, -UDP_HLEN)) {
 8007f84:	f06f 0107 	mvn.w	r1, #7
 8007f88:	4628      	mov	r0, r5
 8007f8a:	f7fd f99e 	bl	80052ca <pbuf_header>
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	d1b7      	bne.n	8007f02 <udp_input+0xe>
    if (pcb != NULL) {
 8007f92:	2c00      	cmp	r4, #0
 8007f94:	d0b5      	beq.n	8007f02 <udp_input+0xe>
      if (pcb->recv != NULL) {
 8007f96:	69a6      	ldr	r6, [r4, #24]
 8007f98:	2e00      	cmp	r6, #0
 8007f9a:	d0b2      	beq.n	8007f02 <udp_input+0xe>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8007f9c:	f8cd 8000 	str.w	r8, [sp]
 8007fa0:	462a      	mov	r2, r5
 8007fa2:	4b0d      	ldr	r3, [pc, #52]	; (8007fd8 <udp_input+0xe4>)
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	69e0      	ldr	r0, [r4, #28]
 8007fa8:	47b0      	blx	r6
}
 8007faa:	b003      	add	sp, #12
 8007fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ip_addr_isany(&pcb->local_ip) ||
 8007fb0:	2900      	cmp	r1, #0
 8007fb2:	d0da      	beq.n	8007f6a <udp_input+0x76>
 8007fb4:	4291      	cmp	r1, r2
 8007fb6:	d0d8      	beq.n	8007f6a <udp_input+0x76>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8007fb8:	461f      	mov	r7, r3
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	e7bf      	b.n	8007f3e <udp_input+0x4a>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8007fbe:	4561      	cmp	r1, ip
 8007fc0:	d1fa      	bne.n	8007fb8 <udp_input+0xc4>
 8007fc2:	e7dd      	b.n	8007f80 <udp_input+0x8c>
          prev->next = pcb->next;
 8007fc4:	68da      	ldr	r2, [r3, #12]
          udp_pcbs = pcb;
 8007fc6:	f8cb 3000 	str.w	r3, [fp]
          prev->next = pcb->next;
 8007fca:	60fa      	str	r2, [r7, #12]
          pcb->next = udp_pcbs;
 8007fcc:	60d8      	str	r0, [r3, #12]
 8007fce:	e7d8      	b.n	8007f82 <udp_input+0x8e>
 8007fd0:	200003f8 	.word	0x200003f8
 8007fd4:	2000b0d0 	.word	0x2000b0d0
 8007fd8:	20000408 	.word	0x20000408

08007fdc <udp_bind>:
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 8007fdc:	4b26      	ldr	r3, [pc, #152]	; (8008078 <udp_bind+0x9c>)
{
 8007fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 8007fe2:	2900      	cmp	r1, #0
 8007fe4:	bf08      	it	eq
 8007fe6:	4619      	moveq	r1, r3
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL) || !IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ipaddr)) {
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	d040      	beq.n	800806e <udp_bind+0x92>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8007fec:	4e23      	ldr	r6, [pc, #140]	; (800807c <udp_bind+0xa0>)
 8007fee:	f8d6 e000 	ldr.w	lr, [r6]
 8007ff2:	4675      	mov	r5, lr
 8007ff4:	b96d      	cbnz	r5, 8008012 <udp_bind+0x36>
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 8007ff6:	b192      	cbz	r2, 800801e <udp_bind+0x42>
 8007ff8:	4673      	mov	r3, lr
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8007ffa:	b1fb      	cbz	r3, 800803c <udp_bind+0x60>
      if (pcb != ipcb) {
 8007ffc:	4283      	cmp	r3, r0
 8007ffe:	d006      	beq.n	800800e <udp_bind+0x32>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8008000:	8a5c      	ldrh	r4, [r3, #18]
 8008002:	4294      	cmp	r4, r2
 8008004:	d103      	bne.n	800800e <udp_bind+0x32>
 8008006:	681f      	ldr	r7, [r3, #0]
 8008008:	680c      	ldr	r4, [r1, #0]
 800800a:	42a7      	cmp	r7, r4
 800800c:	d029      	beq.n	8008062 <udp_bind+0x86>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	e7f3      	b.n	8007ffa <udp_bind+0x1e>
    if (pcb == ipcb) {
 8008012:	4285      	cmp	r5, r0
 8008014:	d001      	beq.n	800801a <udp_bind+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008016:	68ed      	ldr	r5, [r5, #12]
 8008018:	e7ec      	b.n	8007ff4 <udp_bind+0x18>
      rebind = 1;
 800801a:	2501      	movs	r5, #1
 800801c:	e7eb      	b.n	8007ff6 <udp_bind+0x1a>
 800801e:	4b18      	ldr	r3, [pc, #96]	; (8008080 <udp_bind+0xa4>)
  if (port == 0) {
 8008020:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8008024:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8008028:	881a      	ldrh	r2, [r3, #0]
 800802a:	4562      	cmp	r2, ip
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800802c:	4677      	mov	r7, lr
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800802e:	bf16      	itet	ne
 8008030:	3201      	addne	r2, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8008032:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8008036:	b292      	uxthne	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008038:	b957      	cbnz	r7, 8008050 <udp_bind+0x74>
 800803a:	801a      	strh	r2, [r3, #0]
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800803c:	680b      	ldr	r3, [r1, #0]

  pcb->local_port = port;
 800803e:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8008040:	6003      	str	r3, [r0, #0]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8008042:	b915      	cbnz	r5, 800804a <udp_bind+0x6e>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8008044:	f8c0 e00c 	str.w	lr, [r0, #12]
    udp_pcbs = pcb;
 8008048:	6030      	str	r0, [r6, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800804a:	2000      	movs	r0, #0
 800804c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pcb->local_port == udp_port) {
 8008050:	f8b7 8012 	ldrh.w	r8, [r7, #18]
 8008054:	4590      	cmp	r8, r2
 8008056:	d108      	bne.n	800806a <udp_bind+0x8e>
 8008058:	3c01      	subs	r4, #1
 800805a:	b2a4      	uxth	r4, r4
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800805c:	2c00      	cmp	r4, #0
 800805e:	d1e4      	bne.n	800802a <udp_bind+0x4e>
 8008060:	801a      	strh	r2, [r3, #0]
      return ERR_USE;
 8008062:	f06f 0007 	mvn.w	r0, #7
 8008066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800806a:	68ff      	ldr	r7, [r7, #12]
 800806c:	e7e4      	b.n	8008038 <udp_bind+0x5c>
    return ERR_VAL;
 800806e:	f06f 0005 	mvn.w	r0, #5
}
 8008072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008076:	bf00      	nop
 8008078:	0800b890 	.word	0x0800b890
 800807c:	2000b0d0 	.word	0x2000b0d0
 8008080:	20000006 	.word	0x20000006

08008084 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008084:	b570      	push	{r4, r5, r6, lr}
 8008086:	460d      	mov	r5, r1
 8008088:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
 800808a:	4604      	mov	r4, r0
 800808c:	b1d0      	cbz	r0, 80080c4 <udp_connect+0x40>
 800808e:	b1c9      	cbz	r1, 80080c4 <udp_connect+0x40>
    return ERR_VAL;
  }

  if (pcb->local_port == 0) {
 8008090:	8a42      	ldrh	r2, [r0, #18]
 8008092:	b16a      	cbz	r2, 80080b0 <udp_connect+0x2c>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8008094:	682b      	ldr	r3, [r5, #0]
  pcb->remote_port = port;
 8008096:	82a6      	strh	r6, [r4, #20]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8008098:	6063      	str	r3, [r4, #4]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800809a:	7c23      	ldrb	r3, [r4, #16]
 800809c:	f043 0304 	orr.w	r3, r3, #4
 80080a0:	7423      	strb	r3, [r4, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80080a2:	4b0b      	ldr	r3, [pc, #44]	; (80080d0 <udp_connect+0x4c>)
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	4610      	mov	r0, r2
 80080a8:	b940      	cbnz	r0, 80080bc <udp_connect+0x38>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80080aa:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 80080ac:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 80080ae:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80080b0:	4601      	mov	r1, r0
 80080b2:	f7ff ff93 	bl	8007fdc <udp_bind>
    if (err != ERR_OK) {
 80080b6:	2800      	cmp	r0, #0
 80080b8:	d0ec      	beq.n	8008094 <udp_connect+0x10>
 80080ba:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb == ipcb) {
 80080bc:	42a0      	cmp	r0, r4
 80080be:	d004      	beq.n	80080ca <udp_connect+0x46>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80080c0:	68c0      	ldr	r0, [r0, #12]
 80080c2:	e7f1      	b.n	80080a8 <udp_connect+0x24>
    return ERR_VAL;
 80080c4:	f06f 0005 	mvn.w	r0, #5
 80080c8:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 80080ca:	2000      	movs	r0, #0
}
 80080cc:	bd70      	pop	{r4, r5, r6, pc}
 80080ce:	bf00      	nop
 80080d0:	2000b0d0 	.word	0x2000b0d0

080080d4 <udp_remove>:
{
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80080d4:	4a0a      	ldr	r2, [pc, #40]	; (8008100 <udp_remove+0x2c>)
{
 80080d6:	4601      	mov	r1, r0
  if (udp_pcbs == pcb) {
 80080d8:	6813      	ldr	r3, [r2, #0]
 80080da:	4283      	cmp	r3, r0
 80080dc:	d104      	bne.n	80080e8 <udp_remove+0x14>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80080de:	68c3      	ldr	r3, [r0, #12]
 80080e0:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80080e2:	2000      	movs	r0, #0
 80080e4:	f7fc bfe0 	b.w	80050a8 <memp_free>
{
 80080e8:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d0f9      	beq.n	80080e2 <udp_remove+0xe>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d0f6      	beq.n	80080e2 <udp_remove+0xe>
 80080f4:	4299      	cmp	r1, r3
 80080f6:	d1f7      	bne.n	80080e8 <udp_remove+0x14>
        pcb2->next = pcb->next;
 80080f8:	68cb      	ldr	r3, [r1, #12]
 80080fa:	60d3      	str	r3, [r2, #12]
        break;
 80080fc:	e7f1      	b.n	80080e2 <udp_remove+0xe>
 80080fe:	bf00      	nop
 8008100:	2000b0d0 	.word	0x2000b0d0

08008104 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8008104:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8008106:	2000      	movs	r0, #0
 8008108:	f7fc ffbe 	bl	8005088 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800810c:	4604      	mov	r4, r0
 800810e:	b128      	cbz	r0, 800811c <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8008110:	2220      	movs	r2, #32
 8008112:	2100      	movs	r1, #0
 8008114:	f003 f9d8 	bl	800b4c8 <memset>
    pcb->ttl = UDP_TTL;
 8008118:	23ff      	movs	r3, #255	; 0xff
 800811a:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800811c:	4620      	mov	r0, r4
 800811e:	bd10      	pop	{r4, pc}

08008120 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8008120:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8008122:	b138      	cbz	r0, 8008134 <udp_netif_ip_addr_changed+0x14>
 8008124:	6803      	ldr	r3, [r0, #0]
 8008126:	b12b      	cbz	r3, 8008134 <udp_netif_ip_addr_changed+0x14>
 8008128:	b121      	cbz	r1, 8008134 <udp_netif_ip_addr_changed+0x14>
 800812a:	680b      	ldr	r3, [r1, #0]
 800812c:	b113      	cbz	r3, 8008134 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800812e:	4b06      	ldr	r3, [pc, #24]	; (8008148 <udp_netif_ip_addr_changed+0x28>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	b903      	cbnz	r3, 8008136 <udp_netif_ip_addr_changed+0x16>
 8008134:	bd10      	pop	{r4, pc}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8008136:	681c      	ldr	r4, [r3, #0]
 8008138:	6802      	ldr	r2, [r0, #0]
 800813a:	4294      	cmp	r4, r2
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800813c:	bf04      	itt	eq
 800813e:	680a      	ldreq	r2, [r1, #0]
 8008140:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	e7f5      	b.n	8008132 <udp_netif_ip_addr_changed+0x12>
 8008146:	bf00      	nop
 8008148:	2000b0d0 	.word	0x2000b0d0

0800814c <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800814c:	8943      	ldrh	r3, [r0, #10]
 800814e:	2b0e      	cmp	r3, #14
{
 8008150:	b570      	push	{r4, r5, r6, lr}
 8008152:	4604      	mov	r4, r0
 8008154:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 8008156:	d914      	bls.n	8008182 <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8008158:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800815a:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800815c:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800815e:	07d9      	lsls	r1, r3, #31
 8008160:	d50a      	bpl.n	8008178 <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8008162:	2b01      	cmp	r3, #1
 8008164:	d111      	bne.n	800818a <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8008166:	7843      	ldrb	r3, [r0, #1]
 8008168:	b933      	cbnz	r3, 8008178 <ethernet_input+0x2c>
 800816a:	7883      	ldrb	r3, [r0, #2]
 800816c:	2b5e      	cmp	r3, #94	; 0x5e
 800816e:	d103      	bne.n	8008178 <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8008170:	7b63      	ldrb	r3, [r4, #13]
 8008172:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8008176:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8008178:	2e08      	cmp	r6, #8
 800817a:	d010      	beq.n	800819e <ethernet_input+0x52>
 800817c:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 8008180:	d01e      	beq.n	80081c0 <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8008182:	4620      	mov	r0, r4
 8008184:	f7fd f8a8 	bl	80052d8 <pbuf_free>
  return ERR_OK;
 8008188:	e018      	b.n	80081bc <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800818a:	2206      	movs	r2, #6
 800818c:	4914      	ldr	r1, [pc, #80]	; (80081e0 <ethernet_input+0x94>)
 800818e:	f003 f981 	bl	800b494 <memcmp>
 8008192:	2800      	cmp	r0, #0
 8008194:	d1f0      	bne.n	8008178 <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 8008196:	7b63      	ldrb	r3, [r4, #13]
 8008198:	f043 0308 	orr.w	r3, r3, #8
 800819c:	e7eb      	b.n	8008176 <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800819e:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 80081a2:	071a      	lsls	r2, r3, #28
 80081a4:	d5ed      	bpl.n	8008182 <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80081a6:	f06f 010d 	mvn.w	r1, #13
 80081aa:	4620      	mov	r0, r4
 80081ac:	f7fd f88d 	bl	80052ca <pbuf_header>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	d1e6      	bne.n	8008182 <ethernet_input+0x36>
        ip4_input(p, netif);
 80081b4:	4629      	mov	r1, r5
 80081b6:	4620      	mov	r0, r4
 80081b8:	f7fc fa5c 	bl	8004674 <ip4_input>
}
 80081bc:	2000      	movs	r0, #0
 80081be:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80081c0:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 80081c4:	071b      	lsls	r3, r3, #28
 80081c6:	d5dc      	bpl.n	8008182 <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80081c8:	f06f 010d 	mvn.w	r1, #13
 80081cc:	4620      	mov	r0, r4
 80081ce:	f7fd f87c 	bl	80052ca <pbuf_header>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	d1d5      	bne.n	8008182 <ethernet_input+0x36>
        etharp_input(p, netif);
 80081d6:	4629      	mov	r1, r5
 80081d8:	4620      	mov	r0, r4
 80081da:	f7fc f827 	bl	800422c <etharp_input>
      break;
 80081de:	e7ed      	b.n	80081bc <ethernet_input+0x70>
 80081e0:	0800b964 	.word	0x0800b964

080081e4 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 80081e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081e8:	460c      	mov	r4, r1
 80081ea:	4605      	mov	r5, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80081ec:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 80081f0:	4616      	mov	r6, r2
 80081f2:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 80081f4:	f7fb ff33 	bl	800405e <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80081f8:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 80081fa:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80081fc:	4620      	mov	r0, r4
 80081fe:	f7fd f864 	bl	80052ca <pbuf_header>
 8008202:	b988      	cbnz	r0, 8008228 <ethernet_output+0x44>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8008204:	6861      	ldr	r1, [r4, #4]
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8008206:	4628      	mov	r0, r5
  ethhdr->type = eth_type_be;
 8008208:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	600b      	str	r3, [r1, #0]
 8008210:	88bb      	ldrh	r3, [r7, #4]
 8008212:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 8008214:	6833      	ldr	r3, [r6, #0]
 8008216:	f8c1 3006 	str.w	r3, [r1, #6]
 800821a:	88b3      	ldrh	r3, [r6, #4]
 800821c:	814b      	strh	r3, [r1, #10]
  return netif->linkoutput(netif, p);
 800821e:	4621      	mov	r1, r4
 8008220:	69ab      	ldr	r3, [r5, #24]
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8008222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8008226:	4718      	bx	r3
}
 8008228:	f06f 0001 	mvn.w	r0, #1
 800822c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008230 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8008234:	4a25      	ldr	r2, [pc, #148]	; (80082cc <low_level_output+0x9c>)
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 8008236:	f04f 0800 	mov.w	r8, #0
{
 800823a:	460c      	mov	r4, r1
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800823c:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8008240:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
 8008242:	4647      	mov	r7, r8
 8008244:	9200      	str	r2, [sp, #0]
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8008246:	68ab      	ldr	r3, [r5, #8]
  for(q = p; q != NULL; q = q->next)
 8008248:	b92c      	cbnz	r4, 8008256 <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800824a:	4639      	mov	r1, r7
 800824c:	481f      	ldr	r0, [pc, #124]	; (80082cc <low_level_output+0x9c>)
 800824e:	f7f9 fcd7 	bl	8001c00 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8008252:	4620      	mov	r0, r4
 8008254:	e004      	b.n	8008260 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008256:	682a      	ldr	r2, [r5, #0]
 8008258:	2a00      	cmp	r2, #0
 800825a:	da11      	bge.n	8008280 <low_level_output+0x50>
        errval = ERR_USE;
 800825c:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8008260:	9b00      	ldr	r3, [sp, #0]
 8008262:	f241 0214 	movw	r2, #4116	; 0x1014
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	5899      	ldr	r1, [r3, r2]
 800826a:	0689      	lsls	r1, r1, #26
 800826c:	d505      	bpl.n	800827a <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800826e:	2120      	movs	r1, #32
 8008270:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8008272:	2100      	movs	r1, #0
 8008274:	f241 0204 	movw	r2, #4100	; 0x1004
 8008278:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 800827a:	b003      	add	sp, #12
 800827c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 8008280:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008284:	4646      	mov	r6, r8
      payloadoffset = 0;
 8008286:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800828a:	eb06 0809 	add.w	r8, r6, r9
 800828e:	1998      	adds	r0, r3, r6
 8008290:	6861      	ldr	r1, [r4, #4]
 8008292:	45d8      	cmp	r8, fp
 8008294:	d808      	bhi.n	80082a8 <low_level_output+0x78>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8008296:	464a      	mov	r2, r9
 8008298:	4451      	add	r1, sl
 800829a:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 800829c:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800829e:	f003 f908 	bl	800b4b2 <memcpy>
  for(q = p; q != NULL; q = q->next)
 80082a2:	6824      	ldr	r4, [r4, #0]
 80082a4:	9b01      	ldr	r3, [sp, #4]
 80082a6:	e7cf      	b.n	8008248 <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80082a8:	ebab 0606 	sub.w	r6, fp, r6
 80082ac:	4451      	add	r1, sl
 80082ae:	4632      	mov	r2, r6
 80082b0:	f003 f8ff 	bl	800b4b2 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80082b4:	68ed      	ldr	r5, [r5, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80082b6:	682b      	ldr	r3, [r5, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	dbcf      	blt.n	800825c <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80082bc:	44b2      	add	sl, r6
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80082be:	4437      	add	r7, r6
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80082c0:	68ab      	ldr	r3, [r5, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80082c2:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 80082c6:	2600      	movs	r6, #0
 80082c8:	e7df      	b.n	800828a <low_level_output+0x5a>
 80082ca:	bf00      	nop
 80082cc:	2000c9a4 	.word	0x2000c9a4

080082d0 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 80082d0:	6802      	ldr	r2, [r0, #0]
 80082d2:	4b31      	ldr	r3, [pc, #196]	; (8008398 <HAL_ETH_MspInit+0xc8>)
 80082d4:	429a      	cmp	r2, r3
{
 80082d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082d8:	b089      	sub	sp, #36	; 0x24
  if(ethHandle->Instance==ETH)
 80082da:	d15a      	bne.n	8008392 <HAL_ETH_MspInit+0xc2>
    __HAL_RCC_ETH_CLK_ENABLE();
 80082dc:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082e0:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082e2:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082e4:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 80082e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80082e8:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082ea:	a903      	add	r1, sp, #12
 80082ec:	482b      	ldr	r0, [pc, #172]	; (800839c <HAL_ETH_MspInit+0xcc>)
    __HAL_RCC_ETH_CLK_ENABLE();
 80082ee:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80082f2:	631a      	str	r2, [r3, #48]	; 0x30
 80082f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082f6:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80082fa:	9200      	str	r2, [sp, #0]
 80082fc:	9a00      	ldr	r2, [sp, #0]
 80082fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008300:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008304:	631a      	str	r2, [r3, #48]	; 0x30
 8008306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008308:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800830c:	9201      	str	r2, [sp, #4]
 800830e:	9a01      	ldr	r2, [sp, #4]
 8008310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008312:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8008316:	631a      	str	r2, [r3, #48]	; 0x30
 8008318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800831a:	9704      	str	r7, [sp, #16]
    __HAL_RCC_ETH_CLK_ENABLE();
 800831c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008320:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008322:	9606      	str	r6, [sp, #24]
    __HAL_RCC_ETH_CLK_ENABLE();
 8008324:	9302      	str	r3, [sp, #8]
 8008326:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8008328:	2332      	movs	r3, #50	; 0x32
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800832a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800832c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800832e:	f7f9 fefd 	bl	800212c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8008332:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008334:	a903      	add	r1, sp, #12
 8008336:	481a      	ldr	r0, [pc, #104]	; (80083a0 <HAL_ETH_MspInit+0xd0>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8008338:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800833a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800833c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800833e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008340:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008342:	f7f9 fef3 	bl	800212c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008346:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800834a:	a903      	add	r1, sp, #12
 800834c:	4815      	ldr	r0, [pc, #84]	; (80083a4 <HAL_ETH_MspInit+0xd4>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800834e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008350:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008352:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008354:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008356:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008358:	f7f9 fee8 	bl	800212c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800835c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008360:	a903      	add	r1, sp, #12
 8008362:	4811      	ldr	r0, [pc, #68]	; (80083a8 <HAL_ETH_MspInit+0xd8>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8008364:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008366:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008368:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800836a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800836c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800836e:	f7f9 fedd 	bl	800212c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8008372:	4622      	mov	r2, r4
 8008374:	4621      	mov	r1, r4
 8008376:	203d      	movs	r0, #61	; 0x3d
 8008378:	f7f8 fe92 	bl	80010a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800837c:	203d      	movs	r0, #61	; 0x3d
 800837e:	f7f8 fec7 	bl	8001110 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 8008382:	203e      	movs	r0, #62	; 0x3e
 8008384:	4622      	mov	r2, r4
 8008386:	4621      	mov	r1, r4
 8008388:	f7f8 fe8a 	bl	80010a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800838c:	203e      	movs	r0, #62	; 0x3e
 800838e:	f7f8 febf 	bl	8001110 <HAL_NVIC_EnableIRQ>
}
 8008392:	b009      	add	sp, #36	; 0x24
 8008394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008396:	bf00      	nop
 8008398:	40028000 	.word	0x40028000
 800839c:	40020800 	.word	0x40020800
 80083a0:	40020000 	.word	0x40020000
 80083a4:	40020400 	.word	0x40020400
 80083a8:	40021800 	.word	0x40021800

080083ac <ethernetif_input>:
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
 
{
 80083ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80083b0:	4c34      	ldr	r4, [pc, #208]	; (8008484 <ethernetif_input+0xd8>)
{
 80083b2:	9001      	str	r0, [sp, #4]
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80083b4:	4620      	mov	r0, r4
 80083b6:	f7f9 fc95 	bl	8001ce4 <HAL_ETH_GetReceivedFrame>
 80083ba:	4605      	mov	r5, r0
 80083bc:	2800      	cmp	r0, #0
 80083be:	d15e      	bne.n	800847e <ethernetif_input+0xd2>
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80083c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
  len = heth.RxFrameInfos.length;
 80083c2:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80083c4:	9300      	str	r3, [sp, #0]
  if (len > 0)
 80083c6:	bb09      	cbnz	r1, 800840c <ethernetif_input+0x60>
  struct pbuf *p = NULL;
 80083c8:	2700      	movs	r7, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80083ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80083cc:	2200      	movs	r2, #0
 80083ce:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80083d0:	4282      	cmp	r2, r0
 80083d2:	d14d      	bne.n	8008470 <ethernetif_input+0xc4>
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 80083d4:	6823      	ldr	r3, [r4, #0]
 80083d6:	f241 0114 	movw	r1, #4116	; 0x1014
    heth.RxFrameInfos.SegCount =0;  
 80083da:	2200      	movs	r2, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 80083dc:	5858      	ldr	r0, [r3, r1]
    heth.RxFrameInfos.SegCount =0;  
 80083de:	63a2      	str	r2, [r4, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 80083e0:	0600      	lsls	r0, r0, #24
 80083e2:	d504      	bpl.n	80083ee <ethernetif_input+0x42>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80083e4:	2080      	movs	r0, #128	; 0x80
 80083e6:	5058      	str	r0, [r3, r1]
    heth.Instance->DMARPDR = 0;
 80083e8:	f241 0108 	movw	r1, #4104	; 0x1008
 80083ec:	505a      	str	r2, [r3, r1]

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80083ee:	2f00      	cmp	r7, #0
 80083f0:	d045      	beq.n	800847e <ethernetif_input+0xd2>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80083f2:	9b01      	ldr	r3, [sp, #4]
 80083f4:	4638      	mov	r0, r7
 80083f6:	9901      	ldr	r1, [sp, #4]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	4798      	blx	r3
    
  if (err != ERR_OK)
 80083fc:	2800      	cmp	r0, #0
 80083fe:	d03e      	beq.n	800847e <ethernetif_input+0xd2>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8008400:	4638      	mov	r0, r7
    p = NULL;    
 
  }
}
 8008402:	b003      	add	sp, #12
 8008404:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 8008408:	f7fc bf66 	b.w	80052d8 <pbuf_free>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800840c:	2203      	movs	r2, #3
 800840e:	2004      	movs	r0, #4
 8008410:	f7fc ff8a 	bl	8005328 <pbuf_alloc>
  if (p != NULL)
 8008414:	4607      	mov	r7, r0
 8008416:	2800      	cmp	r0, #0
 8008418:	d0d6      	beq.n	80083c8 <ethernetif_input+0x1c>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800841a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800841e:	4680      	mov	r8, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008420:	f240 5bf4 	movw	fp, #1524	; 0x5f4
      byteslefttocopy = q->len;
 8008424:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8008428:	462e      	mov	r6, r5
      payloadoffset = 0;
 800842a:	f04f 0900 	mov.w	r9, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800842e:	18b5      	adds	r5, r6, r2
 8008430:	9b00      	ldr	r3, [sp, #0]
 8008432:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008436:	455d      	cmp	r5, fp
 8008438:	eb03 0106 	add.w	r1, r3, r6
 800843c:	d808      	bhi.n	8008450 <ethernetif_input+0xa4>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800843e:	4448      	add	r0, r9
 8008440:	f003 f837 	bl	800b4b2 <memcpy>
    for(q = p; q != NULL; q = q->next)
 8008444:	f8d8 8000 	ldr.w	r8, [r8]
 8008448:	f1b8 0f00 	cmp.w	r8, #0
 800844c:	d1ea      	bne.n	8008424 <ethernetif_input+0x78>
 800844e:	e7bc      	b.n	80083ca <ethernetif_input+0x1e>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8008450:	ebab 0606 	sub.w	r6, fp, r6
 8008454:	4448      	add	r0, r9
 8008456:	4632      	mov	r2, r6
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8008458:	44b1      	add	r9, r6
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800845a:	f003 f82a 	bl	800b4b2 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800845e:	f8da a00c 	ldr.w	sl, [sl, #12]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8008462:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        bufferoffset = 0;
 8008466:	2600      	movs	r6, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8008468:	f8da 3008 	ldr.w	r3, [sl, #8]
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	e7de      	b.n	800842e <ethernetif_input+0x82>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8008470:	6819      	ldr	r1, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008472:	3201      	adds	r2, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8008474:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8008478:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	e7a8      	b.n	80083d0 <ethernetif_input+0x24>
}
 800847e:	b003      	add	sp, #12
 8008480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008484:	2000c9a4 	.word	0x2000c9a4

08008488 <ethernetif_init>:
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008488:	2373      	movs	r3, #115	; 0x73
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800848a:	2201      	movs	r2, #1
 800848c:	493a      	ldr	r1, [pc, #232]	; (8008578 <ethernetif_init+0xf0>)
{
 800848e:	b530      	push	{r4, r5, lr}
  netif->name[0] = IFNAME0;
 8008490:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 8008494:	2374      	movs	r3, #116	; 0x74
  heth.Instance = ETH;
 8008496:	4d39      	ldr	r5, [pc, #228]	; (800857c <ethernetif_init+0xf4>)
{
 8008498:	b085      	sub	sp, #20
  netif->name[1] = IFNAME1;
 800849a:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
{
 800849e:	4604      	mov	r4, r0
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80084a0:	4b37      	ldr	r3, [pc, #220]	; (8008580 <ethernetif_init+0xf8>)
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80084a2:	e885 0006 	stmia.w	r5, {r1, r2}
  netif->output = etharp_output;
 80084a6:	6143      	str	r3, [r0, #20]
  MACAddr[1] = 0x80;
 80084a8:	2280      	movs	r2, #128	; 0x80
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80084aa:	4b36      	ldr	r3, [pc, #216]	; (8008584 <ethernetif_init+0xfc>)
  MACAddr[1] = 0x80;
 80084ac:	f88d 2009 	strb.w	r2, [sp, #9]
  MACAddr[2] = 0xE1;
 80084b0:	22e1      	movs	r2, #225	; 0xe1
  netif->linkoutput = low_level_output;
 80084b2:	6183      	str	r3, [r0, #24]
  uint32_t regvalue = 0;
 80084b4:	2300      	movs	r3, #0
  MACAddr[2] = 0xE1;
 80084b6:	f88d 200a 	strb.w	r2, [sp, #10]
  heth.Init.MACAddr = &MACAddr[0];
 80084ba:	aa02      	add	r2, sp, #8
  uint32_t regvalue = 0;
 80084bc:	9301      	str	r3, [sp, #4]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80084be:	4628      	mov	r0, r5
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80084c0:	822b      	strh	r3, [r5, #16]
  MACAddr[0] = 0x00;
 80084c2:	f88d 3008 	strb.w	r3, [sp, #8]
  MACAddr[3] = 0x00;
 80084c6:	f88d 300b 	strb.w	r3, [sp, #11]
  MACAddr[4] = 0x00;
 80084ca:	f88d 300c 	strb.w	r3, [sp, #12]
  MACAddr[5] = 0x00;
 80084ce:	f88d 300d 	strb.w	r3, [sp, #13]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80084d2:	61ab      	str	r3, [r5, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80084d4:	61eb      	str	r3, [r5, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80084d6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  heth.Init.MACAddr = &MACAddr[0];
 80084da:	616a      	str	r2, [r5, #20]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80084dc:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80084de:	f7f9 fced 	bl	8001ebc <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 80084e2:	b928      	cbnz	r0, 80084f0 <ethernetif_init+0x68>
    netif->flags |= NETIF_FLAG_LINK_UP;
 80084e4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 80084e8:	f043 0304 	orr.w	r3, r3, #4
 80084ec:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80084f0:	2304      	movs	r3, #4
 80084f2:	4a25      	ldr	r2, [pc, #148]	; (8008588 <ethernetif_init+0x100>)
 80084f4:	4925      	ldr	r1, [pc, #148]	; (800858c <ethernetif_init+0x104>)
 80084f6:	4821      	ldr	r0, [pc, #132]	; (800857c <ethernetif_init+0xf4>)
 80084f8:	f7f9 fb08 	bl	8001b0c <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80084fc:	4924      	ldr	r1, [pc, #144]	; (8008590 <ethernetif_init+0x108>)
 80084fe:	2304      	movs	r3, #4
 8008500:	4a24      	ldr	r2, [pc, #144]	; (8008594 <ethernetif_init+0x10c>)
 8008502:	481e      	ldr	r0, [pc, #120]	; (800857c <ethernetif_init+0xf4>)
 8008504:	f7f9 fb3f 	bl	8001b86 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008508:	2306      	movs	r3, #6
  HAL_ETH_Start(&heth);
 800850a:	481c      	ldr	r0, [pc, #112]	; (800857c <ethernetif_init+0xf4>)
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800850c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008510:	696b      	ldr	r3, [r5, #20]
 8008512:	781a      	ldrb	r2, [r3, #0]
 8008514:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008518:	785a      	ldrb	r2, [r3, #1]
 800851a:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800851e:	789a      	ldrb	r2, [r3, #2]
 8008520:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008524:	78da      	ldrb	r2, [r3, #3]
 8008526:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800852a:	791a      	ldrb	r2, [r3, #4]
 800852c:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008530:	795b      	ldrb	r3, [r3, #5]
 8008532:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->mtu = 1500;
 8008536:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800853a:	8463      	strh	r3, [r4, #34]	; 0x22
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800853c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8008540:	f043 030a 	orr.w	r3, r3, #10
 8008544:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_Start(&heth);
 8008548:	f7f9 fdb2 	bl	80020b0 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800854c:	aa01      	add	r2, sp, #4
 800854e:	210b      	movs	r1, #11
 8008550:	480a      	ldr	r0, [pc, #40]	; (800857c <ethernetif_init+0xf4>)
 8008552:	f7f9 fc41 	bl	8001dd8 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8008556:	9a01      	ldr	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8008558:	210b      	movs	r1, #11
 800855a:	4808      	ldr	r0, [pc, #32]	; (800857c <ethernetif_init+0xf4>)
  regvalue |= (PHY_ISFR_INT4);
 800855c:	f042 020b 	orr.w	r2, r2, #11
 8008560:	9201      	str	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8008562:	f7f9 fc73 	bl	8001e4c <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8008566:	aa01      	add	r2, sp, #4
 8008568:	210b      	movs	r1, #11
 800856a:	4804      	ldr	r0, [pc, #16]	; (800857c <ethernetif_init+0xf4>)
 800856c:	f7f9 fc34 	bl	8001dd8 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 8008570:	2000      	movs	r0, #0
 8008572:	b005      	add	sp, #20
 8008574:	bd30      	pop	{r4, r5, pc}
 8008576:	bf00      	nop
 8008578:	40028000 	.word	0x40028000
 800857c:	2000c9a4 	.word	0x2000c9a4
 8008580:	08004539 	.word	0x08004539
 8008584:	08008231 	.word	0x08008231
 8008588:	2000c9ec 	.word	0x2000c9ec
 800858c:	2000b0d4 	.word	0x2000b0d4
 8008590:	2000c924 	.word	0x2000c924
 8008594:	2000b154 	.word	0x2000b154

08008598 <sys_now>:
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
  return HAL_GetTick();
 8008598:	f7f8 ba80 	b.w	8000a9c <HAL_GetTick>

0800859c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800859c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* IP addresses initialization */
  IP_ADDRESS[0] = 190;
  IP_ADDRESS[1] = 100;
  IP_ADDRESS[2] = 101;
  IP_ADDRESS[3] = 1;
 800859e:	2301      	movs	r3, #1
  IP_ADDRESS[0] = 190;
 80085a0:	4e1d      	ldr	r6, [pc, #116]	; (8008618 <MX_LWIP_Init+0x7c>)
  NETMASK_ADDRESS[0] = 255;
 80085a2:	4d1e      	ldr	r5, [pc, #120]	; (800861c <MX_LWIP_Init+0x80>)
  IP_ADDRESS[0] = 190;
 80085a4:	20be      	movs	r0, #190	; 0xbe
  IP_ADDRESS[3] = 1;
 80085a6:	70f3      	strb	r3, [r6, #3]
  NETMASK_ADDRESS[0] = 255;
 80085a8:	23ff      	movs	r3, #255	; 0xff
  NETMASK_ADDRESS[1] = 255;
  NETMASK_ADDRESS[2] = 255;
  NETMASK_ADDRESS[3] = 0;
  GATEWAY_ADDRESS[0] = 190;
 80085aa:	4c1d      	ldr	r4, [pc, #116]	; (8008620 <MX_LWIP_Init+0x84>)
  IP_ADDRESS[1] = 100;
 80085ac:	2164      	movs	r1, #100	; 0x64
  IP_ADDRESS[2] = 101;
 80085ae:	2265      	movs	r2, #101	; 0x65
  NETMASK_ADDRESS[0] = 255;
 80085b0:	702b      	strb	r3, [r5, #0]
  NETMASK_ADDRESS[1] = 255;
 80085b2:	706b      	strb	r3, [r5, #1]
  NETMASK_ADDRESS[3] = 0;
 80085b4:	2700      	movs	r7, #0
  NETMASK_ADDRESS[2] = 255;
 80085b6:	70ab      	strb	r3, [r5, #2]
  GATEWAY_ADDRESS[1] = 100;
  GATEWAY_ADDRESS[2] = 101;
  GATEWAY_ADDRESS[3] = 2;
 80085b8:	2302      	movs	r3, #2
{
 80085ba:	b085      	sub	sp, #20
  GATEWAY_ADDRESS[0] = 190;
 80085bc:	7020      	strb	r0, [r4, #0]
  GATEWAY_ADDRESS[1] = 100;
 80085be:	7061      	strb	r1, [r4, #1]
  GATEWAY_ADDRESS[2] = 101;
 80085c0:	70a2      	strb	r2, [r4, #2]
  GATEWAY_ADDRESS[3] = 2;
 80085c2:	70e3      	strb	r3, [r4, #3]
  IP_ADDRESS[0] = 190;
 80085c4:	7030      	strb	r0, [r6, #0]
  IP_ADDRESS[1] = 100;
 80085c6:	7071      	strb	r1, [r6, #1]
  IP_ADDRESS[2] = 101;
 80085c8:	70b2      	strb	r2, [r6, #2]
  NETMASK_ADDRESS[3] = 0;
 80085ca:	70ef      	strb	r7, [r5, #3]
  
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80085cc:	f7fb fd4c 	bl	8004068 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80085d0:	4914      	ldr	r1, [pc, #80]	; (8008624 <MX_LWIP_Init+0x88>)
 80085d2:	6833      	ldr	r3, [r6, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80085d4:	4a14      	ldr	r2, [pc, #80]	; (8008628 <MX_LWIP_Init+0x8c>)
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80085d6:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80085d8:	682b      	ldr	r3, [r5, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80085da:	6820      	ldr	r0, [r4, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80085dc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80085de:	4b13      	ldr	r3, [pc, #76]	; (800862c <MX_LWIP_Init+0x90>)

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80085e0:	4c13      	ldr	r4, [pc, #76]	; (8008630 <MX_LWIP_Init+0x94>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80085e2:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80085e4:	4813      	ldr	r0, [pc, #76]	; (8008634 <MX_LWIP_Init+0x98>)
 80085e6:	9700      	str	r7, [sp, #0]
 80085e8:	9002      	str	r0, [sp, #8]
 80085ea:	4813      	ldr	r0, [pc, #76]	; (8008638 <MX_LWIP_Init+0x9c>)
 80085ec:	9001      	str	r0, [sp, #4]
 80085ee:	4620      	mov	r0, r4
 80085f0:	f7fc fdb0 	bl	8005154 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80085f4:	4620      	mov	r0, r4
 80085f6:	f7fc fdd7 	bl	80051a8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80085fa:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80085fe:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 8008600:	075b      	lsls	r3, r3, #29
 8008602:	d504      	bpl.n	800860e <MX_LWIP_Init+0x72>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008604:	b005      	add	sp, #20
 8008606:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_up(&gnetif);
 800860a:	f7fc bdd3 	b.w	80051b4 <netif_set_up>
}
 800860e:	b005      	add	sp, #20
 8008610:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_down(&gnetif);
 8008614:	f7fc bddd 	b.w	80051d2 <netif_set_down>
 8008618:	2000e1f8 	.word	0x2000e1f8
 800861c:	2000e1f4 	.word	0x2000e1f4
 8008620:	2000e1bc 	.word	0x2000e1bc
 8008624:	2000e1f0 	.word	0x2000e1f0
 8008628:	2000e1fc 	.word	0x2000e1fc
 800862c:	2000e200 	.word	0x2000e200
 8008630:	2000e1c0 	.word	0x2000e1c0
 8008634:	0800814d 	.word	0x0800814d
 8008638:	08008489 	.word	0x08008489

0800863c <MX_LWIP_Process>:
 * Read a received packet from the Ethernet buffers 
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800863c:	b508      	push	{r3, lr}
  ethernetif_input(&gnetif);
 800863e:	4803      	ldr	r0, [pc, #12]	; (800864c <MX_LWIP_Process+0x10>)
 8008640:	f7ff feb4 	bl	80083ac <ethernetif_input>
  /* Handle timeouts */
  #if LWIP_TIMERS && NO_SYS
    sys_check_timeouts();
  #endif
    
}
 8008644:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_check_timeouts();
 8008648:	f7ff bc22 	b.w	8007e90 <sys_check_timeouts>
 800864c:	2000e1c0 	.word	0x2000e1c0

08008650 <adc1_dma_callback0>:
}
 void adc1_dma_callback0(DMA_HandleTypeDef *_hdma)
 {
	 uint16_t nextquad;

	 nextquad = iquad + 2;
 8008650:	4b2e      	ldr	r3, [pc, #184]	; (800870c <adc1_dma_callback0+0xbc>)
 8008652:	8819      	ldrh	r1, [r3, #0]
 8008654:	1c8a      	adds	r2, r1, #2
 8008656:	b292      	uxth	r2, r2
	 if( nextquad >= bufnum ) nextquad = nextquad - bufnum;
 8008658:	2a1f      	cmp	r2, #31
 800865a:	bf88      	it	hi
 800865c:	f1a1 021e 	subhi.w	r2, r1, #30
 {
 8008660:	b5f0      	push	{r4, r5, r6, r7, lr}
	 if( nextquad >= bufnum ) nextquad = nextquad - bufnum;
 8008662:	bf88      	it	hi
 8008664:	b292      	uxthhi	r2, r2
	// while(isReadyToSend==0);
		//  isReadyToSend=0;
	// column=0;
	      //   HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_4);
	        _hdma->Instance->M0AR = MyPayload[nextquad];
 8008666:	6804      	ldr	r4, [r0, #0]
 8008668:	4829      	ldr	r0, [pc, #164]	; (8008710 <adc1_dma_callback0+0xc0>)
		    *(MyPayload[iquad] + wnx) = Row2Bytes[row];
 800866a:	4f2a      	ldr	r7, [pc, #168]	; (8008714 <adc1_dma_callback0+0xc4>)
	        _hdma->Instance->M0AR = MyPayload[nextquad];
 800866c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		    *(MyPayload[iquad] + wnx) = Row2Bytes[row];
 8008670:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8008674:	4928      	ldr	r1, [pc, #160]	; (8008718 <adc1_dma_callback0+0xc8>)
	        _hdma->Instance->M0AR = MyPayload[nextquad];
 8008676:	60e2      	str	r2, [r4, #12]
		    *(MyPayload[iquad] + wnx) = Row2Bytes[row];
 8008678:	f9b1 6000 	ldrsh.w	r6, [r1]
 800867c:	4a27      	ldr	r2, [pc, #156]	; (800871c <adc1_dma_callback0+0xcc>)
 800867e:	5dbe      	ldrb	r6, [r7, r6]
 8008680:	6814      	ldr	r4, [r2, #0]
 8008682:	552e      	strb	r6, [r5, r4]
		    *(MyPayload[iquad] + wnx +1) = Row1Bytes[row];
 8008684:	881c      	ldrh	r4, [r3, #0]
 8008686:	6812      	ldr	r2, [r2, #0]
 8008688:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800868c:	4d24      	ldr	r5, [pc, #144]	; (8008720 <adc1_dma_callback0+0xd0>)
 800868e:	3201      	adds	r2, #1
 8008690:	f9b1 4000 	ldrsh.w	r4, [r1]
 8008694:	5d2c      	ldrb	r4, [r5, r4]

	 if((multiply_count++)>=multiply)
 8008696:	4d23      	ldr	r5, [pc, #140]	; (8008724 <adc1_dma_callback0+0xd4>)
		    *(MyPayload[iquad] + wnx +1) = Row1Bytes[row];
 8008698:	5484      	strb	r4, [r0, r2]
	 if((multiply_count++)>=multiply)
 800869a:	4823      	ldr	r0, [pc, #140]	; (8008728 <adc1_dma_callback0+0xd8>)
 800869c:	6802      	ldr	r2, [r0, #0]
 800869e:	1c54      	adds	r4, r2, #1
 80086a0:	6004      	str	r4, [r0, #0]
 80086a2:	682c      	ldr	r4, [r5, #0]
 80086a4:	42a2      	cmp	r2, r4
 80086a6:	db1b      	blt.n	80086e0 <adc1_dma_callback0+0x90>
	 {

	        *(uint32_t *) Dac_y = yVoltageBuffer[row + wiy];
 80086a8:	4a20      	ldr	r2, [pc, #128]	; (800872c <adc1_dma_callback0+0xdc>)
 80086aa:	4c21      	ldr	r4, [pc, #132]	; (8008730 <adc1_dma_callback0+0xe0>)
 80086ac:	6816      	ldr	r6, [r2, #0]
 80086ae:	6824      	ldr	r4, [r4, #0]
 80086b0:	f9b1 2000 	ldrsh.w	r2, [r1]
 80086b4:	4f1f      	ldr	r7, [pc, #124]	; (8008734 <adc1_dma_callback0+0xe4>)
 80086b6:	4414      	add	r4, r2
 80086b8:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 80086bc:	6034      	str	r4, [r6, #0]

		    multiply_count=1;
 80086be:	2401      	movs	r4, #1
 80086c0:	6004      	str	r4, [r0, #0]
		   //
		    //HAL_DMAEx_ChangeMemory();
		      row++;column=wix*multiply;
 80086c2:	4422      	add	r2, r4
 80086c4:	4c1c      	ldr	r4, [pc, #112]	; (8008738 <adc1_dma_callback0+0xe8>)
 80086c6:	6828      	ldr	r0, [r5, #0]
 80086c8:	b212      	sxth	r2, r2
 80086ca:	6824      	ldr	r4, [r4, #0]
 80086cc:	800a      	strh	r2, [r1, #0]
 80086ce:	4360      	muls	r0, r4
 80086d0:	4c1a      	ldr	r4, [pc, #104]	; (800873c <adc1_dma_callback0+0xec>)
 80086d2:	6020      	str	r0, [r4, #0]
		      if (row >= (wny) )
 80086d4:	481a      	ldr	r0, [pc, #104]	; (8008740 <adc1_dma_callback0+0xf0>)
 80086d6:	6800      	ldr	r0, [r0, #0]
 80086d8:	4282      	cmp	r2, r0
		      		        		      {
		      		        		  		  row = 0;
 80086da:	bfa4      	itt	ge
 80086dc:	2200      	movge	r2, #0
 80086de:	800a      	strhge	r2, [r1, #0]
		//      *(uint32_t *) Dac_y = yVoltageBuffer[row];



		   //   dual++; if(dual>=2) dual=0;
	          iquad++;
 80086e0:	881a      	ldrh	r2, [r3, #0]
		      isReadyToSend=(iquad);
 80086e2:	4918      	ldr	r1, [pc, #96]	; (8008744 <adc1_dma_callback0+0xf4>)
	          iquad++;
 80086e4:	3201      	adds	r2, #1
 80086e6:	b292      	uxth	r2, r2
		       if(iquad>=bufnum) iquad=0;
 80086e8:	2a1f      	cmp	r2, #31
	          iquad++;
 80086ea:	801a      	strh	r2, [r3, #0]
		      isReadyToSend=(iquad);
 80086ec:	600a      	str	r2, [r1, #0]
		       if(iquad>=bufnum) iquad=0;
 80086ee:	bf84      	itt	hi
 80086f0:	2200      	movhi	r2, #0
 80086f2:	801a      	strhhi	r2, [r3, #0]
		        //  DMA_SetConfig((&hdma_adc1), SrcAddress, DstAddress, DataLength);
		     	 	//	if (row <= 33000)
		     	 		{
		     	 			//HAL_DMA_Start_IT(&hdma_adc1, (uint32_t)&(hadc1.Instance->DR), (uint32_t)&ADCBuffer, 512);
		     	 		//	hadc1.Instance->CR2 &= ~((uint32_t)(0x01U << 9U));//dds
		     	 			hadc1.Instance->CR2 &= ~((uint32_t)(0x01U << 8U));//dds
 80086f4:	4b14      	ldr	r3, [pc, #80]	; (8008748 <adc1_dma_callback0+0xf8>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	689a      	ldr	r2, [r3, #8]
 80086fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086fe:	609a      	str	r2, [r3, #8]
		     	 			hadc1.Instance->CR2 |=  ((uint32_t)(0x01U << 8U));//dds
 8008700:	689a      	ldr	r2, [r3, #8]
 8008702:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008706:	609a      	str	r2, [r3, #8]
 8008708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800870a:	bf00      	nop
 800870c:	200003b4 	.word	0x200003b4
 8008710:	2000ee8c 	.word	0x2000ee8c
 8008714:	2000fe30 	.word	0x2000fe30
 8008718:	20010342 	.word	0x20010342
 800871c:	2000001c 	.word	0x2000001c
 8008720:	2000f370 	.word	0x2000f370
 8008724:	20000010 	.word	0x20000010
 8008728:	20000014 	.word	0x20000014
 800872c:	200003a0 	.word	0x200003a0
 8008730:	2000ee84 	.word	0x2000ee84
 8008734:	2000f5f0 	.word	0x2000f5f0
 8008738:	2000ee88 	.word	0x2000ee88
 800873c:	2000ed7c 	.word	0x2000ed7c
 8008740:	20000020 	.word	0x20000020
 8008744:	200003c0 	.word	0x200003c0
 8008748:	2000ef0c 	.word	0x2000ef0c

0800874c <adc1_dma_callback1>:
 }
 void adc1_dma_callback1(DMA_HandleTypeDef *_hdma)
  {
	 uint16_t nextquad;

	 nextquad = iquad + 2;
 800874c:	4b2e      	ldr	r3, [pc, #184]	; (8008808 <adc1_dma_callback1+0xbc>)
 800874e:	8819      	ldrh	r1, [r3, #0]
 8008750:	1c8a      	adds	r2, r1, #2
 8008752:	b292      	uxth	r2, r2
	 if( nextquad >= bufnum ) nextquad = nextquad - bufnum;
 8008754:	2a1f      	cmp	r2, #31
 8008756:	bf88      	it	hi
 8008758:	f1a1 021e 	subhi.w	r2, r1, #30
  {
 800875c:	b5f0      	push	{r4, r5, r6, r7, lr}
	 if( nextquad >= bufnum ) nextquad = nextquad - bufnum;
 800875e:	bf88      	it	hi
 8008760:	b292      	uxthhi	r2, r2
	// while(isReadyToSend==0);
		//  isReadyToSend=0;
	// column=0;
	      //   HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_4);_
	        _hdma->Instance->M1AR = MyPayload[nextquad];
 8008762:	6804      	ldr	r4, [r0, #0]
 8008764:	4829      	ldr	r0, [pc, #164]	; (800880c <adc1_dma_callback1+0xc0>)
		    *(MyPayload[iquad] + wnx) = Row2Bytes[row];
 8008766:	4f2a      	ldr	r7, [pc, #168]	; (8008810 <adc1_dma_callback1+0xc4>)
	        _hdma->Instance->M1AR = MyPayload[nextquad];
 8008768:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		    *(MyPayload[iquad] + wnx) = Row2Bytes[row];
 800876c:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8008770:	4928      	ldr	r1, [pc, #160]	; (8008814 <adc1_dma_callback1+0xc8>)
	        _hdma->Instance->M1AR = MyPayload[nextquad];
 8008772:	6122      	str	r2, [r4, #16]
		    *(MyPayload[iquad] + wnx) = Row2Bytes[row];
 8008774:	f9b1 6000 	ldrsh.w	r6, [r1]
 8008778:	4a27      	ldr	r2, [pc, #156]	; (8008818 <adc1_dma_callback1+0xcc>)
 800877a:	5dbe      	ldrb	r6, [r7, r6]
 800877c:	6814      	ldr	r4, [r2, #0]
 800877e:	552e      	strb	r6, [r5, r4]
		    *(MyPayload[iquad] + wnx +1) = Row1Bytes[row];
 8008780:	881c      	ldrh	r4, [r3, #0]
 8008782:	6812      	ldr	r2, [r2, #0]
 8008784:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008788:	4d24      	ldr	r5, [pc, #144]	; (800881c <adc1_dma_callback1+0xd0>)
 800878a:	3201      	adds	r2, #1
 800878c:	f9b1 4000 	ldrsh.w	r4, [r1]
 8008790:	5d2c      	ldrb	r4, [r5, r4]
	 if((multiply_count++)>=multiply)
 8008792:	4d23      	ldr	r5, [pc, #140]	; (8008820 <adc1_dma_callback1+0xd4>)
		    *(MyPayload[iquad] + wnx +1) = Row1Bytes[row];
 8008794:	5484      	strb	r4, [r0, r2]
	 if((multiply_count++)>=multiply)
 8008796:	4823      	ldr	r0, [pc, #140]	; (8008824 <adc1_dma_callback1+0xd8>)
 8008798:	6802      	ldr	r2, [r0, #0]
 800879a:	1c54      	adds	r4, r2, #1
 800879c:	6004      	str	r4, [r0, #0]
 800879e:	682c      	ldr	r4, [r5, #0]
 80087a0:	42a2      	cmp	r2, r4
 80087a2:	db1b      	blt.n	80087dc <adc1_dma_callback1+0x90>
	 {

	        *(uint32_t *) Dac_y = yVoltageBuffer[row + wiy];
 80087a4:	4a20      	ldr	r2, [pc, #128]	; (8008828 <adc1_dma_callback1+0xdc>)
 80087a6:	4c21      	ldr	r4, [pc, #132]	; (800882c <adc1_dma_callback1+0xe0>)
 80087a8:	6816      	ldr	r6, [r2, #0]
 80087aa:	6824      	ldr	r4, [r4, #0]
 80087ac:	f9b1 2000 	ldrsh.w	r2, [r1]
 80087b0:	4f1f      	ldr	r7, [pc, #124]	; (8008830 <adc1_dma_callback1+0xe4>)
 80087b2:	4414      	add	r4, r2
 80087b4:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 80087b8:	6034      	str	r4, [r6, #0]

		    multiply_count=1;
 80087ba:	2401      	movs	r4, #1
 80087bc:	6004      	str	r4, [r0, #0]
		   //
		    //HAL_DMAEx_ChangeMemory();
		      row++;column=wix*multiply;
 80087be:	4422      	add	r2, r4
 80087c0:	4c1c      	ldr	r4, [pc, #112]	; (8008834 <adc1_dma_callback1+0xe8>)
 80087c2:	6828      	ldr	r0, [r5, #0]
 80087c4:	b212      	sxth	r2, r2
 80087c6:	6824      	ldr	r4, [r4, #0]
 80087c8:	800a      	strh	r2, [r1, #0]
 80087ca:	4360      	muls	r0, r4
 80087cc:	4c1a      	ldr	r4, [pc, #104]	; (8008838 <adc1_dma_callback1+0xec>)
 80087ce:	6020      	str	r0, [r4, #0]
		      if (row >= (wny) )
 80087d0:	481a      	ldr	r0, [pc, #104]	; (800883c <adc1_dma_callback1+0xf0>)
 80087d2:	6800      	ldr	r0, [r0, #0]
 80087d4:	4282      	cmp	r2, r0
		      		        		      {
		      		        		  		  row = 0;
 80087d6:	bfa4      	itt	ge
 80087d8:	2200      	movge	r2, #0
 80087da:	800a      	strhge	r2, [r1, #0]
		//      *(uint32_t *) Dac_y = yVoltageBuffer[row];



		   //   dual++; if(dual>=2) dual=0;
	          iquad++;
 80087dc:	881a      	ldrh	r2, [r3, #0]
		      isReadyToSend=(iquad);
 80087de:	4918      	ldr	r1, [pc, #96]	; (8008840 <adc1_dma_callback1+0xf4>)
	          iquad++;
 80087e0:	3201      	adds	r2, #1
 80087e2:	b292      	uxth	r2, r2
		       if(iquad>=bufnum) iquad=0;
 80087e4:	2a1f      	cmp	r2, #31
	          iquad++;
 80087e6:	801a      	strh	r2, [r3, #0]
		      isReadyToSend=(iquad);
 80087e8:	600a      	str	r2, [r1, #0]
		       if(iquad>=bufnum) iquad=0;
 80087ea:	bf84      	itt	hi
 80087ec:	2200      	movhi	r2, #0
 80087ee:	801a      	strhhi	r2, [r3, #0]
		        //  DMA_SetConfig((&hdma_adc1), SrcAddress, DstAddress, DataLength);
		     	 	//	if (row <= 33000)
		     	 		{
		     	 			//HAL_DMA_Start_IT(&hdma_adc1, (uint32_t)&(hadc1.Instance->DR), (uint32_t)&ADCBuffer, 512);
		     	 		//	hadc1.Instance->CR2 &= ~((uint32_t)(0x01U << 9U));//dds
		     	 			hadc1.Instance->CR2 &= ~((uint32_t)(0x01U << 8U));//dds
 80087f0:	4b14      	ldr	r3, [pc, #80]	; (8008844 <adc1_dma_callback1+0xf8>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	689a      	ldr	r2, [r3, #8]
 80087f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087fa:	609a      	str	r2, [r3, #8]
		     	 			hadc1.Instance->CR2 |=  ((uint32_t)(0x01U << 8U));//dds
 80087fc:	689a      	ldr	r2, [r3, #8]
 80087fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008802:	609a      	str	r2, [r3, #8]
 8008804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008806:	bf00      	nop
 8008808:	200003b4 	.word	0x200003b4
 800880c:	2000ee8c 	.word	0x2000ee8c
 8008810:	2000fe30 	.word	0x2000fe30
 8008814:	20010342 	.word	0x20010342
 8008818:	2000001c 	.word	0x2000001c
 800881c:	2000f370 	.word	0x2000f370
 8008820:	20000010 	.word	0x20000010
 8008824:	20000014 	.word	0x20000014
 8008828:	200003a0 	.word	0x200003a0
 800882c:	2000ee84 	.word	0x2000ee84
 8008830:	2000f5f0 	.word	0x2000f5f0
 8008834:	2000ee88 	.word	0x2000ee88
 8008838:	2000ed7c 	.word	0x2000ed7c
 800883c:	20000020 	.word	0x20000020
 8008840:	200003c0 	.word	0x200003c0
 8008844:	2000ef0c 	.word	0x2000ef0c

08008848 <SystemClock_Config>:
  __HAL_RCC_PWR_CLK_ENABLE();
 8008848:	4b2e      	ldr	r3, [pc, #184]	; (8008904 <SystemClock_Config+0xbc>)
 800884a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800884c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8008850:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8008852:	641a      	str	r2, [r3, #64]	; 0x40
{
 8008854:	b0b5      	sub	sp, #212	; 0xd4
  __HAL_RCC_PWR_CLK_ENABLE();
 8008856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008858:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 800885a:	2504      	movs	r5, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800885c:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 800885e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008866:	4b28      	ldr	r3, [pc, #160]	; (8008908 <SystemClock_Config+0xc0>)
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800886e:	601a      	str	r2, [r3, #0]
 8008870:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008872:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008878:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800887a:	9412      	str	r4, [sp, #72]	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800887c:	9301      	str	r3, [sp, #4]
 800887e:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8008880:	2303      	movs	r3, #3
  RCC_OscInitStruct.PLL.PLLM = 4;
 8008882:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8008884:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008886:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800888a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800888c:	2301      	movs	r3, #1
 800888e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8008890:	2310      	movs	r3, #16
 8008892:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008894:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008898:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 216;
 800889a:	23d8      	movs	r3, #216	; 0xd8
 800889c:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800889e:	f7f9 fd71 	bl	8002384 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80088a2:	f7f9 fd37 	bl	8002314 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80088a6:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80088a8:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80088aa:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80088ac:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80088ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80088b2:	2107      	movs	r1, #7
 80088b4:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80088b6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80088b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80088bc:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80088be:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80088c0:	f7f9 ff4e 	bl	8002760 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART6;
 80088c4:	f44f 6308 	mov.w	r3, #2176	; 0x880
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80088c8:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART6;
 80088ca:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 80088cc:	2308      	movs	r3, #8
 80088ce:	9325      	str	r3, [sp, #148]	; 0x94
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_HSI;
 80088d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088d4:	9329      	str	r3, [sp, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80088d6:	f7fa f825 	bl	8002924 <HAL_RCCEx_PeriphCLKConfig>
  HAL_RCC_EnableCSS();
 80088da:	f7f9 feff 	bl	80026dc <HAL_RCC_EnableCSS>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80088de:	f7f9 ffeb 	bl	80028b8 <HAL_RCC_GetHCLKFreq>
 80088e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80088e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80088ea:	f7f8 fc1d 	bl	8001128 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80088ee:	4628      	mov	r0, r5
 80088f0:	f7f8 fc7a 	bl	80011e8 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80088f4:	4622      	mov	r2, r4
 80088f6:	4621      	mov	r1, r4
 80088f8:	f04f 30ff 	mov.w	r0, #4294967295
 80088fc:	f7f8 fbd0 	bl	80010a0 <HAL_NVIC_SetPriority>
}
 8008900:	b035      	add	sp, #212	; 0xd4
 8008902:	bd30      	pop	{r4, r5, pc}
 8008904:	40023800 	.word	0x40023800
 8008908:	40007000 	.word	0x40007000

0800890c <udp_echoserver_init>:
{
 800890c:	b510      	push	{r4, lr}
   upcb = udp_new();
 800890e:	4c08      	ldr	r4, [pc, #32]	; (8008930 <udp_echoserver_init+0x24>)
 8008910:	f7ff fbf8 	bl	8008104 <udp_new>
 8008914:	6020      	str	r0, [r4, #0]
   if (upcb)
 8008916:	b148      	cbz	r0, 800892c <udp_echoserver_init+0x20>
      err = udp_bind(upcb, IP_ADDR_ANY, UDP_SERVER_PORT);
 8008918:	2217      	movs	r2, #23
 800891a:	4906      	ldr	r1, [pc, #24]	; (8008934 <udp_echoserver_init+0x28>)
 800891c:	f7ff fb5e 	bl	8007fdc <udp_bind>
      if(err == ERR_OK)
 8008920:	b120      	cbz	r0, 800892c <udp_echoserver_init+0x20>
        udp_remove(upcb);
 8008922:	6820      	ldr	r0, [r4, #0]
}
 8008924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        udp_remove(upcb);
 8008928:	f7ff bbd4 	b.w	80080d4 <udp_remove>
 800892c:	bd10      	pop	{r4, pc}
 800892e:	bf00      	nop
 8008930:	2000ed28 	.word	0x2000ed28
 8008934:	0800b890 	.word	0x0800b890

08008938 <ScanISel>:
{
 8008938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800893a:	4c12      	ldr	r4, [pc, #72]	; (8008984 <ScanISel+0x4c>)
{
 800893c:	ad02      	add	r5, sp, #8
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800893e:	2600      	movs	r6, #0
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8008940:	4f11      	ldr	r7, [pc, #68]	; (8008988 <ScanISel+0x50>)
{
 8008942:	f805 0d01 	strb.w	r0, [r5, #-1]!
	HAL_SPI_Init(&hspi3);
 8008946:	4620      	mov	r0, r4
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008948:	6126      	str	r6, [r4, #16]
    hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800894a:	6166      	str	r6, [r4, #20]
	HAL_SPI_Init(&hspi3);
 800894c:	f7fa fc10 	bl	8003170 <HAL_SPI_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8008950:	4632      	mov	r2, r6
 8008952:	2102      	movs	r1, #2
 8008954:	4638      	mov	r0, r7
 8008956:	f7f9 fcd3 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800895a:	2001      	movs	r0, #1
 800895c:	f7f8 f8a4 	bl	8000aa8 <HAL_Delay>
	HAL_SPI_Transmit(&hspi3, &data, 1, 3000);
 8008960:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008964:	4629      	mov	r1, r5
 8008966:	2201      	movs	r2, #1
 8008968:	4620      	mov	r0, r4
 800896a:	f7fa fc56 	bl	800321a <HAL_SPI_Transmit>
	HAL_Delay(1);
 800896e:	2001      	movs	r0, #1
 8008970:	f7f8 f89a 	bl	8000aa8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 8008974:	2201      	movs	r2, #1
 8008976:	2102      	movs	r1, #2
 8008978:	4638      	mov	r0, r7
 800897a:	f7f9 fcc1 	bl	8002300 <HAL_GPIO_WritePin>
}
 800897e:	b003      	add	sp, #12
 8008980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008982:	bf00      	nop
 8008984:	2000edc0 	.word	0x2000edc0
 8008988:	40021400 	.word	0x40021400

0800898c <ScanTrim>:
{
 800898c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008990:	4e17      	ldr	r6, [pc, #92]	; (80089f0 <ScanTrim+0x64>)
	hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008992:	2501      	movs	r5, #1
{
 8008994:	460c      	mov	r4, r1
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008996:	2700      	movs	r7, #0
{
 8008998:	4680      	mov	r8, r0
	HAL_SPI_Init(&hspi3);
 800899a:	4630      	mov	r0, r6
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800899c:	6137      	str	r7, [r6, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800899e:	6175      	str	r5, [r6, #20]
	HAL_SPI_Init(&hspi3);
 80089a0:	f7fa fbe6 	bl	8003170 <HAL_SPI_Init>
	value = (0 << 15) | (dac << 12) | (data & 0x0fff);
 80089a4:	f3c4 010b 	ubfx	r1, r4, #0, #12
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 80089a8:	4c12      	ldr	r4, [pc, #72]	; (80089f4 <ScanTrim+0x68>)
 80089aa:	463a      	mov	r2, r7
	value = (0 << 15) | (dac << 12) | (data & 0x0fff);
 80089ac:	ea41 3108 	orr.w	r1, r1, r8, lsl #12
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 80089b0:	4620      	mov	r0, r4
	value = (0 << 15) | (dac << 12) | (data & 0x0fff);
 80089b2:	b209      	sxth	r1, r1
	Buffer[0] = (uint8_t)(value >> 8);
 80089b4:	f3c1 2307 	ubfx	r3, r1, #8, #8
	Buffer[1] = (uint8_t)value;
 80089b8:	f88d 1005 	strb.w	r1, [sp, #5]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 80089bc:	2104      	movs	r1, #4
	Buffer[0] = (uint8_t)(value >> 8);
 80089be:	f88d 3004 	strb.w	r3, [sp, #4]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 80089c2:	f7f9 fc9d 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80089c6:	4628      	mov	r0, r5
 80089c8:	f7f8 f86e 	bl	8000aa8 <HAL_Delay>
	HAL_SPI_Transmit(&hspi3, Buffer, 2, 3000);
 80089cc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80089d0:	a901      	add	r1, sp, #4
 80089d2:	2202      	movs	r2, #2
 80089d4:	4630      	mov	r0, r6
 80089d6:	f7fa fc20 	bl	800321a <HAL_SPI_Transmit>
	HAL_Delay(1);
 80089da:	4628      	mov	r0, r5
 80089dc:	f7f8 f864 	bl	8000aa8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 80089e0:	462a      	mov	r2, r5
 80089e2:	2104      	movs	r1, #4
 80089e4:	4620      	mov	r0, r4
 80089e6:	f7f9 fc8b 	bl	8002300 <HAL_GPIO_WritePin>
}
 80089ea:	b002      	add	sp, #8
 80089ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f0:	2000edc0 	.word	0x2000edc0
 80089f4:	40021400 	.word	0x40021400

080089f8 <ScanTrimij>:
	uint8_t dac = i*3+j;
 80089f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80089fc:	4408      	add	r0, r1
	ScanTrim(dac, w);
 80089fe:	4611      	mov	r1, r2
 8008a00:	b2c0      	uxtb	r0, r0
 8008a02:	f7ff bfc3 	b.w	800898c <ScanTrim>
	...

08008a08 <ScanZoomRot>:
{
 8008a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008a0a:	2301      	movs	r3, #1
{
 8008a0c:	4605      	mov	r5, r0
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a0e:	2700      	movs	r7, #0
 8008a10:	4832      	ldr	r0, [pc, #200]	; (8008adc <ScanZoomRot+0xd4>)
{
 8008a12:	460c      	mov	r4, r1
 8008a14:	4616      	mov	r6, r2
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a16:	6107      	str	r7, [r0, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008a18:	6143      	str	r3, [r0, #20]
	HAL_SPI_Init(&hspi3);
 8008a1a:	f7fa fba9 	bl	8003170 <HAL_SPI_Init>
	if (device==0) d1=1+3*dac;
 8008a1e:	2d00      	cmp	r5, #0
 8008a20:	d147      	bne.n	8008ab2 <ScanZoomRot+0xaa>
 8008a22:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8008a26:	1c61      	adds	r1, r4, #1
 8008a28:	b2cc      	uxtb	r4, r1
	uint8_t d3=0;
 8008a2a:	4629      	mov	r1, r5
	value = (d3 << 12) | data;
 8008a2c:	b236      	sxth	r6, r6
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8008a2e:	2200      	movs	r2, #0
 8008a30:	482b      	ldr	r0, [pc, #172]	; (8008ae0 <ScanZoomRot+0xd8>)
	value = (d3 << 12) | data;
 8008a32:	ea46 3101 	orr.w	r1, r6, r1, lsl #12
	value = (d2 << 12) | data;
 8008a36:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
	value = (d3 << 12) | data;
 8008a3a:	b209      	sxth	r1, r1
	value = (d2 << 12) | data;
 8008a3c:	b22d      	sxth	r5, r5
	Buffer[0] = (uint8_t)(value >> 8);
 8008a3e:	f3c1 2307 	ubfx	r3, r1, #8, #8
	Buffer[1] = (uint8_t)value;
 8008a42:	f88d 1005 	strb.w	r1, [sp, #5]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8008a46:	2101      	movs	r1, #1
	value = (d1 << 12) | data;
 8008a48:	ea46 3604 	orr.w	r6, r6, r4, lsl #12
	Buffer[0] = (uint8_t)(value >> 8);
 8008a4c:	f88d 3004 	strb.w	r3, [sp, #4]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8008a50:	f7f9 fc56 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8008a54:	2001      	movs	r0, #1
	value = (d1 << 12) | data;
 8008a56:	b236      	sxth	r6, r6
	HAL_Delay(1);
 8008a58:	f7f8 f826 	bl	8000aa8 <HAL_Delay>
	HAL_SPI_Transmit(&hspi3, Buffer, 2, 3000);
 8008a5c:	a901      	add	r1, sp, #4
 8008a5e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008a62:	2202      	movs	r2, #2
 8008a64:	481d      	ldr	r0, [pc, #116]	; (8008adc <ScanZoomRot+0xd4>)
 8008a66:	f7fa fbd8 	bl	800321a <HAL_SPI_Transmit>
	Buffer[0] = (uint8_t)(value >> 8);
 8008a6a:	f3c5 2307 	ubfx	r3, r5, #8, #8
	HAL_SPI_Transmit(&hspi3, Buffer, 2, 3000);
 8008a6e:	a901      	add	r1, sp, #4
 8008a70:	2202      	movs	r2, #2
	Buffer[0] = (uint8_t)(value >> 8);
 8008a72:	f88d 3004 	strb.w	r3, [sp, #4]
	HAL_SPI_Transmit(&hspi3, Buffer, 2, 3000);
 8008a76:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008a7a:	4818      	ldr	r0, [pc, #96]	; (8008adc <ScanZoomRot+0xd4>)
	Buffer[1] = (uint8_t)value;
 8008a7c:	f88d 5005 	strb.w	r5, [sp, #5]
	HAL_SPI_Transmit(&hspi3, Buffer, 2, 3000);
 8008a80:	f7fa fbcb 	bl	800321a <HAL_SPI_Transmit>
	Buffer[0] = (uint8_t)(value >> 8);
 8008a84:	f3c6 2307 	ubfx	r3, r6, #8, #8
	HAL_SPI_Transmit(&hspi3, Buffer, 2, 3000);
 8008a88:	a901      	add	r1, sp, #4
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	4813      	ldr	r0, [pc, #76]	; (8008adc <ScanZoomRot+0xd4>)
	Buffer[0] = (uint8_t)(value >> 8);
 8008a8e:	f88d 3004 	strb.w	r3, [sp, #4]
	HAL_SPI_Transmit(&hspi3, Buffer, 2, 3000);
 8008a92:	f640 33b8 	movw	r3, #3000	; 0xbb8
	Buffer[1] = (uint8_t)value;
 8008a96:	f88d 6005 	strb.w	r6, [sp, #5]
	HAL_SPI_Transmit(&hspi3, Buffer, 2, 3000);
 8008a9a:	f7fa fbbe 	bl	800321a <HAL_SPI_Transmit>
	HAL_Delay(1);
 8008a9e:	2001      	movs	r0, #1
 8008aa0:	f7f8 f802 	bl	8000aa8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	480e      	ldr	r0, [pc, #56]	; (8008ae0 <ScanZoomRot+0xd8>)
 8008aa8:	4611      	mov	r1, r2
 8008aaa:	f7f9 fc29 	bl	8002300 <HAL_GPIO_WritePin>
}
 8008aae:	b003      	add	sp, #12
 8008ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (device==1) d2=1+3*dac;
 8008ab2:	2d01      	cmp	r5, #1
 8008ab4:	d106      	bne.n	8008ac4 <ScanZoomRot+0xbc>
 8008ab6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
	uint8_t d3=0;
 8008aba:	4639      	mov	r1, r7
	else if (device==1) d2=1+3*dac;
 8008abc:	3401      	adds	r4, #1
 8008abe:	b2e5      	uxtb	r5, r4
	uint8_t d1=0;
 8008ac0:	460c      	mov	r4, r1
 8008ac2:	e7b3      	b.n	8008a2c <ScanZoomRot+0x24>
	else if (device==2) d3=1+3*dac;
 8008ac4:	2d02      	cmp	r5, #2
 8008ac6:	d106      	bne.n	8008ad6 <ScanZoomRot+0xce>
 8008ac8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
	uint8_t d2=0;
 8008acc:	463d      	mov	r5, r7
	uint8_t d1=0;
 8008ace:	463c      	mov	r4, r7
	else if (device==2) d3=1+3*dac;
 8008ad0:	3101      	adds	r1, #1
 8008ad2:	b2c9      	uxtb	r1, r1
 8008ad4:	e7aa      	b.n	8008a2c <ScanZoomRot+0x24>
	uint8_t d3=0;
 8008ad6:	4639      	mov	r1, r7
	uint8_t d2=0;
 8008ad8:	463d      	mov	r5, r7
 8008ada:	e7f1      	b.n	8008ac0 <ScanZoomRot+0xb8>
 8008adc:	2000edc0 	.word	0x2000edc0
 8008ae0:	40021400 	.word	0x40021400

08008ae4 <DetMuxSel>:
{
 8008ae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ae6:	4c12      	ldr	r4, [pc, #72]	; (8008b30 <DetMuxSel+0x4c>)
{
 8008ae8:	ad02      	add	r5, sp, #8
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008aea:	2600      	movs	r6, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8008aec:	4f11      	ldr	r7, [pc, #68]	; (8008b34 <DetMuxSel+0x50>)
{
 8008aee:	f805 0d01 	strb.w	r0, [r5, #-1]!
	HAL_SPI_Init(&hspi2);
 8008af2:	4620      	mov	r0, r4
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008af4:	6126      	str	r6, [r4, #16]
    hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008af6:	6166      	str	r6, [r4, #20]
	HAL_SPI_Init(&hspi2);
 8008af8:	f7fa fb3a 	bl	8003170 <HAL_SPI_Init>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8008afc:	4632      	mov	r2, r6
 8008afe:	2102      	movs	r1, #2
 8008b00:	4638      	mov	r0, r7
 8008b02:	f7f9 fbfd 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8008b06:	2001      	movs	r0, #1
 8008b08:	f7f7 ffce 	bl	8000aa8 <HAL_Delay>
	HAL_SPI_Transmit(&hspi2, &data, 1, 3000);
 8008b0c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008b10:	4629      	mov	r1, r5
 8008b12:	2201      	movs	r2, #1
 8008b14:	4620      	mov	r0, r4
 8008b16:	f7fa fb80 	bl	800321a <HAL_SPI_Transmit>
	HAL_Delay(1);
 8008b1a:	2001      	movs	r0, #1
 8008b1c:	f7f7 ffc4 	bl	8000aa8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_SET);
 8008b20:	2201      	movs	r2, #1
 8008b22:	2102      	movs	r1, #2
 8008b24:	4638      	mov	r0, r7
 8008b26:	f7f9 fbeb 	bl	8002300 <HAL_GPIO_WritePin>
}
 8008b2a:	b003      	add	sp, #12
 8008b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	2000e220 	.word	0x2000e220
 8008b34:	40021800 	.word	0x40021800

08008b38 <DetAmpGain>:
{
 8008b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b3a:	4605      	mov	r5, r0
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b3c:	2400      	movs	r4, #0
 8008b3e:	482d      	ldr	r0, [pc, #180]	; (8008bf4 <DetAmpGain+0xbc>)
{
 8008b40:	460f      	mov	r7, r1
 8008b42:	4616      	mov	r6, r2
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b44:	6104      	str	r4, [r0, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008b46:	6144      	str	r4, [r0, #20]
	HAL_SPI_Init(&hspi2);
 8008b48:	f7fa fb12 	bl	8003170 <HAL_SPI_Init>
	if (device==0) d1=2;
 8008b4c:	2d00      	cmp	r5, #0
 8008b4e:	d04d      	beq.n	8008bec <DetAmpGain+0xb4>
	else if (device==1) d2=2;
 8008b50:	2d01      	cmp	r5, #1
 8008b52:	d14d      	bne.n	8008bf0 <DetAmpGain+0xb8>
 8008b54:	2502      	movs	r5, #2
	InstructionByte2 = (d2 << 5) | 1; //write-0000-channel
 8008b56:	016d      	lsls	r5, r5, #5
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8008b58:	2200      	movs	r2, #0
	InstructionByte1 = (d1 << 5) | 1; //write-0000-channel
 8008b5a:	0164      	lsls	r4, r4, #5
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8008b5c:	2101      	movs	r1, #1
	InstructionByte2 = (d2 << 5) | 1; //write-0000-channel
 8008b5e:	f045 0301 	orr.w	r3, r5, #1
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8008b62:	4825      	ldr	r0, [pc, #148]	; (8008bf8 <DetAmpGain+0xc0>)
	Buffer[1] = Channel;
 8008b64:	f88d 7005 	strb.w	r7, [sp, #5]
	Buffer[0] = InstructionByte2;
 8008b68:	f88d 3004 	strb.w	r3, [sp, #4]
	InstructionByte1 = (d1 << 5) | 1; //write-0000-channel
 8008b6c:	f044 0301 	orr.w	r3, r4, #1
	Buffer[3] = Channel;
 8008b70:	f88d 7007 	strb.w	r7, [sp, #7]
	Buffer[2] = InstructionByte1;
 8008b74:	f88d 3006 	strb.w	r3, [sp, #6]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8008b78:	f7f9 fbc2 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8008b7c:	2001      	movs	r0, #1
 8008b7e:	f7f7 ff93 	bl	8000aa8 <HAL_Delay>
	HAL_SPI_Transmit(&hspi2, Buffer, 4, 3000);
 8008b82:	2204      	movs	r2, #4
 8008b84:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008b88:	481a      	ldr	r0, [pc, #104]	; (8008bf4 <DetAmpGain+0xbc>)
 8008b8a:	eb0d 0102 	add.w	r1, sp, r2
 8008b8e:	f7fa fb44 	bl	800321a <HAL_SPI_Transmit>
	HAL_Delay(1);
 8008b92:	2001      	movs	r0, #1
 8008b94:	f7f7 ff88 	bl	8000aa8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET);
 8008b98:	2201      	movs	r2, #1
 8008b9a:	4817      	ldr	r0, [pc, #92]	; (8008bf8 <DetAmpGain+0xc0>)
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	f7f9 fbaf 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8008ba2:	2001      	movs	r0, #1
 8008ba4:	f7f7 ff80 	bl	8000aa8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8008ba8:	2200      	movs	r2, #0
 8008baa:	2101      	movs	r1, #1
 8008bac:	4812      	ldr	r0, [pc, #72]	; (8008bf8 <DetAmpGain+0xc0>)
	Buffer[0] = InstructionByte2;
 8008bae:	f88d 5004 	strb.w	r5, [sp, #4]
	Buffer[1] = Gain;
 8008bb2:	f88d 6005 	strb.w	r6, [sp, #5]
	Buffer[2] = InstructionByte1;
 8008bb6:	f88d 4006 	strb.w	r4, [sp, #6]
	Buffer[3] = Gain;
 8008bba:	f88d 6007 	strb.w	r6, [sp, #7]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8008bbe:	f7f9 fb9f 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8008bc2:	2001      	movs	r0, #1
 8008bc4:	f7f7 ff70 	bl	8000aa8 <HAL_Delay>
	HAL_SPI_Transmit(&hspi2, Buffer, 4, 3000);
 8008bc8:	2204      	movs	r2, #4
 8008bca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008bce:	4809      	ldr	r0, [pc, #36]	; (8008bf4 <DetAmpGain+0xbc>)
 8008bd0:	eb0d 0102 	add.w	r1, sp, r2
 8008bd4:	f7fa fb21 	bl	800321a <HAL_SPI_Transmit>
	HAL_Delay(1);
 8008bd8:	2001      	movs	r0, #1
 8008bda:	f7f7 ff65 	bl	8000aa8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET);
 8008bde:	2201      	movs	r2, #1
 8008be0:	4805      	ldr	r0, [pc, #20]	; (8008bf8 <DetAmpGain+0xc0>)
 8008be2:	4611      	mov	r1, r2
 8008be4:	f7f9 fb8c 	bl	8002300 <HAL_GPIO_WritePin>
}
 8008be8:	b003      	add	sp, #12
 8008bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (device==0) d1=2;
 8008bec:	2402      	movs	r4, #2
 8008bee:	e7b2      	b.n	8008b56 <DetAmpGain+0x1e>
	uint8_t d2=0;
 8008bf0:	4625      	mov	r5, r4
 8008bf2:	e7b0      	b.n	8008b56 <DetAmpGain+0x1e>
 8008bf4:	2000e220 	.word	0x2000e220
 8008bf8:	40021800 	.word	0x40021800

08008bfc <DetTrim>:
{
 8008bfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c00:	4e17      	ldr	r6, [pc, #92]	; (8008c60 <DetTrim+0x64>)
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008c02:	2501      	movs	r5, #1
{
 8008c04:	460c      	mov	r4, r1
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c06:	2700      	movs	r7, #0
{
 8008c08:	4680      	mov	r8, r0
	HAL_SPI_Init(&hspi2);
 8008c0a:	4630      	mov	r0, r6
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c0c:	6137      	str	r7, [r6, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008c0e:	6175      	str	r5, [r6, #20]
	HAL_SPI_Init(&hspi2);
 8008c10:	f7fa faae 	bl	8003170 <HAL_SPI_Init>
	value = (0 << 15) | (dac << 12) | (data & 0x0fff);
 8008c14:	f3c4 010b 	ubfx	r1, r4, #0, #12
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 8008c18:	4c12      	ldr	r4, [pc, #72]	; (8008c64 <DetTrim+0x68>)
 8008c1a:	463a      	mov	r2, r7
	value = (0 << 15) | (dac << 12) | (data & 0x0fff);
 8008c1c:	ea41 3108 	orr.w	r1, r1, r8, lsl #12
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 8008c20:	4620      	mov	r0, r4
	value = (0 << 15) | (dac << 12) | (data & 0x0fff);
 8008c22:	b209      	sxth	r1, r1
	Buffer[0] = (uint8_t)(value >> 8);
 8008c24:	f3c1 2307 	ubfx	r3, r1, #8, #8
	Buffer[1] = (uint8_t)value;
 8008c28:	f88d 1005 	strb.w	r1, [sp, #5]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 8008c2c:	2104      	movs	r1, #4
	Buffer[0] = (uint8_t)(value >> 8);
 8008c2e:	f88d 3004 	strb.w	r3, [sp, #4]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 8008c32:	f7f9 fb65 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8008c36:	4628      	mov	r0, r5
 8008c38:	f7f7 ff36 	bl	8000aa8 <HAL_Delay>
	HAL_SPI_Transmit(&hspi2, Buffer, 2, 3000);
 8008c3c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008c40:	a901      	add	r1, sp, #4
 8008c42:	2202      	movs	r2, #2
 8008c44:	4630      	mov	r0, r6
 8008c46:	f7fa fae8 	bl	800321a <HAL_SPI_Transmit>
	HAL_Delay(1);
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	f7f7 ff2c 	bl	8000aa8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);
 8008c50:	462a      	mov	r2, r5
 8008c52:	2104      	movs	r1, #4
 8008c54:	4620      	mov	r0, r4
 8008c56:	f7f9 fb53 	bl	8002300 <HAL_GPIO_WritePin>
}
 8008c5a:	b002      	add	sp, #8
 8008c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c60:	2000e220 	.word	0x2000e220
 8008c64:	40021800 	.word	0x40021800

08008c68 <DetTrimij>:
	uint8_t dac = i*3+j;
 8008c68:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8008c6c:	4408      	add	r0, r1
	DetTrim(dac, w);
 8008c6e:	4611      	mov	r1, r2
 8008c70:	b2c0      	uxtb	r0, r0
 8008c72:	f7ff bfc3 	b.w	8008bfc <DetTrim>

08008c76 <ScanISel_Init>:
	ScanISel((uint8_t)0);
 8008c76:	2000      	movs	r0, #0
 8008c78:	f7ff be5e 	b.w	8008938 <ScanISel>

08008c7c <ScanZoomRot_Init>:
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c7c:	4803      	ldr	r0, [pc, #12]	; (8008c8c <ScanZoomRot_Init+0x10>)
 8008c7e:	2300      	movs	r3, #0
 8008c80:	6103      	str	r3, [r0, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008c82:	2301      	movs	r3, #1
 8008c84:	6143      	str	r3, [r0, #20]
	HAL_SPI_Init(&hspi3);
 8008c86:	f7fa ba73 	b.w	8003170 <HAL_SPI_Init>
 8008c8a:	bf00      	nop
 8008c8c:	2000edc0 	.word	0x2000edc0

08008c90 <DetMuxSel_Init>:
	MuxSel0_2_data = 0;
 8008c90:	2000      	movs	r0, #0
 8008c92:	4b03      	ldr	r3, [pc, #12]	; (8008ca0 <DetMuxSel_Init+0x10>)
 8008c94:	7018      	strb	r0, [r3, #0]
	MuxSel1_3_data = 0;
 8008c96:	4b03      	ldr	r3, [pc, #12]	; (8008ca4 <DetMuxSel_Init+0x14>)
 8008c98:	7018      	strb	r0, [r3, #0]
	DetMuxSel(data);
 8008c9a:	f7ff bf23 	b.w	8008ae4 <DetMuxSel>
 8008c9e:	bf00      	nop
 8008ca0:	200003a4 	.word	0x200003a4
 8008ca4:	200003a5 	.word	0x200003a5

08008ca8 <DetAmpGain_Init>:
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ca8:	4802      	ldr	r0, [pc, #8]	; (8008cb4 <DetAmpGain_Init+0xc>)
 8008caa:	2300      	movs	r3, #0
 8008cac:	6103      	str	r3, [r0, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008cae:	6143      	str	r3, [r0, #20]
	HAL_SPI_Init(&hspi2);
 8008cb0:	f7fa ba5e 	b.w	8003170 <HAL_SPI_Init>
 8008cb4:	2000e220 	.word	0x2000e220

08008cb8 <DetTrim_Init>:
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008cb8:	4803      	ldr	r0, [pc, #12]	; (8008cc8 <DetTrim_Init+0x10>)
 8008cba:	2300      	movs	r3, #0
 8008cbc:	6103      	str	r3, [r0, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	6143      	str	r3, [r0, #20]
	HAL_SPI_Init(&hspi2);
 8008cc2:	f7fa ba55 	b.w	8003170 <HAL_SPI_Init>
 8008cc6:	bf00      	nop
 8008cc8:	2000e220 	.word	0x2000e220

08008ccc <sendhello2>:
{
 8008ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t aTxBuffer[] = "1";
 8008cce:	2331      	movs	r3, #49	; 0x31
 8008cd0:	ad02      	add	r5, sp, #8
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	2101      	movs	r1, #1
	uint8_t aTxBuffer[] = "1";
 8008cd6:	f825 3d04 	strh.w	r3, [r5, #-4]!
	aRxBuffer[0] = '0';
 8008cda:	2330      	movs	r3, #48	; 0x30
{
 8008cdc:	4604      	mov	r4, r0
	aRxBuffer[0] = '0';
 8008cde:	7003      	strb	r3, [r0, #0]
	aRxBuffer[1] = '\r';
 8008ce0:	230d      	movs	r3, #13
 8008ce2:	7043      	strb	r3, [r0, #1]
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8008ce4:	4814      	ldr	r0, [pc, #80]	; (8008d38 <sendhello2+0x6c>)
 8008ce6:	f7f9 fb0b 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8008cea:	2200      	movs	r2, #0
 8008cec:	2180      	movs	r1, #128	; 0x80
 8008cee:	4812      	ldr	r0, [pc, #72]	; (8008d38 <sendhello2+0x6c>)
 8008cf0:	f7f9 fb06 	bl	8002300 <HAL_GPIO_WritePin>
	if(HAL_UART_Transmit(&huart2, (uint8_t*)aTxBuffer, 1, 3000)== HAL_OK)
 8008cf4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	480f      	ldr	r0, [pc, #60]	; (8008d3c <sendhello2+0x70>)
 8008cfe:	f7fa fe02 	bl	8003906 <HAL_UART_Transmit>
 8008d02:	b938      	cbnz	r0, 8008d14 <sendhello2+0x48>
		HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8008d04:	2201      	movs	r2, #1
 8008d06:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 8008d10:	f7f9 faf6 	bl	8002300 <HAL_GPIO_WritePin>
	if(HAL_UART_Receive(&huart2, (uint8_t *)aRxBuffer, 1,3000)== HAL_OK)
 8008d14:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008d18:	2201      	movs	r2, #1
 8008d1a:	4621      	mov	r1, r4
 8008d1c:	4807      	ldr	r0, [pc, #28]	; (8008d3c <sendhello2+0x70>)
 8008d1e:	f7fa fe4b 	bl	80039b8 <HAL_UART_Receive>
 8008d22:	b938      	cbnz	r0, 8008d34 <sendhello2+0x68>
		HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8008d24:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8008d28:	2201      	movs	r2, #1
 8008d2a:	2180      	movs	r1, #128	; 0x80
 8008d2c:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 8008d30:	f7f9 fae6 	bl	8002300 <HAL_GPIO_WritePin>
}
 8008d34:	b003      	add	sp, #12
 8008d36:	bd30      	pop	{r4, r5, pc}
 8008d38:	40020400 	.word	0x40020400
 8008d3c:	20010030 	.word	0x20010030

08008d40 <sendhello6>:
{
 8008d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t aTxBuffer[] = "1";
 8008d42:	2331      	movs	r3, #49	; 0x31
 8008d44:	ad02      	add	r5, sp, #8
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8008d46:	2200      	movs	r2, #0
 8008d48:	2101      	movs	r1, #1
	uint8_t aTxBuffer[] = "1";
 8008d4a:	f825 3d04 	strh.w	r3, [r5, #-4]!
	aRxBuffer[0] = '0';
 8008d4e:	2330      	movs	r3, #48	; 0x30
{
 8008d50:	4604      	mov	r4, r0
	aRxBuffer[0] = '0';
 8008d52:	7003      	strb	r3, [r0, #0]
	aRxBuffer[1] = '\r';
 8008d54:	230d      	movs	r3, #13
 8008d56:	7043      	strb	r3, [r0, #1]
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8008d58:	4814      	ldr	r0, [pc, #80]	; (8008dac <sendhello6+0x6c>)
 8008d5a:	f7f9 fad1 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8008d5e:	2200      	movs	r2, #0
 8008d60:	2180      	movs	r1, #128	; 0x80
 8008d62:	4812      	ldr	r0, [pc, #72]	; (8008dac <sendhello6+0x6c>)
 8008d64:	f7f9 facc 	bl	8002300 <HAL_GPIO_WritePin>
	if(HAL_UART_Transmit(&huart6, (uint8_t*)aTxBuffer, 1, 3000)== HAL_OK)
 8008d68:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	4629      	mov	r1, r5
 8008d70:	480f      	ldr	r0, [pc, #60]	; (8008db0 <sendhello6+0x70>)
 8008d72:	f7fa fdc8 	bl	8003906 <HAL_UART_Transmit>
 8008d76:	b938      	cbnz	r0, 8008d88 <sendhello6+0x48>
		HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8008d78:	2201      	movs	r2, #1
 8008d7a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8008d7e:	4611      	mov	r1, r2
 8008d80:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 8008d84:	f7f9 fabc 	bl	8002300 <HAL_GPIO_WritePin>
	if(HAL_UART_Receive(&huart6, (uint8_t *)aRxBuffer, 1,3000)== HAL_OK)
 8008d88:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	4621      	mov	r1, r4
 8008d90:	4807      	ldr	r0, [pc, #28]	; (8008db0 <sendhello6+0x70>)
 8008d92:	f7fa fe11 	bl	80039b8 <HAL_UART_Receive>
 8008d96:	b938      	cbnz	r0, 8008da8 <sendhello6+0x68>
		HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8008d98:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	2180      	movs	r1, #128	; 0x80
 8008da0:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 8008da4:	f7f9 faac 	bl	8002300 <HAL_GPIO_WritePin>
}
 8008da8:	b003      	add	sp, #12
 8008daa:	bd30      	pop	{r4, r5, pc}
 8008dac:	40020400 	.word	0x40020400
 8008db0:	2000f300 	.word	0x2000f300

08008db4 <dacrange>:
{
 8008db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (isDacTimerOn == 1) HAL_TIM_Base_Stop_IT(&htim2);
 8008db8:	4d2a      	ldr	r5, [pc, #168]	; (8008e64 <dacrange+0xb0>)
{
 8008dba:	461e      	mov	r6, r3
 8008dbc:	4607      	mov	r7, r0
 8008dbe:	460c      	mov	r4, r1
  if (isDacTimerOn == 1) HAL_TIM_Base_Stop_IT(&htim2);
 8008dc0:	682b      	ldr	r3, [r5, #0]
{
 8008dc2:	4690      	mov	r8, r2
  if (isDacTimerOn == 1) HAL_TIM_Base_Stop_IT(&htim2);
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d102      	bne.n	8008dce <dacrange+0x1a>
 8008dc8:	4827      	ldr	r0, [pc, #156]	; (8008e68 <dacrange+0xb4>)
 8008dca:	f7fa fb1c 	bl	8003406 <HAL_TIM_Base_Stop_IT>
 8008dce:	45a0      	cmp	r8, r4
  if (VoltageAmp > 4095 - Voltage0) VoltageAmp=4095 - Voltage0;
 8008dd0:	f5c4 637f 	rsb	r3, r4, #4080	; 0xff0
 8008dd4:	4640      	mov	r0, r8
 8008dd6:	f103 030f 	add.w	r3, r3, #15
 8008dda:	bf28      	it	cs
 8008ddc:	4620      	movcs	r0, r4
 8008dde:	4298      	cmp	r0, r3
 8008de0:	bfc8      	it	gt
 8008de2:	b298      	uxthgt	r0, r3
  uint16_t VoltageMin = Voltage0 - VoltageAmp;
 8008de4:	1a24      	subs	r4, r4, r0
  float dVoltage = 2.0*VoltageAmp/(size - 1.0);
 8008de6:	f7f7 fb69 	bl	80004bc <__aeabi_i2d>
 8008dea:	4602      	mov	r2, r0
 8008dec:	460b      	mov	r3, r1
 8008dee:	f7f7 fa19 	bl	8000224 <__adddf3>
 8008df2:	4680      	mov	r8, r0
 8008df4:	4689      	mov	r9, r1
 8008df6:	4630      	mov	r0, r6
 8008df8:	f7f7 fb60 	bl	80004bc <__aeabi_i2d>
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	4b1b      	ldr	r3, [pc, #108]	; (8008e6c <dacrange+0xb8>)
  uint16_t VoltageMin = Voltage0 - VoltageAmp;
 8008e00:	b2a4      	uxth	r4, r4
  float dVoltage = 2.0*VoltageAmp/(size - 1.0);
 8008e02:	f7f7 fa0d 	bl	8000220 <__aeabi_dsub>
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	4640      	mov	r0, r8
 8008e0c:	4649      	mov	r1, r9
 8008e0e:	f7f7 fce5 	bl	80007dc <__aeabi_ddiv>
 8008e12:	f7f7 fdcb 	bl	80009ac <__aeabi_d2f>
  for (int i=0; i<size; i++)
 8008e16:	2300      	movs	r3, #0
  float dVoltage = 2.0*VoltageAmp/(size - 1.0);
 8008e18:	ee07 0a10 	vmov	s14, r0
 8008e1c:	f640 72ff 	movw	r2, #4095	; 0xfff
  for (int i=0; i<size; i++)
 8008e20:	42b3      	cmp	r3, r6
 8008e22:	db07      	blt.n	8008e34 <dacrange+0x80>
  if (isDacTimerOn == 1) HAL_TIM_Base_Start_IT(&htim2);
 8008e24:	682b      	ldr	r3, [r5, #0]
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d11a      	bne.n	8008e60 <dacrange+0xac>
 8008e2a:	480f      	ldr	r0, [pc, #60]	; (8008e68 <dacrange+0xb4>)
}
 8008e2c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (isDacTimerOn == 1) HAL_TIM_Base_Start_IT(&htim2);
 8008e30:	f7fa bade 	b.w	80033f0 <HAL_TIM_Base_Start_IT>
	  VoltageBuffer[i] = VoltageMin + dVoltage*i;
 8008e34:	ee06 3a90 	vmov	s13, r3
 8008e38:	ee07 4a90 	vmov	s15, r4
 8008e3c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e44:	eee7 7a26 	vfma.f32	s15, s14, s13
 8008e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e4c:	ee17 1a90 	vmov	r1, s15
 8008e50:	4291      	cmp	r1, r2
 8008e52:	bf94      	ite	ls
 8008e54:	f847 1023 	strls.w	r1, [r7, r3, lsl #2]
 8008e58:	f847 2023 	strhi.w	r2, [r7, r3, lsl #2]
  for (int i=0; i<size; i++)
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	e7df      	b.n	8008e20 <dacrange+0x6c>
 8008e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e64:	200003bc 	.word	0x200003bc
 8008e68:	2000fdf0 	.word	0x2000fdf0
 8008e6c:	3ff00000 	.word	0x3ff00000

08008e70 <SetADC1Channel>:
{
 8008e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	  sConfig.Rank = 1;
 8008e72:	2301      	movs	r3, #1
	  sConfig.SamplingTime = ADC_SAMPLETIME;
 8008e74:	9102      	str	r1, [sp, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008e76:	4669      	mov	r1, sp
	  sConfig.Channel = ADC_CHANNEL;
 8008e78:	9000      	str	r0, [sp, #0]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008e7a:	4803      	ldr	r0, [pc, #12]	; (8008e88 <SetADC1Channel+0x18>)
	  sConfig.Rank = 1;
 8008e7c:	9301      	str	r3, [sp, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008e7e:	f7f7 ffc7 	bl	8000e10 <HAL_ADC_ConfigChannel>
}
 8008e82:	b005      	add	sp, #20
 8008e84:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e88:	2000ef0c 	.word	0x2000ef0c

08008e8c <setsignal>:
{
 8008e8c:	b570      	push	{r4, r5, r6, lr}
 8008e8e:	4615      	mov	r5, r2
 8008e90:	461e      	mov	r6, r3
  if (Port == 0)
 8008e92:	bb60      	cbnz	r0, 8008eee <setsignal+0x62>
	  if (terminalkind == 0) //Direct
 8008e94:	b941      	cbnz	r1, 8008ea8 <setsignal+0x1c>
		  ADC1_CHANNEL = ADC_CHANNEL_6; //PA6 is ADC_IN6
 8008e96:	2006      	movs	r0, #6
		  ADC1_CHANNEL = ADC_CHANNEL_9; //PB1 is ADC_IN9
 8008e98:	4b2e      	ldr	r3, [pc, #184]	; (8008f54 <setsignal+0xc8>)
 8008e9a:	6018      	str	r0, [r3, #0]
		  SetADC1Channel(ADC1_CHANNEL,ADC1_SAMPLETIME);
 8008e9c:	4b2e      	ldr	r3, [pc, #184]	; (8008f58 <setsignal+0xcc>)
 8008e9e:	6819      	ldr	r1, [r3, #0]
 8008ea0:	f7ff ffe6 	bl	8008e70 <SetADC1Channel>
		  isValid=1;
 8008ea4:	2001      	movs	r0, #1
 8008ea6:	bd70      	pop	{r4, r5, r6, pc}
	  else if (terminalkind == 1) //MCP
 8008ea8:	2901      	cmp	r1, #1
 8008eaa:	d10d      	bne.n	8008ec8 <setsignal+0x3c>
		  ADC1_CHANNEL = ADC_CHANNEL_0; //PA0 is ADC_IN0
 8008eac:	2400      	movs	r4, #0
 8008eae:	4b29      	ldr	r3, [pc, #164]	; (8008f54 <setsignal+0xc8>)
 8008eb0:	601c      	str	r4, [r3, #0]
		  SetADC1Channel(ADC1_CHANNEL,ADC1_SAMPLETIME);
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	4b28      	ldr	r3, [pc, #160]	; (8008f58 <setsignal+0xcc>)
 8008eb6:	6819      	ldr	r1, [r3, #0]
 8008eb8:	f7ff ffda 	bl	8008e70 <SetADC1Channel>
		  DetAmpGain(0, terminal, gain);
 8008ebc:	4632      	mov	r2, r6
 8008ebe:	4629      	mov	r1, r5
 8008ec0:	4620      	mov	r0, r4
		  DetAmpGain(1, terminal, gain);
 8008ec2:	f7ff fe39 	bl	8008b38 <DetAmpGain>
 8008ec6:	e7ed      	b.n	8008ea4 <setsignal+0x18>
	  else if (terminalkind == 2) //ADG
 8008ec8:	2902      	cmp	r1, #2
 8008eca:	d141      	bne.n	8008f50 <setsignal+0xc4>
		  ADC1_CHANNEL = ADC_CHANNEL_3; //PA3 is ADC_IN3
 8008ecc:	2003      	movs	r0, #3
 8008ece:	4b21      	ldr	r3, [pc, #132]	; (8008f54 <setsignal+0xc8>)
		  MuxSel0_2_data = (1 << 3) | terminal;
 8008ed0:	f045 0508 	orr.w	r5, r5, #8
		  ADC1_CHANNEL = ADC_CHANNEL_3; //PA3 is ADC_IN3
 8008ed4:	6018      	str	r0, [r3, #0]
		  SetADC1Channel(ADC1_CHANNEL,ADC1_SAMPLETIME);
 8008ed6:	4b20      	ldr	r3, [pc, #128]	; (8008f58 <setsignal+0xcc>)
 8008ed8:	6819      	ldr	r1, [r3, #0]
 8008eda:	f7ff ffc9 	bl	8008e70 <SetADC1Channel>
		  uint8_t data = (MuxSel1_3_data << 4) | MuxSel0_2_data;
 8008ede:	4b1f      	ldr	r3, [pc, #124]	; (8008f5c <setsignal+0xd0>)
 8008ee0:	7818      	ldrb	r0, [r3, #0]
 8008ee2:	ea45 1000 	orr.w	r0, r5, r0, lsl #4
		  DetMuxSel(data);
 8008ee6:	b2c0      	uxtb	r0, r0
		  DetMuxSel(terminal);
 8008ee8:	f7ff fdfc 	bl	8008ae4 <DetMuxSel>
 8008eec:	e7da      	b.n	8008ea4 <setsignal+0x18>
  else if (Port == 1)
 8008eee:	2801      	cmp	r0, #1
 8008ef0:	d111      	bne.n	8008f16 <setsignal+0x8a>
	  if (terminalkind == 0) //Direct
 8008ef2:	bb01      	cbnz	r1, 8008f36 <setsignal+0xaa>
		  ADC1_CHANNEL = ADC_CHANNEL_9; //PB1 is ADC_IN9
 8008ef4:	2009      	movs	r0, #9
 8008ef6:	e7cf      	b.n	8008e98 <setsignal+0xc>
	  else if (terminalkind == 2) //ADG
 8008ef8:	2902      	cmp	r1, #2
 8008efa:	d129      	bne.n	8008f50 <setsignal+0xc4>
		  ADC1_CHANNEL = ADC_CHANNEL_13; //PC3 is ADC_IN13
 8008efc:	200d      	movs	r0, #13
 8008efe:	4b15      	ldr	r3, [pc, #84]	; (8008f54 <setsignal+0xc8>)
 8008f00:	6018      	str	r0, [r3, #0]
		  SetADC1Channel(ADC1_CHANNEL,ADC1_SAMPLETIME);
 8008f02:	4b15      	ldr	r3, [pc, #84]	; (8008f58 <setsignal+0xcc>)
 8008f04:	6819      	ldr	r1, [r3, #0]
 8008f06:	f7ff ffb3 	bl	8008e70 <SetADC1Channel>
		  MuxSel0_2_data = (1 << 3) | terminal;
 8008f0a:	f045 0208 	orr.w	r2, r5, #8
 8008f0e:	4b14      	ldr	r3, [pc, #80]	; (8008f60 <setsignal+0xd4>)
 8008f10:	701a      	strb	r2, [r3, #0]
		  DetMuxSel(terminal);
 8008f12:	4628      	mov	r0, r5
 8008f14:	e7e8      	b.n	8008ee8 <setsignal+0x5c>
  else if (Port == 2)
 8008f16:	2802      	cmp	r0, #2
 8008f18:	d10b      	bne.n	8008f32 <setsignal+0xa6>
	  if (terminalkind == 1) //MCP
 8008f1a:	2901      	cmp	r1, #1
 8008f1c:	d0c6      	beq.n	8008eac <setsignal+0x20>
	  else if (terminalkind == 2) //ADG
 8008f1e:	2902      	cmp	r1, #2
 8008f20:	d116      	bne.n	8008f50 <setsignal+0xc4>
		  ADC1_CHANNEL = ADC_CHANNEL_3; //PA3 is ADC_IN3
 8008f22:	2003      	movs	r0, #3
 8008f24:	4b0b      	ldr	r3, [pc, #44]	; (8008f54 <setsignal+0xc8>)
 8008f26:	6018      	str	r0, [r3, #0]
		  SetADC1Channel(ADC1_CHANNEL,ADC1_SAMPLETIME);
 8008f28:	4b0b      	ldr	r3, [pc, #44]	; (8008f58 <setsignal+0xcc>)
 8008f2a:	6819      	ldr	r1, [r3, #0]
 8008f2c:	f7ff ffa0 	bl	8008e70 <SetADC1Channel>
 8008f30:	e7ef      	b.n	8008f12 <setsignal+0x86>
  else if (Port == 3)
 8008f32:	2803      	cmp	r0, #3
 8008f34:	d10c      	bne.n	8008f50 <setsignal+0xc4>
	  else if (terminalkind == 1) //MCP
 8008f36:	2901      	cmp	r1, #1
 8008f38:	d1de      	bne.n	8008ef8 <setsignal+0x6c>
		  ADC1_CHANNEL = ADC_CHANNEL_10; //PC0 is ADC_IN10
 8008f3a:	200a      	movs	r0, #10
 8008f3c:	4b05      	ldr	r3, [pc, #20]	; (8008f54 <setsignal+0xc8>)
 8008f3e:	6018      	str	r0, [r3, #0]
		  SetADC1Channel(ADC1_CHANNEL,ADC1_SAMPLETIME);
 8008f40:	4b05      	ldr	r3, [pc, #20]	; (8008f58 <setsignal+0xcc>)
 8008f42:	6819      	ldr	r1, [r3, #0]
 8008f44:	f7ff ff94 	bl	8008e70 <SetADC1Channel>
		  DetAmpGain(1, terminal, gain);
 8008f48:	4632      	mov	r2, r6
 8008f4a:	4629      	mov	r1, r5
 8008f4c:	2001      	movs	r0, #1
 8008f4e:	e7b8      	b.n	8008ec2 <setsignal+0x36>
  int isValid=0;
 8008f50:	2000      	movs	r0, #0
}
 8008f52:	bd70      	pop	{r4, r5, r6, pc}
 8008f54:	2000038c 	.word	0x2000038c
 8008f58:	20000390 	.word	0x20000390
 8008f5c:	200003a5 	.word	0x200003a5
 8008f60:	200003a4 	.word	0x200003a4

08008f64 <rotate>:
{
 8008f64:	b538      	push	{r3, r4, r5, lr}
 8008f66:	460c      	mov	r4, r1
	ScanZoomRot(0, 0, a00);
 8008f68:	2100      	movs	r1, #0
{
 8008f6a:	4605      	mov	r5, r0
	ScanZoomRot(0, 0, a00);
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	4608      	mov	r0, r1
 8008f70:	f7ff fd4a 	bl	8008a08 <ScanZoomRot>
	ScanZoomRot(1, 0, a10);
 8008f74:	4622      	mov	r2, r4
 8008f76:	2100      	movs	r1, #0
 8008f78:	2001      	movs	r0, #1
 8008f7a:	f7ff fd45 	bl	8008a08 <ScanZoomRot>
	ScanZoomRot(0, 1, a00);
 8008f7e:	462a      	mov	r2, r5
 8008f80:	2101      	movs	r1, #1
 8008f82:	2000      	movs	r0, #0
 8008f84:	f7ff fd40 	bl	8008a08 <ScanZoomRot>
	ScanZoomRot(1, 1, a10);
 8008f88:	2101      	movs	r1, #1
 8008f8a:	4622      	mov	r2, r4
 8008f8c:	4608      	mov	r0, r1
}
 8008f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ScanZoomRot(1, 1, a10);
 8008f92:	f7ff bd39 	b.w	8008a08 <ScanZoomRot>

08008f96 <zoom>:
{
 8008f96:	b510      	push	{r4, lr}
 8008f98:	460c      	mov	r4, r1
	ScanZoomRot(2, 0, cx);
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	2002      	movs	r0, #2
 8008fa0:	f7ff fd32 	bl	8008a08 <ScanZoomRot>
	ScanZoomRot(2, 1, cy);
 8008fa4:	4622      	mov	r2, r4
 8008fa6:	2101      	movs	r1, #1
 8008fa8:	2002      	movs	r0, #2
}
 8008faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ScanZoomRot(2, 1, cy);
 8008fae:	f7ff bd2b 	b.w	8008a08 <ScanZoomRot>
	...

08008fb4 <FreeReceiveBuf2>:
{
 8008fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fb6:	241a      	movs	r4, #26
		HAL_UART_Receive(&huart2, &receivedchar, 1,1);
 8008fb8:	4d05      	ldr	r5, [pc, #20]	; (8008fd0 <FreeReceiveBuf2+0x1c>)
 8008fba:	2301      	movs	r3, #1
 8008fbc:	f10d 0107 	add.w	r1, sp, #7
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	f7fa fcf8 	bl	80039b8 <HAL_UART_Receive>
	for (int i=0; i<26; i++)
 8008fc8:	3c01      	subs	r4, #1
 8008fca:	d1f6      	bne.n	8008fba <FreeReceiveBuf2+0x6>
}
 8008fcc:	b003      	add	sp, #12
 8008fce:	bd30      	pop	{r4, r5, pc}
 8008fd0:	20010030 	.word	0x20010030

08008fd4 <FreeReceiveBuf6>:
{
 8008fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fd6:	241a      	movs	r4, #26
		HAL_UART_Receive(&huart6, &receivedchar, 1,1);
 8008fd8:	4d05      	ldr	r5, [pc, #20]	; (8008ff0 <FreeReceiveBuf6+0x1c>)
 8008fda:	2301      	movs	r3, #1
 8008fdc:	f10d 0107 	add.w	r1, sp, #7
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	f7fa fce8 	bl	80039b8 <HAL_UART_Receive>
	for (int i=0; i<26; i++)
 8008fe8:	3c01      	subs	r4, #1
 8008fea:	d1f6      	bne.n	8008fda <FreeReceiveBuf6+0x6>
}
 8008fec:	b003      	add	sp, #12
 8008fee:	bd30      	pop	{r4, r5, pc}
 8008ff0:	2000f300 	.word	0x2000f300

08008ff4 <HAL_UART_RxCpltCallback>:
		if (flag != 1)
 8008ff4:	4912      	ldr	r1, [pc, #72]	; (8009040 <HAL_UART_RxCpltCallback+0x4c>)
{
 8008ff6:	b538      	push	{r3, r4, r5, lr}
		if (flag != 1)
 8008ff8:	680b      	ldr	r3, [r1, #0]
{
 8008ffa:	4604      	mov	r4, r0
		if (flag != 1)
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d012      	beq.n	8009026 <HAL_UART_RxCpltCallback+0x32>
			if (uRxBuffer[0]=='\r')
 8009000:	4b10      	ldr	r3, [pc, #64]	; (8009044 <HAL_UART_RxCpltCallback+0x50>)
 8009002:	781a      	ldrb	r2, [r3, #0]
 8009004:	4b10      	ldr	r3, [pc, #64]	; (8009048 <HAL_UART_RxCpltCallback+0x54>)
 8009006:	2a0d      	cmp	r2, #13
 8009008:	d114      	bne.n	8009034 <HAL_UART_RxCpltCallback+0x40>
				if (cci > 0)
 800900a:	6818      	ldr	r0, [r3, #0]
 800900c:	2800      	cmp	r0, #0
 800900e:	dd0a      	ble.n	8009026 <HAL_UART_RxCpltCallback+0x32>
					cc[cci] = '\r';
 8009010:	4d0e      	ldr	r5, [pc, #56]	; (800904c <HAL_UART_RxCpltCallback+0x58>)
 8009012:	542a      	strb	r2, [r5, r0]
					flag = 1;
 8009014:	2201      	movs	r2, #1
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 8009016:	480e      	ldr	r0, [pc, #56]	; (8009050 <HAL_UART_RxCpltCallback+0x5c>)
					flag = 1;
 8009018:	600a      	str	r2, [r1, #0]
					cci=0;
 800901a:	2100      	movs	r1, #0
 800901c:	6019      	str	r1, [r3, #0]
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 800901e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009022:	f7f9 f96d 	bl	8002300 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(UartHandle, (uint8_t*)uRxBuffer, 1);
 8009026:	4620      	mov	r0, r4
 8009028:	2201      	movs	r2, #1
 800902a:	4906      	ldr	r1, [pc, #24]	; (8009044 <HAL_UART_RxCpltCallback+0x50>)
}
 800902c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_UART_Receive_IT(UartHandle, (uint8_t*)uRxBuffer, 1);
 8009030:	f7fa bbf4 	b.w	800381c <HAL_UART_Receive_IT>
			    cc[cci++] = uRxBuffer[0];
 8009034:	6819      	ldr	r1, [r3, #0]
 8009036:	1c48      	adds	r0, r1, #1
 8009038:	6018      	str	r0, [r3, #0]
 800903a:	4b04      	ldr	r3, [pc, #16]	; (800904c <HAL_UART_RxCpltCallback+0x58>)
 800903c:	545a      	strb	r2, [r3, r1]
 800903e:	e7f2      	b.n	8009026 <HAL_UART_RxCpltCallback+0x32>
 8009040:	200003ac 	.word	0x200003ac
 8009044:	20010344 	.word	0x20010344
 8009048:	200003a8 	.word	0x200003a8
 800904c:	2000e204 	.word	0x2000e204
 8009050:	40021400 	.word	0x40021400

08009054 <HAL_ADC_ConvCpltCallback>:
{
 8009054:	4770      	bx	lr
	...

08009058 <HAL_ADC_ErrorCallback>:
	htim4.Instance->CNT=1;
 8009058:	4b04      	ldr	r3, [pc, #16]	; (800906c <HAL_ADC_ErrorCallback+0x14>)
 800905a:	2201      	movs	r2, #1
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	625a      	str	r2, [r3, #36]	; 0x24
	    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009060:	f06f 0220 	mvn.w	r2, #32
 8009064:	6803      	ldr	r3, [r0, #0]
 8009066:	601a      	str	r2, [r3, #0]
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	2000e2e8 	.word	0x2000e2e8

08009070 <windowset>:
		     	 //		else row=0;

		     	 		//HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
  }
 void windowset(int ix,int iy,int nx,int ny)
 {
 8009070:	b513      	push	{r0, r1, r4, lr}
	 //htim4.Instance->CR1 &= ~(TIM_CR1_CEN);
	 	 			//HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1); dactest

	 	 			//__HAL_DMA_DISABLE_IT(&hdma_adc1);
	 	 			//__HAL_DMA_DISABLE_IT(&hdma_adc1);
	 	 			HAL_DMA_Abort_IT(&hdma_adc1);
 8009072:	4c1c      	ldr	r4, [pc, #112]	; (80090e4 <windowset+0x74>)
 8009074:	4620      	mov	r0, r4
 8009076:	f7f8 f9cf 	bl	8001418 <HAL_DMA_Abort_IT>
	 	 			htim4.Instance->CNT=1;
 800907a:	4b1b      	ldr	r3, [pc, #108]	; (80090e8 <windowset+0x78>)
	 	 			row=0;
 800907c:	2100      	movs	r1, #0
	 	 			//HAL_DMA_RegisterCallback(&hdma_adc1,HAL_DMA_XFER_M1CPLT_CB_ID, adc1_dma_callback1);

	 	 			//HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, xVoltageBuffer+(wix), wnx, DAC_ALIGN_12B_R);//dactest
	 	 			column=wix*multiply;

	 	 			HAL_DMAEx_MultiBufferStart_IT(&hdma_adc1, (uint32_t)&(hadc1.Instance->DR), (uint32_t)(MyPayload[0]),(uint32_t)(MyPayload[1]), wnx);
 800907e:	4620      	mov	r0, r4
	 	 			htim4.Instance->CNT=1;
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	2301      	movs	r3, #1
 8009084:	6253      	str	r3, [r2, #36]	; 0x24
	 	 			row=0;
 8009086:	4a19      	ldr	r2, [pc, #100]	; (80090ec <windowset+0x7c>)
 8009088:	8011      	strh	r1, [r2, #0]
	 	 			multiply_count = 1;
 800908a:	4a19      	ldr	r2, [pc, #100]	; (80090f0 <windowset+0x80>)
 800908c:	6013      	str	r3, [r2, #0]
	 	 			hadc1.Instance->CR2 &= ~((uint32_t)(0x01U << 8U));//dds
 800908e:	4b19      	ldr	r3, [pc, #100]	; (80090f4 <windowset+0x84>)
	 	 			column=wix*multiply;
 8009090:	4a19      	ldr	r2, [pc, #100]	; (80090f8 <windowset+0x88>)
	 	 			hadc1.Instance->CR2 &= ~((uint32_t)(0x01U << 8U));//dds
 8009092:	6819      	ldr	r1, [r3, #0]
	 	 			column=wix*multiply;
 8009094:	6812      	ldr	r2, [r2, #0]
	 	 			hadc1.Instance->CR2 &= ~((uint32_t)(0x01U << 8U));//dds
 8009096:	688b      	ldr	r3, [r1, #8]
	 	 			HAL_DMAEx_MultiBufferStart_IT(&hdma_adc1, (uint32_t)&(hadc1.Instance->DR), (uint32_t)(MyPayload[0]),(uint32_t)(MyPayload[1]), wnx);
 8009098:	314c      	adds	r1, #76	; 0x4c
	 	 			hadc1.Instance->CR2 &= ~((uint32_t)(0x01U << 8U));//dds
 800909a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800909e:	f841 3c44 	str.w	r3, [r1, #-68]
	 	 			hadc1.Instance->CR2 &= ~((uint32_t)(0x01U << 9U));//dds
 80090a2:	f851 3c44 	ldr.w	r3, [r1, #-68]
 80090a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090aa:	f841 3c44 	str.w	r3, [r1, #-68]
	 	 			hadc1.Instance->CR2 &= ~((uint32_t)(0x01U << 10U));//EOCS
 80090ae:	f851 3c44 	ldr.w	r3, [r1, #-68]
 80090b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090b6:	f841 3c44 	str.w	r3, [r1, #-68]
	 	 			hadc1.Instance->CR2 |= ((uint32_t)(0x01U << 8U));//dma
 80090ba:	f851 3c44 	ldr.w	r3, [r1, #-68]
 80090be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090c2:	f841 3c44 	str.w	r3, [r1, #-68]
	 	 			column=wix*multiply;
 80090c6:	4b0d      	ldr	r3, [pc, #52]	; (80090fc <windowset+0x8c>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4353      	muls	r3, r2
 80090cc:	4a0c      	ldr	r2, [pc, #48]	; (8009100 <windowset+0x90>)
 80090ce:	6013      	str	r3, [r2, #0]
	 	 			HAL_DMAEx_MultiBufferStart_IT(&hdma_adc1, (uint32_t)&(hadc1.Instance->DR), (uint32_t)(MyPayload[0]),(uint32_t)(MyPayload[1]), wnx);
 80090d0:	4b0c      	ldr	r3, [pc, #48]	; (8009104 <windowset+0x94>)
 80090d2:	4a0d      	ldr	r2, [pc, #52]	; (8009108 <windowset+0x98>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	ca0c      	ldmia	r2, {r2, r3}
 80090da:	f7f8 fa95 	bl	8001608 <HAL_DMAEx_MultiBufferStart_IT>

 }
 80090de:	b002      	add	sp, #8
 80090e0:	bd10      	pop	{r4, pc}
 80090e2:	bf00      	nop
 80090e4:	2000f054 	.word	0x2000f054
 80090e8:	2000e2e8 	.word	0x2000e2e8
 80090ec:	20010342 	.word	0x20010342
 80090f0:	20000014 	.word	0x20000014
 80090f4:	2000ef0c 	.word	0x2000ef0c
 80090f8:	2000ee88 	.word	0x2000ee88
 80090fc:	20000010 	.word	0x20000010
 8009100:	2000ed7c 	.word	0x2000ed7c
 8009104:	2000001c 	.word	0x2000001c
 8009108:	2000ee8c 	.word	0x2000ee8c

0800910c <main>:
{
 800910c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009110:	b0a3      	sub	sp, #140	; 0x8c
  /* Disables the MPU */
  HAL_MPU_Disable();
    /**Initializes and configures the Region and the memory to be protected 
    */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8009112:	2400      	movs	r4, #0
  HAL_MPU_Disable();
 8009114:	f7f8 f81e 	bl	8001154 <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0x20010000;
 8009118:	4ace      	ldr	r2, [pc, #824]	; (8009454 <main+0x348>)
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800911a:	ae17      	add	r6, sp, #92	; 0x5c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800911c:	2301      	movs	r3, #1
  MPU_InitStruct.BaseAddress = 0x20010000;
 800911e:	9218      	str	r2, [sp, #96]	; 0x60
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8009120:	2207      	movs	r2, #7
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8009122:	4630      	mov	r0, r6
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8009124:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8009128:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800912c:	2203      	movs	r2, #3
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800912e:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8009132:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8009136:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800913a:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
  MPU_InitStruct.SubRegionDisable = 0x0;
 800913e:	f88d 4065 	strb.w	r4, [sp, #101]	; 0x65
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8009142:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8009146:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800914a:	f88d 406a 	strb.w	r4, [sp, #106]	; 0x6a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800914e:	f7f8 f823 	bl	8001198 <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8009152:	2004      	movs	r0, #4
 8009154:	f7f8 f80e 	bl	8001174 <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 8009158:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800915c:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8009160:	4bbd      	ldr	r3, [pc, #756]	; (8009458 <main+0x34c>)
 8009162:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8009166:	695a      	ldr	r2, [r3, #20]
 8009168:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800916c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800916e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009172:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8009176:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800917a:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800917e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009182:	f643 77e0 	movw	r7, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8009186:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800918a:	f3c2 324e 	ubfx	r2, r2, #13, #15
 800918e:	07a5      	lsls	r5, r4, #30
 8009190:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009192:	ea02 0c07 	and.w	ip, r2, r7
 8009196:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8009198:	4621      	mov	r1, r4
      } while (ways--);
 800919a:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800919c:	ea40 0e0c 	orr.w	lr, r0, ip
 80091a0:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
      } while (ways--);
 80091a4:	f1b1 3fff 	cmp.w	r1, #4294967295
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80091a8:	f8c3 e260 	str.w	lr, [r3, #608]	; 0x260
      } while (ways--);
 80091ac:	d1f5      	bne.n	800919a <main+0x8e>
 80091ae:	3a20      	subs	r2, #32
    } while(sets--);
 80091b0:	f112 0f20 	cmn.w	r2, #32
 80091b4:	d1ed      	bne.n	8009192 <main+0x86>
 80091b6:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80091ba:	695a      	ldr	r2, [r3, #20]
 80091bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80091c0:	615a      	str	r2, [r3, #20]
 80091c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80091c6:	f3bf 8f6f 	isb	sy
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80091ca:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 8009484 <main+0x378>
  HAL_Init();
 80091ce:	f7f7 fc51 	bl	8000a74 <HAL_Init>
  SystemClock_Config();
 80091d2:	f7ff fb39 	bl	8008848 <SystemClock_Config>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80091d6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80091d8:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80091dc:	213c      	movs	r1, #60	; 0x3c
 80091de:	489f      	ldr	r0, [pc, #636]	; (800945c <main+0x350>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091e0:	2400      	movs	r4, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80091e2:	f043 0310 	orr.w	r3, r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80091e6:	2501      	movs	r5, #1
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80091e8:	2707      	movs	r7, #7
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091ea:	f04f 0a02 	mov.w	sl, #2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80091ee:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091f2:	f04f 0803 	mov.w	r8, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80091f6:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80091fa:	f8df b28c 	ldr.w	fp, [pc, #652]	; 8009488 <main+0x37c>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80091fe:	f003 0310 	and.w	r3, r3, #16
 8009202:	930a      	str	r3, [sp, #40]	; 0x28
 8009204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009206:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 800920a:	f043 0304 	orr.w	r3, r3, #4
 800920e:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 8009212:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8009216:	f003 0304 	and.w	r3, r3, #4
 800921a:	930b      	str	r3, [sp, #44]	; 0x2c
 800921c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800921e:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8009222:	f043 0320 	orr.w	r3, r3, #32
 8009226:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 800922a:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 800922e:	f003 0320 	and.w	r3, r3, #32
 8009232:	930c      	str	r3, [sp, #48]	; 0x30
 8009234:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009236:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 800923a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800923e:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 8009242:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8009246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800924a:	930d      	str	r3, [sp, #52]	; 0x34
 800924c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800924e:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8009252:	f043 0301 	orr.w	r3, r3, #1
 8009256:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 800925a:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 800925e:	f003 0301 	and.w	r3, r3, #1
 8009262:	930e      	str	r3, [sp, #56]	; 0x38
 8009264:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009266:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 800926a:	f043 0302 	orr.w	r3, r3, #2
 800926e:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 8009272:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8009276:	f003 0302 	and.w	r3, r3, #2
 800927a:	930f      	str	r3, [sp, #60]	; 0x3c
 800927c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800927e:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8009282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009286:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 800928a:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 800928e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009292:	9310      	str	r3, [sp, #64]	; 0x40
 8009294:	9b10      	ldr	r3, [sp, #64]	; 0x40
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009296:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 800929a:	f043 0308 	orr.w	r3, r3, #8
 800929e:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 80092a2:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 80092a6:	f003 0308 	and.w	r3, r3, #8
 80092aa:	9311      	str	r3, [sp, #68]	; 0x44
 80092ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80092ae:	f7f9 f827 	bl	8002300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 80092b2:	2200      	movs	r2, #0
 80092b4:	f240 4107 	movw	r1, #1031	; 0x407
 80092b8:	4869      	ldr	r0, [pc, #420]	; (8009460 <main+0x354>)
 80092ba:	f7f9 f821 	bl	8002300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_7, GPIO_PIN_RESET);
 80092be:	2200      	movs	r2, #0
 80092c0:	2180      	movs	r1, #128	; 0x80
 80092c2:	4868      	ldr	r0, [pc, #416]	; (8009464 <main+0x358>)
 80092c4:	f7f9 f81c 	bl	8002300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6, GPIO_PIN_RESET);
 80092c8:	2200      	movs	r2, #0
 80092ca:	2147      	movs	r1, #71	; 0x47
 80092cc:	4866      	ldr	r0, [pc, #408]	; (8009468 <main+0x35c>)
 80092ce:	f7f9 f817 	bl	8002300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80092d2:	2200      	movs	r2, #0
 80092d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80092d8:	4864      	ldr	r0, [pc, #400]	; (800946c <main+0x360>)
 80092da:	f7f9 f811 	bl	8002300 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80092de:	233c      	movs	r3, #60	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80092e0:	4631      	mov	r1, r6
 80092e2:	485e      	ldr	r0, [pc, #376]	; (800945c <main+0x350>)
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80092e4:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80092e6:	9518      	str	r5, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092e8:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092ea:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80092ec:	f7f8 ff1e 	bl	800212c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80092f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80092f4:	4631      	mov	r1, r6
 80092f6:	485e      	ldr	r0, [pc, #376]	; (8009470 <main+0x364>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80092f8:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80092fa:	4b5e      	ldr	r3, [pc, #376]	; (8009474 <main+0x368>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092fc:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80092fe:	9318      	str	r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009300:	f7f8 ff14 	bl	800212c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10;
 8009304:	f240 4307 	movw	r3, #1031	; 0x407
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009308:	4631      	mov	r1, r6
 800930a:	4855      	ldr	r0, [pc, #340]	; (8009460 <main+0x354>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10;
 800930c:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800930e:	9518      	str	r5, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009310:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009312:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009314:	f7f8 ff0a 	bl	800212c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_7;
 8009318:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800931a:	4631      	mov	r1, r6
 800931c:	4851      	ldr	r0, [pc, #324]	; (8009464 <main+0x358>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_7;
 800931e:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009320:	9518      	str	r5, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009322:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009324:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009326:	f7f8 ff01 	bl	800212c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 800932a:	2347      	movs	r3, #71	; 0x47
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800932c:	4631      	mov	r1, r6
 800932e:	484e      	ldr	r0, [pc, #312]	; (8009468 <main+0x35c>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 8009330:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009332:	9518      	str	r5, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009334:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009336:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009338:	f7f8 fef8 	bl	800212c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800933c:	f44f 7340 	mov.w	r3, #768	; 0x300
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009340:	4631      	mov	r1, r6
 8009342:	484d      	ldr	r0, [pc, #308]	; (8009478 <main+0x36c>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8009344:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009346:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800934a:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800934c:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009350:	971b      	str	r7, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009352:	f7f8 feeb 	bl	800212c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8009356:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009358:	4631      	mov	r1, r6
 800935a:	4843      	ldr	r0, [pc, #268]	; (8009468 <main+0x35c>)
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800935c:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800935e:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009360:	9419      	str	r4, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009362:	f7f8 fee3 	bl	800212c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8009366:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800936a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800936e:	4631      	mov	r1, r6
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009370:	f44f 7800 	mov.w	r8, #512	; 0x200
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8009374:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009376:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009378:	483c      	ldr	r0, [pc, #240]	; (800946c <main+0x360>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800937a:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800937c:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009380:	9419      	str	r4, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009382:	f7f8 fed3 	bl	800212c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009386:	4631      	mov	r1, r6
 8009388:	4838      	ldr	r0, [pc, #224]	; (800946c <main+0x360>)
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800938a:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800938e:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009390:	9419      	str	r4, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009392:	f7f8 fecb 	bl	800212c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8009396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800939a:	4631      	mov	r1, r6
 800939c:	4833      	ldr	r0, [pc, #204]	; (800946c <main+0x360>)
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800939e:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80093a0:	9518      	str	r5, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093a2:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093a4:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093a6:	f7f8 fec1 	bl	800212c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80093aa:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80093ae:	4622      	mov	r2, r4
 80093b0:	4621      	mov	r1, r4
 80093b2:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 80093b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  hadc2.Instance = ADC2;
 80093b8:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 800948c <main+0x380>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80093bc:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 80093c0:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 80093c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093c8:	9308      	str	r3, [sp, #32]
 80093ca:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80093cc:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 80093d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80093d4:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 80093d8:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80093dc:	f44f 3980 	mov.w	r9, #65536	; 0x10000
  __HAL_RCC_DMA2_CLK_ENABLE();
 80093e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093e4:	9309      	str	r3, [sp, #36]	; 0x24
 80093e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80093e8:	f7f7 fe5a 	bl	80010a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80093ec:	2010      	movs	r0, #16
 80093ee:	f7f7 fe8f 	bl	8001110 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80093f2:	4622      	mov	r2, r4
 80093f4:	4621      	mov	r1, r4
 80093f6:	2011      	movs	r0, #17
 80093f8:	f7f7 fe52 	bl	80010a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80093fc:	2011      	movs	r0, #17
 80093fe:	f7f7 fe87 	bl	8001110 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8009402:	4621      	mov	r1, r4
 8009404:	4622      	mov	r2, r4
 8009406:	2038      	movs	r0, #56	; 0x38
 8009408:	f7f7 fe4a 	bl	80010a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800940c:	2038      	movs	r0, #56	; 0x38
 800940e:	f7f7 fe7f 	bl	8001110 <HAL_NVIC_EnableIRQ>
  MX_LWIP_Init();
 8009412:	f7ff f8c3 	bl	800859c <MX_LWIP_Init>
  hadc1.Instance = ADC1;
 8009416:	4b19      	ldr	r3, [pc, #100]	; (800947c <main+0x370>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8009418:	4a19      	ldr	r2, [pc, #100]	; (8009480 <main+0x374>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800941a:	4618      	mov	r0, r3
  hadc1.Init.ScanConvMode = DISABLE;
 800941c:	611c      	str	r4, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800941e:	619c      	str	r4, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009420:	621c      	str	r4, [r3, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009422:	60dc      	str	r4, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8009424:	61dd      	str	r5, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8009426:	631c      	str	r4, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009428:	615d      	str	r5, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800942a:	9302      	str	r3, [sp, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800942c:	e883 0204 	stmia.w	r3, {r2, r9}
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8009430:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009434:	609a      	str	r2, [r3, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8009436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800943a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_TRGO;
 800943c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8009440:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009442:	f7f7 fb3f 	bl	8000ac4 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009446:	9b02      	ldr	r3, [sp, #8]
 8009448:	4631      	mov	r1, r6
  sConfig.Channel = ADC_CHANNEL_0;
 800944a:	9417      	str	r4, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800944c:	4618      	mov	r0, r3
 800944e:	9303      	str	r3, [sp, #12]
 8009450:	e01e      	b.n	8009490 <main+0x384>
 8009452:	bf00      	nop
 8009454:	20010000 	.word	0x20010000
 8009458:	e000ed00 	.word	0xe000ed00
 800945c:	40021000 	.word	0x40021000
 8009460:	40021400 	.word	0x40021400
 8009464:	40020400 	.word	0x40020400
 8009468:	40021800 	.word	0x40021800
 800946c:	40020000 	.word	0x40020000
 8009470:	40020800 	.word	0x40020800
 8009474:	10110000 	.word	0x10110000
 8009478:	40020c00 	.word	0x40020c00
 800947c:	2000ef0c 	.word	0x2000ef0c
 8009480:	40012000 	.word	0x40012000
 8009484:	40023800 	.word	0x40023800
 8009488:	0f000001 	.word	0x0f000001
 800948c:	2000ed2c 	.word	0x2000ed2c
  sConfig.Rank = 1;
 8009490:	9518      	str	r5, [sp, #96]	; 0x60
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009492:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009494:	f7f7 fcbc 	bl	8000e10 <HAL_ADC_ConfigChannel>
  hadc2.Instance = ADC2;
 8009498:	4ac0      	ldr	r2, [pc, #768]	; (800979c <main+0x690>)
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800949a:	4650      	mov	r0, sl
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800949c:	f8ca 4008 	str.w	r4, [sl, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80094a0:	f8ca 4010 	str.w	r4, [sl, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80094a4:	f8ca 4018 	str.w	r4, [sl, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80094a8:	f8ca 4020 	str.w	r4, [sl, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80094ac:	f8ca 402c 	str.w	r4, [sl, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80094b0:	f8ca b028 	str.w	fp, [sl, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80094b4:	f8ca 400c 	str.w	r4, [sl, #12]
  hadc2.Init.NbrOfConversion = 1;
 80094b8:	f8ca 501c 	str.w	r5, [sl, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80094bc:	f8ca 4030 	str.w	r4, [sl, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80094c0:	f8ca 5014 	str.w	r5, [sl, #20]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80094c4:	e88a 0204 	stmia.w	sl, {r2, r9}
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80094c8:	f7f7 fafc 	bl	8000ac4 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80094cc:	4631      	mov	r1, r6
 80094ce:	4650      	mov	r0, sl
  hadc3.Instance = ADC3;
 80094d0:	f8df a32c 	ldr.w	sl, [pc, #812]	; 8009800 <main+0x6f4>
  sConfig.Channel = ADC_CHANNEL_0;
 80094d4:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfig.Rank = 1;
 80094d6:	9518      	str	r5, [sp, #96]	; 0x60
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80094d8:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80094da:	f7f7 fc99 	bl	8000e10 <HAL_ADC_ConfigChannel>
  hadc3.Instance = ADC3;
 80094de:	4ab0      	ldr	r2, [pc, #704]	; (80097a0 <main+0x694>)
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80094e0:	4650      	mov	r0, sl
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80094e2:	f8ca 4008 	str.w	r4, [sl, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80094e6:	f8ca 4010 	str.w	r4, [sl, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80094ea:	f8ca 4018 	str.w	r4, [sl, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80094ee:	f8ca 4020 	str.w	r4, [sl, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80094f2:	f8ca 402c 	str.w	r4, [sl, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80094f6:	f8ca b028 	str.w	fp, [sl, #40]	; 0x28
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80094fa:	f44f 7b82 	mov.w	fp, #260	; 0x104
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80094fe:	f8ca 400c 	str.w	r4, [sl, #12]
  hadc3.Init.NbrOfConversion = 1;
 8009502:	f8ca 501c 	str.w	r5, [sl, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8009506:	f8ca 4030 	str.w	r4, [sl, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800950a:	f8ca 5014 	str.w	r5, [sl, #20]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800950e:	e88a 0204 	stmia.w	sl, {r2, r9}
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8009512:	f7f7 fad7 	bl	8000ac4 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8009516:	4631      	mov	r1, r6
 8009518:	4650      	mov	r0, sl
  sConfig.Channel = ADC_CHANNEL_0;
 800951a:	9417      	str	r4, [sp, #92]	; 0x5c
  hcan1.Init.BS2 = CAN_BS2_2TQ;
 800951c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
  sConfig.Rank = 1;
 8009520:	9518      	str	r5, [sp, #96]	; 0x60
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009522:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8009524:	f7f7 fc74 	bl	8000e10 <HAL_ADC_ConfigChannel>
  hcan1.Instance = CAN1;
 8009528:	489e      	ldr	r0, [pc, #632]	; (80097a4 <main+0x698>)
  hcan1.Init.Prescaler = 16;
 800952a:	2310      	movs	r3, #16
 800952c:	4a9e      	ldr	r2, [pc, #632]	; (80097a8 <main+0x69c>)
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800952e:	6084      	str	r4, [r0, #8]
  hcan1.Init.SJW = CAN_SJW_1TQ;
 8009530:	60c4      	str	r4, [r0, #12]
  hcan1.Init.BS1 = CAN_BS1_2TQ;
 8009532:	f8c0 9010 	str.w	r9, [r0, #16]
  hcan1.Init.BS2 = CAN_BS2_2TQ;
 8009536:	f8c0 a014 	str.w	sl, [r0, #20]
  hcan1.Init.TTCM = DISABLE;
 800953a:	6184      	str	r4, [r0, #24]
  hcan1.Init.ABOM = DISABLE;
 800953c:	61c4      	str	r4, [r0, #28]
  hcan1.Init.AWUM = DISABLE;
 800953e:	6204      	str	r4, [r0, #32]
  hcan1.Init.NART = DISABLE;
 8009540:	6244      	str	r4, [r0, #36]	; 0x24
  hcan1.Init.RFLM = DISABLE;
 8009542:	6284      	str	r4, [r0, #40]	; 0x28
  hcan1.Init.TXFP = DISABLE;
 8009544:	62c4      	str	r4, [r0, #44]	; 0x2c
  hcan1.Init.Prescaler = 16;
 8009546:	e880 000c 	stmia.w	r0, {r2, r3}
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800954a:	f7f7 fd02 	bl	8000f52 <HAL_CAN_Init>
  hcan2.Instance = CAN2;
 800954e:	4897      	ldr	r0, [pc, #604]	; (80097ac <main+0x6a0>)
  hcan2.Init.Prescaler = 16;
 8009550:	2310      	movs	r3, #16
 8009552:	4a97      	ldr	r2, [pc, #604]	; (80097b0 <main+0x6a4>)
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8009554:	6084      	str	r4, [r0, #8]
  hcan2.Init.SJW = CAN_SJW_1TQ;
 8009556:	60c4      	str	r4, [r0, #12]
  hcan2.Init.BS1 = CAN_BS1_2TQ;
 8009558:	f8c0 9010 	str.w	r9, [r0, #16]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800955c:	f04f 0928 	mov.w	r9, #40	; 0x28
  hcan2.Init.BS2 = CAN_BS2_2TQ;
 8009560:	f8c0 a014 	str.w	sl, [r0, #20]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8009564:	f44f 6ae0 	mov.w	sl, #1792	; 0x700
  hcan2.Init.TTCM = DISABLE;
 8009568:	6184      	str	r4, [r0, #24]
  hcan2.Init.ABOM = DISABLE;
 800956a:	61c4      	str	r4, [r0, #28]
  hcan2.Init.AWUM = DISABLE;
 800956c:	6204      	str	r4, [r0, #32]
  hcan2.Init.NART = DISABLE;
 800956e:	6244      	str	r4, [r0, #36]	; 0x24
  hcan2.Init.RFLM = DISABLE;
 8009570:	6284      	str	r4, [r0, #40]	; 0x28
  hcan2.Init.TXFP = DISABLE;
 8009572:	62c4      	str	r4, [r0, #44]	; 0x2c
  hcan2.Init.Prescaler = 16;
 8009574:	e880 000c 	stmia.w	r0, {r2, r3}
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8009578:	f7f7 fceb 	bl	8000f52 <HAL_CAN_Init>
  hspi2.Instance = SPI2;
 800957c:	488d      	ldr	r0, [pc, #564]	; (80097b4 <main+0x6a8>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800957e:	4a8e      	ldr	r2, [pc, #568]	; (80097b8 <main+0x6ac>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8009580:	6084      	str	r4, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8009582:	f8c0 a00c 	str.w	sl, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009586:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8009588:	6145      	str	r5, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800958a:	f8c0 8018 	str.w	r8, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800958e:	f8c0 901c 	str.w	r9, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009592:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8009594:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009596:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8009598:	62c7      	str	r7, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800959a:	6304      	str	r4, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800959c:	6344      	str	r4, [r0, #52]	; 0x34
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800959e:	e880 0804 	stmia.w	r0, {r2, fp}
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80095a2:	f7f9 fde5 	bl	8003170 <HAL_SPI_Init>
  hspi3.Instance = SPI3;
 80095a6:	4885      	ldr	r0, [pc, #532]	; (80097bc <main+0x6b0>)
 80095a8:	4a85      	ldr	r2, [pc, #532]	; (80097c0 <main+0x6b4>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80095aa:	6084      	str	r4, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80095ac:	f8c0 a00c 	str.w	sl, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80095b0:	6104      	str	r4, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80095b2:	6145      	str	r5, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80095b4:	f8c0 8018 	str.w	r8, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80095b8:	f8c0 901c 	str.w	r9, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80095bc:	6204      	str	r4, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80095be:	6244      	str	r4, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095c0:	6284      	str	r4, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80095c2:	62c7      	str	r7, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80095c4:	6304      	str	r4, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80095c6:	6344      	str	r4, [r0, #52]	; 0x34
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80095c8:	e880 0804 	stmia.w	r0, {r2, fp}
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80095cc:	f7f9 fdd0 	bl	8003170 <HAL_SPI_Init>
  hspi4.Instance = SPI4;
 80095d0:	487c      	ldr	r0, [pc, #496]	; (80097c4 <main+0x6b8>)
 80095d2:	4a7d      	ldr	r2, [pc, #500]	; (80097c8 <main+0x6bc>)
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80095d4:	6084      	str	r4, [r0, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80095d6:	f8c0 a00c 	str.w	sl, [r0, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80095da:	6104      	str	r4, [r0, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80095dc:	6145      	str	r5, [r0, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80095de:	f8c0 8018 	str.w	r8, [r0, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80095e2:	f8c0 901c 	str.w	r9, [r0, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80095e6:	6204      	str	r4, [r0, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80095e8:	6244      	str	r4, [r0, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095ea:	6284      	str	r4, [r0, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80095ec:	62c7      	str	r7, [r0, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80095ee:	6304      	str	r4, [r0, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80095f0:	6344      	str	r4, [r0, #52]	; 0x34
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80095f2:	e880 0804 	stmia.w	r0, {r2, fp}
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80095f6:	f7f9 fdbb 	bl	8003170 <HAL_SPI_Init>
  hspi5.Instance = SPI5;
 80095fa:	4874      	ldr	r0, [pc, #464]	; (80097cc <main+0x6c0>)
 80095fc:	4a74      	ldr	r2, [pc, #464]	; (80097d0 <main+0x6c4>)
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80095fe:	f8c0 8018 	str.w	r8, [r0, #24]
  htim1.Instance = TIM1;
 8009602:	f8df 8200 	ldr.w	r8, [pc, #512]	; 8009804 <main+0x6f8>
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8009606:	6084      	str	r4, [r0, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8009608:	f8c0 a00c 	str.w	sl, [r0, #12]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800960c:	f04f 0a30 	mov.w	sl, #48	; 0x30
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009610:	6104      	str	r4, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 8009612:	6145      	str	r5, [r0, #20]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8009614:	f8c0 901c 	str.w	r9, [r0, #28]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009618:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800961c:	6204      	str	r4, [r0, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800961e:	6244      	str	r4, [r0, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009620:	6284      	str	r4, [r0, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8009622:	62c7      	str	r7, [r0, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009624:	6304      	str	r4, [r0, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8009626:	6344      	str	r4, [r0, #52]	; 0x34
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8009628:	e880 0804 	stmia.w	r0, {r2, fp}
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800962c:	f7f9 fda0 	bl	8003170 <HAL_SPI_Init>
  htim1.Instance = TIM1;
 8009630:	4a68      	ldr	r2, [pc, #416]	; (80097d4 <main+0x6c8>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009632:	4640      	mov	r0, r8
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009634:	f8c8 4008 	str.w	r4, [r8, #8]
  htim1.Init.Period = 0;
 8009638:	f8c8 400c 	str.w	r4, [r8, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800963c:	f8c8 4010 	str.w	r4, [r8, #16]
  htim1.Init.RepetitionCounter = 0;
 8009640:	f8c8 4014 	str.w	r4, [r8, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009644:	f8c8 4018 	str.w	r4, [r8, #24]
  htim2.Instance = TIM2;
 8009648:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8009808 <main+0x6fc>
  htim1.Init.Prescaler = 0;
 800964c:	e888 0014 	stmia.w	r8, {r2, r4}
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009650:	f7f9 ff56 	bl	8003500 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009654:	4631      	mov	r1, r6
 8009656:	4640      	mov	r0, r8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009658:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800965c:	f7f9 ff74 	bl	8003548 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009660:	a912      	add	r1, sp, #72	; 0x48
 8009662:	4640      	mov	r0, r8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009664:	9412      	str	r4, [sp, #72]	; 0x48
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009666:	f04f 080c 	mov.w	r8, #12
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800966a:	9413      	str	r4, [sp, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800966c:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800966e:	f7fa f881 	bl	8003774 <HAL_TIMEx_MasterConfigSynchronization>
  huart2.Init.BaudRate = 9600;
 8009672:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
  huart2.Instance = USART2;
 8009676:	4858      	ldr	r0, [pc, #352]	; (80097d8 <main+0x6cc>)
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8009678:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  huart2.Init.BaudRate = 9600;
 800967c:	4a57      	ldr	r2, [pc, #348]	; (80097dc <main+0x6d0>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800967e:	6084      	str	r4, [r0, #8]
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8009680:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009682:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009684:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009686:	f8c0 8014 	str.w	r8, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800968a:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800968c:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800968e:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8009690:	f8c0 a024 	str.w	sl, [r0, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8009694:	f8c0 9038 	str.w	r9, [r0, #56]	; 0x38
  huart2.Init.BaudRate = 9600;
 8009698:	e880 4004 	stmia.w	r0, {r2, lr}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800969c:	f7fa fcad 	bl	8003ffa <HAL_UART_Init>
  huart6.Instance = USART6;
 80096a0:	484f      	ldr	r0, [pc, #316]	; (80097e0 <main+0x6d4>)
  huart6.Init.BaudRate = 1000000;
 80096a2:	f8df c168 	ldr.w	ip, [pc, #360]	; 800980c <main+0x700>
 80096a6:	4a4f      	ldr	r2, [pc, #316]	; (80097e4 <main+0x6d8>)
  huart6.Init.Mode = UART_MODE_TX_RX;
 80096a8:	f8c0 8014 	str.w	r8, [r0, #20]
  hdac.Instance = DAC;
 80096ac:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8009810 <main+0x704>
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80096b0:	6084      	str	r4, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80096b2:	60c4      	str	r4, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80096b4:	6104      	str	r4, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80096b6:	6184      	str	r4, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80096b8:	61c4      	str	r4, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80096ba:	6204      	str	r4, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80096bc:	6244      	str	r4, [r0, #36]	; 0x24
  huart6.Init.BaudRate = 1000000;
 80096be:	e880 1004 	stmia.w	r0, {r2, ip}
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80096c2:	f7fa fc9a 	bl	8003ffa <HAL_UART_Init>
  hdac.Instance = DAC;
 80096c6:	4a48      	ldr	r2, [pc, #288]	; (80097e8 <main+0x6dc>)
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80096c8:	4640      	mov	r0, r8
  hdac.Instance = DAC;
 80096ca:	f8c8 2000 	str.w	r2, [r8]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80096ce:	f7f7 fd9c 	bl	800120a <HAL_DAC_Init>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80096d2:	4622      	mov	r2, r4
 80096d4:	4631      	mov	r1, r6
 80096d6:	4640      	mov	r0, r8
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80096d8:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80096da:	9418      	str	r4, [sp, #96]	; 0x60
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80096dc:	f7f7 fdd6 	bl	800128c <HAL_DAC_ConfigChannel>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80096e0:	4631      	mov	r1, r6
 80096e2:	2210      	movs	r2, #16
 80096e4:	4640      	mov	r0, r8
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80096e6:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80096e8:	9418      	str	r4, [sp, #96]	; 0x60
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80096ea:	f7f7 fdcf 	bl	800128c <HAL_DAC_ConfigChannel>
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80096ee:	2380      	movs	r3, #128	; 0x80
  htim2.Instance = TIM2;
 80096f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80096f4:	4658      	mov	r0, fp
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80096f6:	f8cb 4008 	str.w	r4, [fp, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80096fa:	f8cb 3018 	str.w	r3, [fp, #24]
  htim2.Init.Period = 1;
 80096fe:	f8cb 500c 	str.w	r5, [fp, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009702:	f8cb 4010 	str.w	r4, [fp, #16]
  htim2.Init.Prescaler = 0;
 8009706:	e88b 0014 	stmia.w	fp, {r2, r4}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800970a:	f7f9 fef9 	bl	8003500 <HAL_TIM_Base_Init>
      if (HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig) != HAL_OK)
 800970e:	4631      	mov	r1, r6
 8009710:	4658      	mov	r0, fp
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8009712:	9717      	str	r7, [sp, #92]	; 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8009714:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
      if (HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig) != HAL_OK)
 8009718:	f7f9 ffa4 	bl	8003664 <HAL_TIM_SlaveConfigSynchronization>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800971c:	2220      	movs	r2, #32
	  htim4.Instance = TIM4;
 800971e:	4f33      	ldr	r7, [pc, #204]	; (80097ec <main+0x6e0>)
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009720:	a912      	add	r1, sp, #72	; 0x48
 8009722:	4658      	mov	r0, fp
	    htim4.Init.Period = 200;
 8009724:	f04f 0ac8 	mov.w	sl, #200	; 0xc8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009728:	9212      	str	r2, [sp, #72]	; 0x48
 800972a:	9202      	str	r2, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800972c:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800972e:	f7fa f821 	bl	8003774 <HAL_TIMEx_MasterConfigSynchronization>
	  htim4.Instance = TIM4;
 8009732:	492f      	ldr	r1, [pc, #188]	; (80097f0 <main+0x6e4>)
	    if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8009734:	4638      	mov	r0, r7
	    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009736:	60bc      	str	r4, [r7, #8]
	    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009738:	613c      	str	r4, [r7, #16]
	    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800973a:	61bc      	str	r4, [r7, #24]
	    htim4.Init.Period = 200;
 800973c:	f8c7 a00c 	str.w	sl, [r7, #12]
	    htim4.Init.Prescaler = 0;
 8009740:	e887 0012 	stmia.w	r7, {r1, r4}
	    if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8009744:	f7f9 fedc 	bl	8003500 <HAL_TIM_Base_Init>
	    if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8009748:	4631      	mov	r1, r6
 800974a:	4638      	mov	r0, r7
	    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800974c:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
	    if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8009750:	f7f9 fefa 	bl	8003548 <HAL_TIM_ConfigClockSource>
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009754:	9a02      	ldr	r2, [sp, #8]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009756:	a912      	add	r1, sp, #72	; 0x48
 8009758:	4638      	mov	r0, r7
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800975a:	9212      	str	r2, [sp, #72]	; 0x48
	  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_SET);
 800975c:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009760:	9414      	str	r4, [sp, #80]	; 0x50
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009762:	f7fa f807 	bl	8003774 <HAL_TIMEx_MasterConfigSynchronization>
  udp_echoserver_init();
 8009766:	f7ff f8d1 	bl	800890c <udp_echoserver_init>
  IP4_ADDR(&addrr, 190, 100, 101, 2);
 800976a:	4a22      	ldr	r2, [pc, #136]	; (80097f4 <main+0x6e8>)
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_SET);
 800976c:	2181      	movs	r1, #129	; 0x81
 800976e:	4822      	ldr	r0, [pc, #136]	; (80097f8 <main+0x6ec>)
  IP4_ADDR(&addrr, 190, 100, 101, 2);
 8009770:	9206      	str	r2, [sp, #24]
  IP4_ADDR(&localaddrr, 190, 100, 101, 1);
 8009772:	f102 427f 	add.w	r2, r2, #4278190080	; 0xff000000
	  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_SET);
 8009776:	f509 39fa 	add.w	r9, r9, #128000	; 0x1f400
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 800977a:	4f20      	ldr	r7, [pc, #128]	; (80097fc <main+0x6f0>)
  IP4_ADDR(&localaddrr, 190, 100, 101, 1);
 800977c:	9207      	str	r2, [sp, #28]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_SET);
 800977e:	462a      	mov	r2, r5
 8009780:	f7f8 fdbe 	bl	8002300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 8009784:	462a      	mov	r2, r5
 8009786:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800978a:	481c      	ldr	r0, [pc, #112]	; (80097fc <main+0x6f0>)
 800978c:	f7f8 fdb8 	bl	8002300 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8009790:	4650      	mov	r0, sl
 8009792:	f7f7 f989 	bl	8000aa8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8009796:	4622      	mov	r2, r4
 8009798:	2181      	movs	r1, #129	; 0x81
 800979a:	e03b      	b.n	8009814 <main+0x708>
 800979c:	40012100 	.word	0x40012100
 80097a0:	40012200 	.word	0x40012200
 80097a4:	200100a0 	.word	0x200100a0
 80097a8:	40006400 	.word	0x40006400
 80097ac:	2000ef54 	.word	0x2000ef54
 80097b0:	40006800 	.word	0x40006800
 80097b4:	2000e220 	.word	0x2000e220
 80097b8:	40003800 	.word	0x40003800
 80097bc:	2000edc0 	.word	0x2000edc0
 80097c0:	40003c00 	.word	0x40003c00
 80097c4:	2000eff0 	.word	0x2000eff0
 80097c8:	40013400 	.word	0x40013400
 80097cc:	2000e284 	.word	0x2000e284
 80097d0:	40015000 	.word	0x40015000
 80097d4:	40010000 	.word	0x40010000
 80097d8:	20010030 	.word	0x20010030
 80097dc:	40004400 	.word	0x40004400
 80097e0:	2000f300 	.word	0x2000f300
 80097e4:	40011400 	.word	0x40011400
 80097e8:	40007400 	.word	0x40007400
 80097ec:	2000e2e8 	.word	0x2000e2e8
 80097f0:	40000800 	.word	0x40000800
 80097f4:	026564be 	.word	0x026564be
 80097f8:	40020400 	.word	0x40020400
 80097fc:	40021400 	.word	0x40021400
 8009800:	2000ef94 	.word	0x2000ef94
 8009804:	2000f0b4 	.word	0x2000f0b4
 8009808:	2000fdf0 	.word	0x2000fdf0
 800980c:	000f4240 	.word	0x000f4240
 8009810:	2000efdc 	.word	0x2000efdc
 8009814:	48c2      	ldr	r0, [pc, #776]	; (8009b20 <main+0xa14>)
 8009816:	f7f8 fd73 	bl	8002300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 800981a:	4622      	mov	r2, r4
 800981c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009820:	48c0      	ldr	r0, [pc, #768]	; (8009b24 <main+0xa18>)
 8009822:	f7f8 fd6d 	bl	8002300 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8009826:	4650      	mov	r0, sl
 8009828:	f7f7 f93e 	bl	8000aa8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_SET);
 800982c:	462a      	mov	r2, r5
 800982e:	2181      	movs	r1, #129	; 0x81
 8009830:	48bb      	ldr	r0, [pc, #748]	; (8009b20 <main+0xa14>)
 8009832:	f7f8 fd65 	bl	8002300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 8009836:	462a      	mov	r2, r5
 8009838:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800983c:	48b9      	ldr	r0, [pc, #740]	; (8009b24 <main+0xa18>)
 800983e:	f7f8 fd5f 	bl	8002300 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8009842:	4650      	mov	r0, sl
 8009844:	f7f7 f930 	bl	8000aa8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8009848:	4622      	mov	r2, r4
 800984a:	2181      	movs	r1, #129	; 0x81
 800984c:	48b4      	ldr	r0, [pc, #720]	; (8009b20 <main+0xa14>)
 800984e:	f7f8 fd57 	bl	8002300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 8009852:	4622      	mov	r2, r4
 8009854:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009858:	48b2      	ldr	r0, [pc, #712]	; (8009b24 <main+0xa18>)
 800985a:	f7f8 fd51 	bl	8002300 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 800985e:	4650      	mov	r0, sl
 8009860:	f7f7 f922 	bl	8000aa8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_SET);
 8009864:	462a      	mov	r2, r5
 8009866:	2181      	movs	r1, #129	; 0x81
 8009868:	48ad      	ldr	r0, [pc, #692]	; (8009b20 <main+0xa14>)
 800986a:	f7f8 fd49 	bl	8002300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 800986e:	462a      	mov	r2, r5
 8009870:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009874:	48ab      	ldr	r0, [pc, #684]	; (8009b24 <main+0xa18>)
 8009876:	f7f8 fd43 	bl	8002300 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 800987a:	4650      	mov	r0, sl
 800987c:	f7f7 f914 	bl	8000aa8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8009880:	4622      	mov	r2, r4
 8009882:	2181      	movs	r1, #129	; 0x81
 8009884:	48a6      	ldr	r0, [pc, #664]	; (8009b20 <main+0xa14>)
 8009886:	f7f8 fd3b 	bl	8002300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 800988a:	4622      	mov	r2, r4
 800988c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009890:	48a4      	ldr	r0, [pc, #656]	; (8009b24 <main+0xa18>)
 8009892:	f7f8 fd35 	bl	8002300 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8009896:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800989a:	f7f7 f905 	bl	8000aa8 <HAL_Delay>
 800989e:	9b03      	ldr	r3, [sp, #12]
 80098a0:	2464      	movs	r4, #100	; 0x64
 80098a2:	461d      	mov	r5, r3
	  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_SET);
 80098a4:	2201      	movs	r2, #1
 80098a6:	2181      	movs	r1, #129	; 0x81
 80098a8:	4648      	mov	r0, r9
 80098aa:	f7f8 fd29 	bl	8002300 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 80098ae:	2201      	movs	r2, #1
 80098b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80098b4:	4638      	mov	r0, r7
 80098b6:	f7f8 fd23 	bl	8002300 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 80098ba:	200a      	movs	r0, #10
 80098bc:	f7f7 f8f4 	bl	8000aa8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 80098c0:	2200      	movs	r2, #0
 80098c2:	2181      	movs	r1, #129	; 0x81
 80098c4:	4648      	mov	r0, r9
 80098c6:	f7f8 fd1b 	bl	8002300 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 80098ca:	2200      	movs	r2, #0
 80098cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80098d0:	4638      	mov	r0, r7
 80098d2:	f7f8 fd15 	bl	8002300 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 80098d6:	200a      	movs	r0, #10
 80098d8:	f7f7 f8e6 	bl	8000aa8 <HAL_Delay>
	for(int i=0; i<100; i++)
 80098dc:	3c01      	subs	r4, #1
 80098de:	d1e1      	bne.n	80098a4 <main+0x798>
      GPIO_InitStruct.Pin = GPIO_PIN_4;
 80098e0:	2310      	movs	r3, #16
      GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80098e2:	2703      	movs	r7, #3
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098e4:	a912      	add	r1, sp, #72	; 0x48
 80098e6:	4890      	ldr	r0, [pc, #576]	; (8009b28 <main+0xa1c>)
      GPIO_InitStruct.Pin = GPIO_PIN_4;
 80098e8:	9312      	str	r3, [sp, #72]	; 0x48
      GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80098ea:	9713      	str	r7, [sp, #76]	; 0x4c
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098ec:	9414      	str	r4, [sp, #80]	; 0x50
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098ee:	f7f8 fc1d 	bl	800212c <HAL_GPIO_Init>
      GPIO_InitStruct.Pin = GPIO_PIN_5;
 80098f2:	2320      	movs	r3, #32
      GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80098f4:	9713      	str	r7, [sp, #76]	; 0x4c
  udp_bind(upcb, &localaddrr, UDP_CLIENT_PORT);
 80098f6:	4f8d      	ldr	r7, [pc, #564]	; (8009b2c <main+0xa20>)
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098f8:	a912      	add	r1, sp, #72	; 0x48
 80098fa:	488b      	ldr	r0, [pc, #556]	; (8009b28 <main+0xa1c>)
  buf[i] = pbuf_alloc(PBUF_RAW_TX, 514+42 ,PBUF_RAM );
 80098fc:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 8009ba0 <main+0xa94>
      GPIO_InitStruct.Pin = GPIO_PIN_5;
 8009900:	9312      	str	r3, [sp, #72]	; 0x48
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009902:	9414      	str	r4, [sp, #80]	; 0x50
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009904:	f7f8 fc12 	bl	800212c <HAL_GPIO_Init>
  udp_bind(upcb, &localaddrr, UDP_CLIENT_PORT);
 8009908:	2217      	movs	r2, #23
 800990a:	a907      	add	r1, sp, #28
 800990c:	6838      	ldr	r0, [r7, #0]
 800990e:	f7fe fb65 	bl	8007fdc <udp_bind>
  udp_connect(upcb, &addrr, UDP_CLIENT_PORT);
 8009912:	6838      	ldr	r0, [r7, #0]
 8009914:	464f      	mov	r7, r9
 8009916:	2217      	movs	r2, #23
 8009918:	a906      	add	r1, sp, #24
 800991a:	f7fe fbb3 	bl	8008084 <udp_connect>
  buf[i] = pbuf_alloc(PBUF_RAW_TX, 514+42 ,PBUF_RAM );
 800991e:	2200      	movs	r2, #0
 8009920:	f44f 710b 	mov.w	r1, #556	; 0x22c
 8009924:	2003      	movs	r0, #3
 8009926:	f7fb fcff 	bl	8005328 <pbuf_alloc>
 800992a:	f849 0024 	str.w	r0, [r9, r4, lsl #2]
  for(int i=0;i<bufnum;i++)
 800992e:	3401      	adds	r4, #1
 8009930:	2c20      	cmp	r4, #32
 8009932:	d1f4      	bne.n	800991e <main+0x812>
  uint8_t udp_h[42] =
 8009934:	4b7e      	ldr	r3, [pc, #504]	; (8009b30 <main+0xa24>)
 8009936:	4632      	mov	r2, r6
 8009938:	f103 0e28 	add.w	lr, r3, #40	; 0x28
 800993c:	6818      	ldr	r0, [r3, #0]
 800993e:	3308      	adds	r3, #8
 8009940:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8009944:	4614      	mov	r4, r2
 8009946:	4573      	cmp	r3, lr
 8009948:	c403      	stmia	r4!, {r0, r1}
 800994a:	4622      	mov	r2, r4
 800994c:	d1f6      	bne.n	800993c <main+0x830>
 800994e:	881b      	ldrh	r3, [r3, #0]
 8009950:	2100      	movs	r1, #0
 8009952:	8023      	strh	r3, [r4, #0]
 8009954:	4b77      	ldr	r3, [pc, #476]	; (8009b34 <main+0xa28>)
 8009956:	4699      	mov	r9, r3
    MyPayload[i] = (u8_t*)buf[i]->payload;// - (s16_t)(0);
 8009958:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
 800995c:	6852      	ldr	r2, [r2, #4]
 800995e:	601a      	str	r2, [r3, #0]
 8009960:	2200      	movs	r2, #0
    *(MyPayload[i] + (s16_t)j) = (char)udp_h[j];
 8009962:	5cb4      	ldrb	r4, [r6, r2]
 8009964:	6818      	ldr	r0, [r3, #0]
 8009966:	5484      	strb	r4, [r0, r2]
 8009968:	3201      	adds	r2, #1
  for(j=0;j<42;j++)
 800996a:	2a2a      	cmp	r2, #42	; 0x2a
 800996c:	d1f9      	bne.n	8009962 <main+0x856>
   MyPayload[i] += 42;
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	3101      	adds	r1, #1
 8009972:	322a      	adds	r2, #42	; 0x2a
    for(uint16_t i=0;i<bufnum;i++)
 8009974:	2920      	cmp	r1, #32
   MyPayload[i] += 42;
 8009976:	f843 2b04 	str.w	r2, [r3], #4
    for(uint16_t i=0;i<bufnum;i++)
 800997a:	d1ed      	bne.n	8009958 <main+0x84c>
  row=0;
 800997c:	2400      	movs	r4, #0
 800997e:	4b6e      	ldr	r3, [pc, #440]	; (8009b38 <main+0xa2c>)
    if (HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0x00) != HAL_OK) Error_Handler(); //Set DAC Channel2 DHR register
 8009980:	486e      	ldr	r0, [pc, #440]	; (8009b3c <main+0xa30>)
  row=0;
 8009982:	801c      	strh	r4, [r3, #0]
    if (HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0x00) != HAL_OK) Error_Handler(); //Set DAC Channel2 DHR register
 8009984:	4622      	mov	r2, r4
  column=0;
 8009986:	4b6e      	ldr	r3, [pc, #440]	; (8009b40 <main+0xa34>)
    if (HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0x00) != HAL_OK) Error_Handler(); //Set DAC Channel2 DHR register
 8009988:	4621      	mov	r1, r4
  column=0;
 800998a:	601c      	str	r4, [r3, #0]
  time=0;
 800998c:	4b6d      	ldr	r3, [pc, #436]	; (8009b44 <main+0xa38>)
 800998e:	601c      	str	r4, [r3, #0]
  Packet=0;
 8009990:	4b6d      	ldr	r3, [pc, #436]	; (8009b48 <main+0xa3c>)
 8009992:	601c      	str	r4, [r3, #0]
    if (HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0x00) != HAL_OK) Error_Handler(); //Set DAC Channel2 DHR register
 8009994:	4623      	mov	r3, r4
 8009996:	f7f7 fc99 	bl	80012cc <HAL_DAC_SetValue>
      if (HAL_DAC_Start(&hdac, DAC_CHANNEL_1) != HAL_OK) Error_Handler(); // Enable DAC Channel2
 800999a:	4621      	mov	r1, r4
 800999c:	4867      	ldr	r0, [pc, #412]	; (8009b3c <main+0xa30>)
 800999e:	f7f7 fc47 	bl	8001230 <HAL_DAC_Start>
  if (HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0x00) != HAL_OK) Error_Handler(); //Set DAC Channel2 DHR register
 80099a2:	4623      	mov	r3, r4
 80099a4:	4622      	mov	r2, r4
 80099a6:	2110      	movs	r1, #16
 80099a8:	4864      	ldr	r0, [pc, #400]	; (8009b3c <main+0xa30>)
 80099aa:	f7f7 fc8f 	bl	80012cc <HAL_DAC_SetValue>
  if (HAL_DAC_Start(&hdac, DAC_CHANNEL_2) != HAL_OK) Error_Handler(); // Enable DAC Channel2
 80099ae:	2110      	movs	r1, #16
 80099b0:	4862      	ldr	r0, [pc, #392]	; (8009b3c <main+0xa30>)
 80099b2:	f7f7 fc3d 	bl	8001230 <HAL_DAC_Start>
  if (HAL_ADC_Start_IT(&hadc1) != HAL_OK) Error_Handler(); //Start Conversation Error
 80099b6:	4865      	ldr	r0, [pc, #404]	; (8009b4c <main+0xa40>)
 80099b8:	f7f7 f92e 	bl	8000c18 <HAL_ADC_Start_IT>
  hadc1.Instance->CR2 &= ~((uint32_t)(0x01U << 9U));//dds
 80099bc:	682b      	ldr	r3, [r5, #0]
  HAL_DMA_RegisterCallback(&hdma_adc1,HAL_DMA_XFER_CPLT_CB_ID  , adc1_dma_callback0);
 80099be:	4621      	mov	r1, r4
 80099c0:	4863      	ldr	r0, [pc, #396]	; (8009b50 <main+0xa44>)
  hadc1.Instance->CR2 &= ~((uint32_t)(0x01U << 9U));//dds
 80099c2:	689a      	ldr	r2, [r3, #8]
 80099c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80099c8:	609a      	str	r2, [r3, #8]
  hadc1.Instance->CR2 &= ~((uint32_t)(0x01U << 10U));//EOCS
 80099ca:	689a      	ldr	r2, [r3, #8]
 80099cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099d0:	609a      	str	r2, [r3, #8]
  hadc1.Instance->CR2 &= ~((uint32_t)(0x01U << 9U));//dds
 80099d2:	689a      	ldr	r2, [r3, #8]
 80099d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80099d8:	609a      	str	r2, [r3, #8]
  hadc1.Instance->CR2 &= ~((uint32_t)(0x01U << 10U));//EOCS
 80099da:	689a      	ldr	r2, [r3, #8]
 80099dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099e0:	609a      	str	r2, [r3, #8]
  hadc1.Instance->CR2 |= ((uint32_t)(0x01U << 8U));//dma
 80099e2:	689a      	ldr	r2, [r3, #8]
 80099e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099e8:	609a      	str	r2, [r3, #8]
  HAL_DMA_RegisterCallback(&hdma_adc1,HAL_DMA_XFER_CPLT_CB_ID  , adc1_dma_callback0);
 80099ea:	4a5a      	ldr	r2, [pc, #360]	; (8009b54 <main+0xa48>)
 80099ec:	f7f7 fde4 	bl	80015b8 <HAL_DMA_RegisterCallback>
  HAL_DMA_RegisterCallback(&hdma_adc1,HAL_DMA_XFER_M1CPLT_CB_ID, adc1_dma_callback1);
 80099f0:	4a59      	ldr	r2, [pc, #356]	; (8009b58 <main+0xa4c>)
 80099f2:	2102      	movs	r1, #2
 80099f4:	4856      	ldr	r0, [pc, #344]	; (8009b50 <main+0xa44>)
 80099f6:	f7f7 fddf 	bl	80015b8 <HAL_DMA_RegisterCallback>
HAL_DMAEx_MultiBufferStart_IT(&hdma_adc1, (uint32_t)&(hadc1.Instance->DR), (uint32_t)(MyPayload[0]),(uint32_t)(MyPayload[1]), ADCBUFFER_SIZE);
 80099fa:	4b58      	ldr	r3, [pc, #352]	; (8009b5c <main+0xa50>)
 80099fc:	6829      	ldr	r1, [r5, #0]
    d[i]=0;
 80099fe:	4625      	mov	r5, r4
HAL_DMAEx_MultiBufferStart_IT(&hdma_adc1, (uint32_t)&(hadc1.Instance->DR), (uint32_t)(MyPayload[0]),(uint32_t)(MyPayload[1]), ADCBUFFER_SIZE);
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	314c      	adds	r1, #76	; 0x4c
 8009a04:	4852      	ldr	r0, [pc, #328]	; (8009b50 <main+0xa44>)
 8009a06:	9300      	str	r3, [sp, #0]
 8009a08:	e899 000c 	ldmia.w	r9, {r2, r3}
 8009a0c:	f7f7 fdfc 	bl	8001608 <HAL_DMAEx_MultiBufferStart_IT>
  tcp_echoserver_init();
 8009a10:	f000 fcfc 	bl	800a40c <tcp_echoserver_init>
  ScanISel_Init();
 8009a14:	f7ff f92f 	bl	8008c76 <ScanISel_Init>
  ScanTrim_Init();
 8009a18:	f7ff f930 	bl	8008c7c <ScanZoomRot_Init>
  ScanZoomRot_Init();
 8009a1c:	f7ff f92e 	bl	8008c7c <ScanZoomRot_Init>
  DetMuxSel_Init();
 8009a20:	f7ff f936 	bl	8008c90 <DetMuxSel_Init>
  DetAmpGain_Init();
 8009a24:	f7ff f940 	bl	8008ca8 <DetAmpGain_Init>
  DetTrim_Init();
 8009a28:	f7ff f946 	bl	8008cb8 <DetTrim_Init>
  dacrange(xVoltageBuffer,(uint16_t)2047, (uint16_t)2047,512);
 8009a2c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009a30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a34:	484a      	ldr	r0, [pc, #296]	; (8009b60 <main+0xa54>)
 8009a36:	4611      	mov	r1, r2
 8009a38:	f7ff f9bc 	bl	8008db4 <dacrange>
  dacrange(yVoltageBuffer,(uint16_t)2047, (uint16_t)2047,512);
 8009a3c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009a40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a44:	4847      	ldr	r0, [pc, #284]	; (8009b64 <main+0xa58>)
 8009a46:	4611      	mov	r1, r2
 8009a48:	f7ff f9b4 	bl	8008db4 <dacrange>
  for(int i=0; i<wny; i++)
 8009a4c:	4b46      	ldr	r3, [pc, #280]	; (8009b68 <main+0xa5c>)
    Row1Bytes[i] = (char)i;
 8009a4e:	4947      	ldr	r1, [pc, #284]	; (8009b6c <main+0xa60>)
  for(int i=0; i<wny; i++)
 8009a50:	681a      	ldr	r2, [r3, #0]
    Row2Bytes[i] = (char)(i >> 8);
 8009a52:	4847      	ldr	r0, [pc, #284]	; (8009b70 <main+0xa64>)
 8009a54:	4b47      	ldr	r3, [pc, #284]	; (8009b74 <main+0xa68>)
  for(int i=0; i<wny; i++)
 8009a56:	4294      	cmp	r4, r2
 8009a58:	f2c0 80c5 	blt.w	8009be6 <main+0xada>
  d[wnx] = 0;
 8009a5c:	4a46      	ldr	r2, [pc, #280]	; (8009b78 <main+0xa6c>)
  uint8_t receivedchar='\r';
 8009a5e:	ac22      	add	r4, sp, #136	; 0x88
  Dac_x = (uint32_t)hdac.Instance;
 8009a60:	f8d8 0000 	ldr.w	r0, [r8]
  HAL_Delay(50);
 8009a64:	2632      	movs	r6, #50	; 0x32
  d[wnx] = 0;
 8009a66:	6811      	ldr	r1, [r2, #0]
 8009a68:	2200      	movs	r2, #0
  isDacTimerOn = 0;
 8009a6a:	4d44      	ldr	r5, [pc, #272]	; (8009b7c <main+0xa70>)
  d[wnx] = 0;
 8009a6c:	545a      	strb	r2, [r3, r1]
  d[wnx+1] = 0;
 8009a6e:	440b      	add	r3, r1
  isDacTimerOn = 0;
 8009a70:	602a      	str	r2, [r5, #0]
  d[wnx+1] = 0;
 8009a72:	705a      	strb	r2, [r3, #1]
  Dac_x = (uint32_t)hdac.Instance;
 8009a74:	4b42      	ldr	r3, [pc, #264]	; (8009b80 <main+0xa74>)
  HAL_UART_Receive(&huart2, &receivedchar, 1,10);
 8009a76:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8009b8c <main+0xa80>
  Dac_x = (uint32_t)hdac.Instance;
 8009a7a:	6018      	str	r0, [r3, #0]
  Dac_x += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
 8009a7c:	6819      	ldr	r1, [r3, #0]
 8009a7e:	3108      	adds	r1, #8
 8009a80:	6019      	str	r1, [r3, #0]
  Dac_y = (uint32_t)hdac.Instance;
 8009a82:	4b40      	ldr	r3, [pc, #256]	; (8009b84 <main+0xa78>)
 8009a84:	6018      	str	r0, [r3, #0]
  Dac_y += DAC_DHR12R2_ALIGNMENT(DAC_ALIGN_12B_R);
 8009a86:	6819      	ldr	r1, [r3, #0]
  HAL_TIM_Base_Stop(&htim4);
 8009a88:	483f      	ldr	r0, [pc, #252]	; (8009b88 <main+0xa7c>)
  Dac_y += DAC_DHR12R2_ALIGNMENT(DAC_ALIGN_12B_R);
 8009a8a:	3114      	adds	r1, #20
 8009a8c:	6019      	str	r1, [r3, #0]
  HAL_TIM_Base_Stop(&htim4);
 8009a8e:	f7f9 fc98 	bl	80033c2 <HAL_TIM_Base_Stop>
  uint8_t receivedchar='\r';
 8009a92:	230d      	movs	r3, #13
  HAL_UART_Transmit(&huart2, &receivedchar, 1, 50);
 8009a94:	2201      	movs	r2, #1
 8009a96:	483d      	ldr	r0, [pc, #244]	; (8009b8c <main+0xa80>)
  uint8_t receivedchar='\r';
 8009a98:	f804 3d71 	strb.w	r3, [r4, #-113]!
  HAL_UART_Transmit(&huart2, &receivedchar, 1, 50);
 8009a9c:	2332      	movs	r3, #50	; 0x32
 8009a9e:	4621      	mov	r1, r4
 8009aa0:	f7f9 ff31 	bl	8003906 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart6, &receivedchar, 1, 50);
 8009aa4:	2332      	movs	r3, #50	; 0x32
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	4621      	mov	r1, r4
 8009aaa:	4839      	ldr	r0, [pc, #228]	; (8009b90 <main+0xa84>)
 8009aac:	f7f9 ff2b 	bl	8003906 <HAL_UART_Transmit>
  HAL_Delay(50);
 8009ab0:	2032      	movs	r0, #50	; 0x32
 8009ab2:	f7f6 fff9 	bl	8000aa8 <HAL_Delay>
  HAL_UART_Receive(&huart2, &receivedchar, 1,10);
 8009ab6:	230a      	movs	r3, #10
 8009ab8:	2201      	movs	r2, #1
 8009aba:	4621      	mov	r1, r4
 8009abc:	4640      	mov	r0, r8
 8009abe:	f7f9 ff7b 	bl	80039b8 <HAL_UART_Receive>
  HAL_UART_Receive(&huart6, &receivedchar, 1,10);
 8009ac2:	230a      	movs	r3, #10
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	4831      	ldr	r0, [pc, #196]	; (8009b90 <main+0xa84>)
 8009aca:	f7f9 ff75 	bl	80039b8 <HAL_UART_Receive>
  for (int i=0; i<50; i++)
 8009ace:	3e01      	subs	r6, #1
 8009ad0:	d1f1      	bne.n	8009ab6 <main+0x9aa>
  rotate(4095, 0); //theta = 0
 8009ad2:	4631      	mov	r1, r6
 8009ad4:	f640 70ff 	movw	r0, #4095	; 0xfff
	  if(windowchanged != 0)
 8009ad8:	4c2e      	ldr	r4, [pc, #184]	; (8009b94 <main+0xa88>)
  rotate(4095, 0); //theta = 0
 8009ada:	f7ff fa43 	bl	8008f64 <rotate>
  zoom(4095,4095); //end state of zoom back
 8009ade:	f640 71ff 	movw	r1, #4095	; 0xfff
			  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8009ae2:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8009b20 <main+0xa14>
 8009ae6:	46a0      	mov	r8, r4
  zoom(4095,4095); //end state of zoom back
 8009ae8:	4608      	mov	r0, r1
 8009aea:	f7ff fa54 	bl	8008f96 <zoom>
if(mainloop++==0)
 8009aee:	4b2a      	ldr	r3, [pc, #168]	; (8009b98 <main+0xa8c>)
 8009af0:	8819      	ldrh	r1, [r3, #0]
 8009af2:	1c4a      	adds	r2, r1, #1
 8009af4:	801a      	strh	r2, [r3, #0]
 8009af6:	b931      	cbnz	r1, 8009b06 <main+0x9fa>
	if(mainloopp++==10)
 8009af8:	4a28      	ldr	r2, [pc, #160]	; (8009b9c <main+0xa90>)
 8009afa:	8813      	ldrh	r3, [r2, #0]
 8009afc:	2b0a      	cmp	r3, #10
 8009afe:	bf16      	itet	ne
 8009b00:	3301      	addne	r3, #1
    mainloopp=0;
 8009b02:	8011      	strheq	r1, [r2, #0]
	if(mainloopp++==10)
 8009b04:	8013      	strhne	r3, [r2, #0]
	  if(windowchanged != 0)
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d054      	beq.n	8009bb6 <main+0xaaa>
		  if(windowchanged==1)
 8009b0c:	6823      	ldr	r3, [r4, #0]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d148      	bne.n	8009ba4 <main+0xa98>
		  windowset(0,0,0,0);
 8009b12:	2300      	movs	r3, #0
 8009b14:	461a      	mov	r2, r3
 8009b16:	4619      	mov	r1, r3
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7ff faa9 	bl	8009070 <windowset>
 8009b1e:	e041      	b.n	8009ba4 <main+0xa98>
 8009b20:	40020400 	.word	0x40020400
 8009b24:	40021400 	.word	0x40021400
 8009b28:	40020000 	.word	0x40020000
 8009b2c:	2000ed28 	.word	0x2000ed28
 8009b30:	0800b84c 	.word	0x0800b84c
 8009b34:	2000ee8c 	.word	0x2000ee8c
 8009b38:	20010342 	.word	0x20010342
 8009b3c:	2000efdc 	.word	0x2000efdc
 8009b40:	2000ed7c 	.word	0x2000ed7c
 8009b44:	2000f0f4 	.word	0x2000f0f4
 8009b48:	2000ed74 	.word	0x2000ed74
 8009b4c:	2000ef0c 	.word	0x2000ef0c
 8009b50:	2000f054 	.word	0x2000f054
 8009b54:	08008651 	.word	0x08008651
 8009b58:	0800874d 	.word	0x0800874d
 8009b5c:	20000008 	.word	0x20000008
 8009b60:	2000e528 	.word	0x2000e528
 8009b64:	2000f5f0 	.word	0x2000f5f0
 8009b68:	20000020 	.word	0x20000020
 8009b6c:	2000f370 	.word	0x2000f370
 8009b70:	2000fe30 	.word	0x2000fe30
 8009b74:	2000f0f8 	.word	0x2000f0f8
 8009b78:	2000001c 	.word	0x2000001c
 8009b7c:	200003bc 	.word	0x200003bc
 8009b80:	2000039c 	.word	0x2000039c
 8009b84:	200003a0 	.word	0x200003a0
 8009b88:	2000e2e8 	.word	0x2000e2e8
 8009b8c:	20010030 	.word	0x20010030
 8009b90:	2000f300 	.word	0x2000f300
 8009b94:	200003d8 	.word	0x200003d8
 8009b98:	2000000c 	.word	0x2000000c
 8009b9c:	2000000e 	.word	0x2000000e
 8009ba0:	2000f570 	.word	0x2000f570
		  windowchanged=0;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	f8c8 3000 	str.w	r3, [r8]
		  if(isDacTimerOn == 1)
 8009baa:	682b      	ldr	r3, [r5, #0]
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d102      	bne.n	8009bb6 <main+0xaaa>
		  HAL_TIM_Base_Start(&htim4);
 8009bb0:	4819      	ldr	r0, [pc, #100]	; (8009c18 <main+0xb0c>)
 8009bb2:	f7f9 fbf9 	bl	80033a8 <HAL_TIM_Base_Start>
	  if (flag == 1)
 8009bb6:	4e19      	ldr	r6, [pc, #100]	; (8009c1c <main+0xb10>)
 8009bb8:	6833      	ldr	r3, [r6, #0]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d119      	bne.n	8009bf2 <main+0xae6>
		  flagtcp=1;
 8009bbe:	4a18      	ldr	r2, [pc, #96]	; (8009c20 <main+0xb14>)
 8009bc0:	6013      	str	r3, [r2, #0]
	  	 ans->p->payload = cc;
 8009bc2:	4b18      	ldr	r3, [pc, #96]	; (8009c24 <main+0xb18>)
 8009bc4:	4a18      	ldr	r2, [pc, #96]	; (8009c28 <main+0xb1c>)
 8009bc6:	6819      	ldr	r1, [r3, #0]
 8009bc8:	688b      	ldr	r3, [r1, #8]
	  	 tcp_echoserver_send(ans->pcb, ans);
 8009bca:	6848      	ldr	r0, [r1, #4]
	  	 ans->p->payload = cc;
 8009bcc:	605a      	str	r2, [r3, #4]
	  	 tcp_echoserver_send(ans->pcb, ans);
 8009bce:	f000 fc3f 	bl	800a450 <tcp_echoserver_send>
	  	 flag = 0;
 8009bd2:	2200      	movs	r2, #0
	  	 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 8009bd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009bd8:	4814      	ldr	r0, [pc, #80]	; (8009c2c <main+0xb20>)
	  	 flag = 0;
 8009bda:	6032      	str	r2, [r6, #0]
	  	 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 8009bdc:	f7f8 fb90 	bl	8002300 <HAL_GPIO_WritePin>
	  MX_LWIP_Process();
 8009be0:	f7fe fd2c 	bl	800863c <MX_LWIP_Process>
if(mainloop++==0)
 8009be4:	e783      	b.n	8009aee <main+0x9e2>
    Row2Bytes[i] = (char)(i >> 8);
 8009be6:	1226      	asrs	r6, r4, #8
    Row1Bytes[i] = (char)i;
 8009be8:	5464      	strb	r4, [r4, r1]
    d[i]=0;
 8009bea:	551d      	strb	r5, [r3, r4]
    Row2Bytes[i] = (char)(i >> 8);
 8009bec:	5426      	strb	r6, [r4, r0]
  for(int i=0; i<wny; i++)
 8009bee:	3401      	adds	r4, #1
 8009bf0:	e731      	b.n	8009a56 <main+0x94a>
		  if (isReadyToSend>=1)
 8009bf2:	4e0f      	ldr	r6, [pc, #60]	; (8009c30 <main+0xb24>)
 8009bf4:	6833      	ldr	r3, [r6, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	ddf2      	ble.n	8009be0 <main+0xad4>
			  gnetif.linkoutput(&gnetif,buf[isReadyToSend-1]);
 8009bfa:	6833      	ldr	r3, [r6, #0]
 8009bfc:	480d      	ldr	r0, [pc, #52]	; (8009c34 <main+0xb28>)
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	6982      	ldr	r2, [r0, #24]
 8009c02:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8009c06:	4790      	blx	r2
			  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8009c08:	2180      	movs	r1, #128	; 0x80
 8009c0a:	4648      	mov	r0, r9
 8009c0c:	f7f8 fb7d 	bl	800230a <HAL_GPIO_TogglePin>
		  	  isReadyToSend = 0;
 8009c10:	2300      	movs	r3, #0
 8009c12:	6033      	str	r3, [r6, #0]
 8009c14:	e7e4      	b.n	8009be0 <main+0xad4>
 8009c16:	bf00      	nop
 8009c18:	2000e2e8 	.word	0x2000e2e8
 8009c1c:	200003ac 	.word	0x200003ac
 8009c20:	200003b0 	.word	0x200003b0
 8009c24:	20010368 	.word	0x20010368
 8009c28:	2000e204 	.word	0x2000e204
 8009c2c:	40021400 	.word	0x40021400
 8009c30:	200003c0 	.word	0x200003c0
 8009c34:	2000e1c0 	.word	0x2000e1c0

08009c38 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8009c38:	4770      	bx	lr
	...

08009c3c <DMA_ADC1_TransferError>:
	HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
}
static void DMA_ADC1_TransferError(DMA_HandleTypeDef *DmaHandle)
{
	//DMA_ADC1_transferCompleteDetected = 1;
	HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8009c3c:	2101      	movs	r1, #1
 8009c3e:	4801      	ldr	r0, [pc, #4]	; (8009c44 <DMA_ADC1_TransferError+0x8>)
 8009c40:	f7f8 bb63 	b.w	800230a <HAL_GPIO_TogglePin>
 8009c44:	40020400 	.word	0x40020400

08009c48 <DMA_ADC1_TransferComplete>:
	HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8009c48:	2180      	movs	r1, #128	; 0x80
 8009c4a:	4801      	ldr	r0, [pc, #4]	; (8009c50 <DMA_ADC1_TransferComplete+0x8>)
 8009c4c:	f7f8 bb5d 	b.w	800230a <HAL_GPIO_TogglePin>
 8009c50:	40020400 	.word	0x40020400

08009c54 <HAL_MspInit>:
{
 8009c54:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009c56:	2003      	movs	r0, #3
 8009c58:	f7f7 fa10 	bl	800107c <HAL_NVIC_SetPriorityGrouping>
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f06f 000b 	mvn.w	r0, #11
 8009c62:	4611      	mov	r1, r2
 8009c64:	f7f7 fa1c 	bl	80010a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8009c68:	2200      	movs	r2, #0
 8009c6a:	f06f 000a 	mvn.w	r0, #10
 8009c6e:	4611      	mov	r1, r2
 8009c70:	f7f7 fa16 	bl	80010a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8009c74:	2200      	movs	r2, #0
 8009c76:	f06f 0009 	mvn.w	r0, #9
 8009c7a:	4611      	mov	r1, r2
 8009c7c:	f7f7 fa10 	bl	80010a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8009c80:	2200      	movs	r2, #0
 8009c82:	f06f 0004 	mvn.w	r0, #4
 8009c86:	4611      	mov	r1, r2
 8009c88:	f7f7 fa0a 	bl	80010a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f06f 0003 	mvn.w	r0, #3
 8009c92:	4611      	mov	r1, r2
 8009c94:	f7f7 fa04 	bl	80010a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f06f 0001 	mvn.w	r0, #1
 8009c9e:	4611      	mov	r1, r2
 8009ca0:	f7f7 f9fe 	bl	80010a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8009caa:	4611      	mov	r1, r2
}
 8009cac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009cb0:	f7f7 b9f6 	b.w	80010a0 <HAL_NVIC_SetPriority>

08009cb4 <HAL_ADC_MspInit>:
  if(hadc->Instance==ADC1)
 8009cb4:	6803      	ldr	r3, [r0, #0]
 8009cb6:	4a51      	ldr	r2, [pc, #324]	; (8009dfc <HAL_ADC_MspInit+0x148>)
 8009cb8:	4293      	cmp	r3, r2
{
 8009cba:	b570      	push	{r4, r5, r6, lr}
 8009cbc:	4606      	mov	r6, r0
 8009cbe:	b088      	sub	sp, #32
  if(hadc->Instance==ADC1)
 8009cc0:	d14f      	bne.n	8009d62 <HAL_ADC_MspInit+0xae>
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009cc2:	4b4f      	ldr	r3, [pc, #316]	; (8009e00 <HAL_ADC_MspInit+0x14c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cc4:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009cc6:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009cc8:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009cca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009ccc:	484d      	ldr	r0, [pc, #308]	; (8009e04 <HAL_ADC_MspInit+0x150>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009cce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cd2:	645a      	str	r2, [r3, #68]	; 0x44
 8009cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009cd6:	9404      	str	r4, [sp, #16]
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cdc:	9505      	str	r5, [sp, #20]
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009cde:	9300      	str	r3, [sp, #0]
 8009ce0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8009ce2:	2309      	movs	r3, #9
 8009ce4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009ce6:	f7f8 fa21 	bl	800212c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_6;
 8009cea:	2349      	movs	r3, #73	; 0x49
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009cec:	a903      	add	r1, sp, #12
 8009cee:	4846      	ldr	r0, [pc, #280]	; (8009e08 <HAL_ADC_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_6;
 8009cf0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009cf2:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cf4:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009cf6:	f7f8 fa19 	bl	800212c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009cfa:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009cfc:	4843      	ldr	r0, [pc, #268]	; (8009e0c <HAL_ADC_MspInit+0x158>)
 8009cfe:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009d00:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009d02:	9303      	str	r3, [sp, #12]
    hdma_adc1.Instance = DMA2_Stream0;
 8009d04:	4c42      	ldr	r4, [pc, #264]	; (8009e10 <HAL_ADC_MspInit+0x15c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d06:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009d08:	f7f8 fa10 	bl	800212c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8009d0c:	4b41      	ldr	r3, [pc, #260]	; (8009e14 <HAL_ADC_MspInit+0x160>)
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8009d0e:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009d10:	60a5      	str	r5, [r4, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8009d12:	60e5      	str	r5, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009d14:	6165      	str	r5, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009d16:	61a5      	str	r5, [r4, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8009d18:	61e5      	str	r5, [r4, #28]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009d1a:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8009d1c:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8009d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d24:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8009d26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009d2a:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8009d2c:	f7f7 faf6 	bl	800131c <HAL_DMA_Init>
 8009d30:	b108      	cbz	r0, 8009d36 <HAL_ADC_MspInit+0x82>
      Error_Handler();
 8009d32:	f7ff ff81 	bl	8009c38 <Error_Handler>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8009d36:	2200      	movs	r2, #0
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8009d38:	63b4      	str	r4, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8009d3a:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8009d3c:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8009d3e:	4611      	mov	r1, r2
 8009d40:	f7f7 f9ae 	bl	80010a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8009d44:	2012      	movs	r0, #18
 8009d46:	f7f7 f9e3 	bl	8001110 <HAL_NVIC_EnableIRQ>
    HAL_DMA_RegisterCallback(&hdma_adc1, HAL_DMA_XFER_CPLT_CB_ID, DMA_ADC1_TransferComplete);
 8009d4a:	4a33      	ldr	r2, [pc, #204]	; (8009e18 <HAL_ADC_MspInit+0x164>)
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	4830      	ldr	r0, [pc, #192]	; (8009e10 <HAL_ADC_MspInit+0x15c>)
 8009d50:	f7f7 fc32 	bl	80015b8 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_adc1, HAL_DMA_XFER_ERROR_CB_ID, DMA_ADC1_TransferError);
 8009d54:	4a31      	ldr	r2, [pc, #196]	; (8009e1c <HAL_ADC_MspInit+0x168>)
 8009d56:	2104      	movs	r1, #4
 8009d58:	482d      	ldr	r0, [pc, #180]	; (8009e10 <HAL_ADC_MspInit+0x15c>)
 8009d5a:	f7f7 fc2d 	bl	80015b8 <HAL_DMA_RegisterCallback>
}
 8009d5e:	b008      	add	sp, #32
 8009d60:	bd70      	pop	{r4, r5, r6, pc}
  else if(hadc->Instance==ADC2)
 8009d62:	4a2f      	ldr	r2, [pc, #188]	; (8009e20 <HAL_ADC_MspInit+0x16c>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d12c      	bne.n	8009dc2 <HAL_ADC_MspInit+0x10e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8009d68:	4b25      	ldr	r3, [pc, #148]	; (8009e00 <HAL_ADC_MspInit+0x14c>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009d6a:	2503      	movs	r5, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d6c:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009d6e:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC2_CLK_ENABLE();
 8009d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009d72:	4824      	ldr	r0, [pc, #144]	; (8009e04 <HAL_ADC_MspInit+0x150>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8009d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d78:	645a      	str	r2, [r3, #68]	; 0x44
 8009d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009d7c:	9504      	str	r5, [sp, #16]
    __HAL_RCC_ADC2_CLK_ENABLE();
 8009d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d82:	9405      	str	r4, [sp, #20]
    __HAL_RCC_ADC2_CLK_ENABLE();
 8009d84:	9301      	str	r3, [sp, #4]
 8009d86:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8009d88:	2309      	movs	r3, #9
 8009d8a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009d8c:	f7f8 f9ce 	bl	800212c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_6;
 8009d90:	2349      	movs	r3, #73	; 0x49
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d92:	a903      	add	r1, sp, #12
 8009d94:	481c      	ldr	r0, [pc, #112]	; (8009e08 <HAL_ADC_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_6;
 8009d96:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009d98:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d9a:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d9c:	f7f8 f9c6 	bl	800212c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009da0:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009da2:	a903      	add	r1, sp, #12
 8009da4:	4819      	ldr	r0, [pc, #100]	; (8009e0c <HAL_ADC_MspInit+0x158>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009da6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009da8:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009daa:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009dac:	f7f8 f9be 	bl	800212c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8009db0:	4622      	mov	r2, r4
 8009db2:	4621      	mov	r1, r4
 8009db4:	2012      	movs	r0, #18
 8009db6:	f7f7 f973 	bl	80010a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8009dba:	2012      	movs	r0, #18
 8009dbc:	f7f7 f9a8 	bl	8001110 <HAL_NVIC_EnableIRQ>
}
 8009dc0:	e7cd      	b.n	8009d5e <HAL_ADC_MspInit+0xaa>
  else if(hadc->Instance==ADC3)
 8009dc2:	4a18      	ldr	r2, [pc, #96]	; (8009e24 <HAL_ADC_MspInit+0x170>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d1ca      	bne.n	8009d5e <HAL_ADC_MspInit+0xaa>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8009dc8:	4b0d      	ldr	r3, [pc, #52]	; (8009e00 <HAL_ADC_MspInit+0x14c>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8009dca:	2609      	movs	r6, #9
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009dcc:	2503      	movs	r5, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dce:	2400      	movs	r4, #0
    __HAL_RCC_ADC3_CLK_ENABLE();
 8009dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009dd2:	a903      	add	r1, sp, #12
 8009dd4:	480b      	ldr	r0, [pc, #44]	; (8009e04 <HAL_ADC_MspInit+0x150>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8009dd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009dda:	645a      	str	r2, [r3, #68]	; 0x44
 8009ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8009dde:	9603      	str	r6, [sp, #12]
    __HAL_RCC_ADC3_CLK_ENABLE();
 8009de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009de4:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009de6:	9405      	str	r4, [sp, #20]
    __HAL_RCC_ADC3_CLK_ENABLE();
 8009de8:	9302      	str	r3, [sp, #8]
 8009dea:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009dec:	f7f8 f99e 	bl	800212c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8009df0:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009df2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009df4:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009df6:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009df8:	4803      	ldr	r0, [pc, #12]	; (8009e08 <HAL_ADC_MspInit+0x154>)
 8009dfa:	e7d7      	b.n	8009dac <HAL_ADC_MspInit+0xf8>
 8009dfc:	40012000 	.word	0x40012000
 8009e00:	40023800 	.word	0x40023800
 8009e04:	40020800 	.word	0x40020800
 8009e08:	40020000 	.word	0x40020000
 8009e0c:	40020400 	.word	0x40020400
 8009e10:	2000f054 	.word	0x2000f054
 8009e14:	40026410 	.word	0x40026410
 8009e18:	08009c49 	.word	0x08009c49
 8009e1c:	08009c3d 	.word	0x08009c3d
 8009e20:	40012100 	.word	0x40012100
 8009e24:	40012200 	.word	0x40012200

08009e28 <HAL_CAN_MspInit>:
  if(hcan->Instance==CAN1)
 8009e28:	6803      	ldr	r3, [r0, #0]
 8009e2a:	4a27      	ldr	r2, [pc, #156]	; (8009ec8 <HAL_CAN_MspInit+0xa0>)
 8009e2c:	4293      	cmp	r3, r2
{
 8009e2e:	b500      	push	{lr}
 8009e30:	b089      	sub	sp, #36	; 0x24
  if(hcan->Instance==CAN1)
 8009e32:	d11f      	bne.n	8009e74 <HAL_CAN_MspInit+0x4c>
    HAL_RCC_CAN1_CLK_ENABLED++;
 8009e34:	4a25      	ldr	r2, [pc, #148]	; (8009ecc <HAL_CAN_MspInit+0xa4>)
 8009e36:	6813      	ldr	r3, [r2, #0]
 8009e38:	3301      	adds	r3, #1
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8009e3a:	2b01      	cmp	r3, #1
    HAL_RCC_CAN1_CLK_ENABLED++;
 8009e3c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8009e3e:	d109      	bne.n	8009e54 <HAL_CAN_MspInit+0x2c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8009e40:	4b23      	ldr	r3, [pc, #140]	; (8009ed0 <HAL_CAN_MspInit+0xa8>)
 8009e42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e44:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8009e48:	641a      	str	r2, [r3, #64]	; 0x40
 8009e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e50:	9300      	str	r3, [sp, #0]
 8009e52:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009e54:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e56:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009e58:	a903      	add	r1, sp, #12
 8009e5a:	481e      	ldr	r0, [pc, #120]	; (8009ed4 <HAL_CAN_MspInit+0xac>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009e5c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e5e:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e60:	2200      	movs	r2, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e62:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8009e64:	2309      	movs	r3, #9
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e66:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8009e68:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e6a:	f7f8 f95f 	bl	800212c <HAL_GPIO_Init>
}
 8009e6e:	b009      	add	sp, #36	; 0x24
 8009e70:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(hcan->Instance==CAN2)
 8009e74:	4a18      	ldr	r2, [pc, #96]	; (8009ed8 <HAL_CAN_MspInit+0xb0>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d1f9      	bne.n	8009e6e <HAL_CAN_MspInit+0x46>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8009e7a:	4b15      	ldr	r3, [pc, #84]	; (8009ed0 <HAL_CAN_MspInit+0xa8>)
    HAL_RCC_CAN1_CLK_ENABLED++;
 8009e7c:	4913      	ldr	r1, [pc, #76]	; (8009ecc <HAL_CAN_MspInit+0xa4>)
    __HAL_RCC_CAN2_CLK_ENABLE();
 8009e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e80:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009e84:	641a      	str	r2, [r3, #64]	; 0x40
 8009e86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e88:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8009e8c:	9201      	str	r2, [sp, #4]
 8009e8e:	9a01      	ldr	r2, [sp, #4]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8009e90:	680a      	ldr	r2, [r1, #0]
 8009e92:	3201      	adds	r2, #1
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8009e94:	2a01      	cmp	r2, #1
    HAL_RCC_CAN1_CLK_ENABLED++;
 8009e96:	600a      	str	r2, [r1, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8009e98:	d108      	bne.n	8009eac <HAL_CAN_MspInit+0x84>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8009e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e9c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8009ea0:	641a      	str	r2, [r3, #64]	; 0x40
 8009ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ea8:	9302      	str	r3, [sp, #8]
 8009eaa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8009eac:	f44f 5382 	mov.w	r3, #4160	; 0x1040
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009eb0:	a903      	add	r1, sp, #12
 8009eb2:	480a      	ldr	r0, [pc, #40]	; (8009edc <HAL_CAN_MspInit+0xb4>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8009eb4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009eb6:	2302      	movs	r3, #2
 8009eb8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ebe:	2303      	movs	r3, #3
 8009ec0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8009ec2:	2309      	movs	r3, #9
 8009ec4:	9307      	str	r3, [sp, #28]
 8009ec6:	e7d0      	b.n	8009e6a <HAL_CAN_MspInit+0x42>
 8009ec8:	40006400 	.word	0x40006400
 8009ecc:	200003dc 	.word	0x200003dc
 8009ed0:	40023800 	.word	0x40023800
 8009ed4:	40020c00 	.word	0x40020c00
 8009ed8:	40006800 	.word	0x40006800
 8009edc:	40020400 	.word	0x40020400

08009ee0 <HAL_DAC_MspInit>:
  if(hdac->Instance==DAC)
 8009ee0:	6802      	ldr	r2, [r0, #0]
 8009ee2:	4b2f      	ldr	r3, [pc, #188]	; (8009fa0 <HAL_DAC_MspInit+0xc0>)
 8009ee4:	429a      	cmp	r2, r3
{
 8009ee6:	b570      	push	{r4, r5, r6, lr}
 8009ee8:	4605      	mov	r5, r0
 8009eea:	b086      	sub	sp, #24
  if(hdac->Instance==DAC)
 8009eec:	d155      	bne.n	8009f9a <HAL_DAC_MspInit+0xba>
    __HAL_RCC_DAC_CLK_ENABLE();
 8009eee:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ef2:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ef4:	482b      	ldr	r0, [pc, #172]	; (8009fa4 <HAL_DAC_MspInit+0xc4>)
 8009ef6:	a901      	add	r1, sp, #4
    __HAL_RCC_DAC_CLK_ENABLE();
 8009ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    hdma_dac1.Instance = DMA1_Stream5;
 8009efa:	4c2b      	ldr	r4, [pc, #172]	; (8009fa8 <HAL_DAC_MspInit+0xc8>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8009efc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8009f00:	641a      	str	r2, [r3, #64]	; 0x40
 8009f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f04:	9603      	str	r6, [sp, #12]
    __HAL_RCC_DAC_CLK_ENABLE();
 8009f06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8009f0e:	2330      	movs	r3, #48	; 0x30
 8009f10:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009f12:	2303      	movs	r3, #3
 8009f14:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f16:	f7f8 f909 	bl	800212c <HAL_GPIO_Init>
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009f1a:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8009f1e:	4a23      	ldr	r2, [pc, #140]	; (8009fac <HAL_DAC_MspInit+0xcc>)
 8009f20:	f04f 0c40 	mov.w	ip, #64	; 0x40
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8009f24:	4620      	mov	r0, r4
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8009f26:	60e6      	str	r6, [r4, #12]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009f28:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009f2a:	e884 100c 	stmia.w	r4, {r2, r3, ip}
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8009f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f32:	6123      	str	r3, [r4, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f38:	6163      	str	r3, [r4, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009f3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009f3e:	61a3      	str	r3, [r4, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8009f40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f44:	61e3      	str	r3, [r4, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8009f46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009f4a:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8009f4c:	f7f7 f9e6 	bl	800131c <HAL_DMA_Init>
 8009f50:	b108      	cbz	r0, 8009f56 <HAL_DAC_MspInit+0x76>
      Error_Handler();
 8009f52:	f7ff fe71 	bl	8009c38 <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8009f56:	60ac      	str	r4, [r5, #8]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8009f58:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8009f5c:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009f5e:	f04f 6660 	mov.w	r6, #234881024	; 0xe000000
    hdma_dac2.Instance = DMA1_Stream6;
 8009f62:	4c13      	ldr	r4, [pc, #76]	; (8009fb0 <HAL_DAC_MspInit+0xd0>)
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009f64:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8009f68:	4b12      	ldr	r3, [pc, #72]	; (8009fb4 <HAL_DAC_MspInit+0xd4>)
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8009f6a:	6122      	str	r2, [r4, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009f6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8009f70:	4620      	mov	r0, r4
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009f72:	6162      	str	r2, [r4, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009f74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009f78:	e884 4048 	stmia.w	r4, {r3, r6, lr}
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009f7c:	61a2      	str	r2, [r4, #24]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8009f7e:	2300      	movs	r3, #0
    hdma_dac2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8009f80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8009f84:	60e3      	str	r3, [r4, #12]
    hdma_dac2.Init.Mode = DMA_NORMAL;
 8009f86:	61e3      	str	r3, [r4, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8009f88:	6222      	str	r2, [r4, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009f8a:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8009f8c:	f7f7 f9c6 	bl	800131c <HAL_DMA_Init>
 8009f90:	b108      	cbz	r0, 8009f96 <HAL_DAC_MspInit+0xb6>
      Error_Handler();
 8009f92:	f7ff fe51 	bl	8009c38 <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8009f96:	60ec      	str	r4, [r5, #12]
 8009f98:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8009f9a:	b006      	add	sp, #24
 8009f9c:	bd70      	pop	{r4, r5, r6, pc}
 8009f9e:	bf00      	nop
 8009fa0:	40007400 	.word	0x40007400
 8009fa4:	40020000 	.word	0x40020000
 8009fa8:	2000ee24 	.word	0x2000ee24
 8009fac:	40026088 	.word	0x40026088
 8009fb0:	200102e0 	.word	0x200102e0
 8009fb4:	400260a0 	.word	0x400260a0

08009fb8 <HAL_SPI_MspInit>:
  if(hspi->Instance==SPI2)
 8009fb8:	6803      	ldr	r3, [r0, #0]
 8009fba:	4a39      	ldr	r2, [pc, #228]	; (800a0a0 <HAL_SPI_MspInit+0xe8>)
 8009fbc:	4293      	cmp	r3, r2
{
 8009fbe:	b500      	push	{lr}
 8009fc0:	b08b      	sub	sp, #44	; 0x2c
  if(hspi->Instance==SPI2)
 8009fc2:	d11b      	bne.n	8009ffc <HAL_SPI_MspInit+0x44>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009fc4:	4b37      	ldr	r3, [pc, #220]	; (800a0a4 <HAL_SPI_MspInit+0xec>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009fc6:	a905      	add	r1, sp, #20
 8009fc8:	4837      	ldr	r0, [pc, #220]	; (800a0a8 <HAL_SPI_MspInit+0xf0>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009fcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009fd0:	641a      	str	r2, [r3, #64]	; 0x40
 8009fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fd8:	9301      	str	r3, [sp, #4]
 8009fda:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8009fdc:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8009fe0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fe2:	2302      	movs	r3, #2
 8009fe4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fea:	2303      	movs	r3, #3
 8009fec:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009fee:	2305      	movs	r3, #5
 8009ff0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009ff2:	f7f8 f89b 	bl	800212c <HAL_GPIO_Init>
}
 8009ff6:	b00b      	add	sp, #44	; 0x2c
 8009ff8:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(hspi->Instance==SPI3)
 8009ffc:	4a2b      	ldr	r2, [pc, #172]	; (800a0ac <HAL_SPI_MspInit+0xf4>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d117      	bne.n	800a032 <HAL_SPI_MspInit+0x7a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a002:	4b28      	ldr	r3, [pc, #160]	; (800a0a4 <HAL_SPI_MspInit+0xec>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a004:	a905      	add	r1, sp, #20
 800a006:	482a      	ldr	r0, [pc, #168]	; (800a0b0 <HAL_SPI_MspInit+0xf8>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a00a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a00e:	641a      	str	r2, [r3, #64]	; 0x40
 800a010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a012:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a016:	9302      	str	r3, [sp, #8]
 800a018:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800a01a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a01e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a020:	2302      	movs	r3, #2
 800a022:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a024:	2300      	movs	r3, #0
 800a026:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a028:	2303      	movs	r3, #3
 800a02a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a02c:	2306      	movs	r3, #6
 800a02e:	9309      	str	r3, [sp, #36]	; 0x24
 800a030:	e7df      	b.n	8009ff2 <HAL_SPI_MspInit+0x3a>
  else if(hspi->Instance==SPI4)
 800a032:	4a20      	ldr	r2, [pc, #128]	; (800a0b4 <HAL_SPI_MspInit+0xfc>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d117      	bne.n	800a068 <HAL_SPI_MspInit+0xb0>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800a038:	4b1a      	ldr	r3, [pc, #104]	; (800a0a4 <HAL_SPI_MspInit+0xec>)
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a03a:	a905      	add	r1, sp, #20
 800a03c:	481e      	ldr	r0, [pc, #120]	; (800a0b8 <HAL_SPI_MspInit+0x100>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 800a03e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a044:	645a      	str	r2, [r3, #68]	; 0x44
 800a046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a048:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a04c:	9303      	str	r3, [sp, #12]
 800a04e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800a050:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800a054:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a056:	2302      	movs	r3, #2
 800a058:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a05a:	2300      	movs	r3, #0
 800a05c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a05e:	2303      	movs	r3, #3
 800a060:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800a062:	2305      	movs	r3, #5
 800a064:	9309      	str	r3, [sp, #36]	; 0x24
 800a066:	e7c4      	b.n	8009ff2 <HAL_SPI_MspInit+0x3a>
  else if(hspi->Instance==SPI5)
 800a068:	4a14      	ldr	r2, [pc, #80]	; (800a0bc <HAL_SPI_MspInit+0x104>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d1c3      	bne.n	8009ff6 <HAL_SPI_MspInit+0x3e>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800a06e:	4b0d      	ldr	r3, [pc, #52]	; (800a0a4 <HAL_SPI_MspInit+0xec>)
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a070:	a905      	add	r1, sp, #20
 800a072:	4813      	ldr	r0, [pc, #76]	; (800a0c0 <HAL_SPI_MspInit+0x108>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 800a074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a076:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a07a:	645a      	str	r2, [r3, #68]	; 0x44
 800a07c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a07e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a082:	9304      	str	r3, [sp, #16]
 800a084:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800a086:	f44f 7360 	mov.w	r3, #896	; 0x380
 800a08a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a08c:	2302      	movs	r3, #2
 800a08e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a090:	2300      	movs	r3, #0
 800a092:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a094:	2303      	movs	r3, #3
 800a096:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800a098:	2305      	movs	r3, #5
 800a09a:	9309      	str	r3, [sp, #36]	; 0x24
 800a09c:	e7a9      	b.n	8009ff2 <HAL_SPI_MspInit+0x3a>
 800a09e:	bf00      	nop
 800a0a0:	40003800 	.word	0x40003800
 800a0a4:	40023800 	.word	0x40023800
 800a0a8:	40020400 	.word	0x40020400
 800a0ac:	40003c00 	.word	0x40003c00
 800a0b0:	40020800 	.word	0x40020800
 800a0b4:	40013400 	.word	0x40013400
 800a0b8:	40021000 	.word	0x40021000
 800a0bc:	40015000 	.word	0x40015000
 800a0c0:	40021400 	.word	0x40021400

0800a0c4 <HAL_TIM_Base_MspInit>:
  if(htim_base->Instance==TIM1)
 800a0c4:	6803      	ldr	r3, [r0, #0]
{
 800a0c6:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM1)
 800a0c8:	4a15      	ldr	r2, [pc, #84]	; (800a120 <HAL_TIM_Base_MspInit+0x5c>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d10b      	bne.n	800a0e6 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a0ce:	4b15      	ldr	r3, [pc, #84]	; (800a124 <HAL_TIM_Base_MspInit+0x60>)
 800a0d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0d2:	f042 0201 	orr.w	r2, r2, #1
 800a0d6:	645a      	str	r2, [r3, #68]	; 0x44
 800a0d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0da:	f003 0301 	and.w	r3, r3, #1
 800a0de:	9301      	str	r3, [sp, #4]
 800a0e0:	9b01      	ldr	r3, [sp, #4]
}
 800a0e2:	b004      	add	sp, #16
 800a0e4:	4770      	bx	lr
  else if(htim_base->Instance==TIM2)
 800a0e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0ea:	d10b      	bne.n	800a104 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a0ec:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800a0f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a0f2:	f042 0201 	orr.w	r2, r2, #1
 800a0f6:	641a      	str	r2, [r3, #64]	; 0x40
 800a0f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fa:	f003 0301 	and.w	r3, r3, #1
 800a0fe:	9302      	str	r3, [sp, #8]
 800a100:	9b02      	ldr	r3, [sp, #8]
 800a102:	e7ee      	b.n	800a0e2 <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM4)
 800a104:	4a08      	ldr	r2, [pc, #32]	; (800a128 <HAL_TIM_Base_MspInit+0x64>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d1eb      	bne.n	800a0e2 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a10a:	4b06      	ldr	r3, [pc, #24]	; (800a124 <HAL_TIM_Base_MspInit+0x60>)
 800a10c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a10e:	f042 0204 	orr.w	r2, r2, #4
 800a112:	641a      	str	r2, [r3, #64]	; 0x40
 800a114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a116:	f003 0304 	and.w	r3, r3, #4
 800a11a:	9303      	str	r3, [sp, #12]
 800a11c:	9b03      	ldr	r3, [sp, #12]
}
 800a11e:	e7e0      	b.n	800a0e2 <HAL_TIM_Base_MspInit+0x1e>
 800a120:	40010000 	.word	0x40010000
 800a124:	40023800 	.word	0x40023800
 800a128:	40000800 	.word	0x40000800

0800a12c <HAL_UART_MspInit>:
  if(huart->Instance==USART2)
 800a12c:	6803      	ldr	r3, [r0, #0]
 800a12e:	4a30      	ldr	r2, [pc, #192]	; (800a1f0 <HAL_UART_MspInit+0xc4>)
 800a130:	4293      	cmp	r3, r2
{
 800a132:	b570      	push	{r4, r5, r6, lr}
 800a134:	b088      	sub	sp, #32
  if(huart->Instance==USART2)
 800a136:	d12c      	bne.n	800a192 <HAL_UART_MspInit+0x66>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a138:	4b2e      	ldr	r3, [pc, #184]	; (800a1f4 <HAL_UART_MspInit+0xc8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a13a:	2402      	movs	r4, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a13c:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a13e:	2507      	movs	r5, #7
    __HAL_RCC_USART2_CLK_ENABLE();
 800a140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a142:	a903      	add	r1, sp, #12
 800a144:	482c      	ldr	r0, [pc, #176]	; (800a1f8 <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800a146:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a14a:	641a      	str	r2, [r3, #64]	; 0x40
 800a14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a14e:	9404      	str	r4, [sp, #16]
    __HAL_RCC_USART2_CLK_ENABLE();
 800a150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a154:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a156:	9507      	str	r5, [sp, #28]
    __HAL_RCC_USART2_CLK_ENABLE();
 800a158:	9301      	str	r3, [sp, #4]
 800a15a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800a15c:	2360      	movs	r3, #96	; 0x60
 800a15e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a160:	2301      	movs	r3, #1
 800a162:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a164:	f7f7 ffe2 	bl	800212c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800a168:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a16a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a16c:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a16e:	a903      	add	r1, sp, #12
 800a170:	4821      	ldr	r0, [pc, #132]	; (800a1f8 <HAL_UART_MspInit+0xcc>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800a172:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a174:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a176:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a178:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a17a:	f7f7 ffd7 	bl	800212c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800a17e:	2026      	movs	r0, #38	; 0x26
 800a180:	4622      	mov	r2, r4
 800a182:	4621      	mov	r1, r4
 800a184:	f7f6 ff8c 	bl	80010a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a188:	2026      	movs	r0, #38	; 0x26
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800a18a:	f7f6 ffc1 	bl	8001110 <HAL_NVIC_EnableIRQ>
}
 800a18e:	b008      	add	sp, #32
 800a190:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART6)
 800a192:	4a1a      	ldr	r2, [pc, #104]	; (800a1fc <HAL_UART_MspInit+0xd0>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d1fa      	bne.n	800a18e <HAL_UART_MspInit+0x62>
    __HAL_RCC_USART6_CLK_ENABLE();
 800a198:	4b16      	ldr	r3, [pc, #88]	; (800a1f4 <HAL_UART_MspInit+0xc8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a19a:	2402      	movs	r4, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a19c:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800a19e:	2508      	movs	r5, #8
    __HAL_RCC_USART6_CLK_ENABLE();
 800a1a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a1a2:	a903      	add	r1, sp, #12
 800a1a4:	4816      	ldr	r0, [pc, #88]	; (800a200 <HAL_UART_MspInit+0xd4>)
    __HAL_RCC_USART6_CLK_ENABLE();
 800a1a6:	f042 0220 	orr.w	r2, r2, #32
 800a1aa:	645a      	str	r2, [r3, #68]	; 0x44
 800a1ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1ae:	9404      	str	r4, [sp, #16]
    __HAL_RCC_USART6_CLK_ENABLE();
 800a1b0:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1b4:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800a1b6:	9507      	str	r5, [sp, #28]
    __HAL_RCC_USART6_CLK_ENABLE();
 800a1b8:	9302      	str	r3, [sp, #8]
 800a1ba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a1bc:	23c0      	movs	r3, #192	; 0xc0
 800a1be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a1c4:	f7f7 ffb2 	bl	800212c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800a1c8:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1cc:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1ce:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a1d0:	a903      	add	r1, sp, #12
 800a1d2:	480b      	ldr	r0, [pc, #44]	; (800a200 <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800a1d4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1d6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1d8:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800a1da:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a1dc:	f7f7 ffa6 	bl	800212c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800a1e0:	2047      	movs	r0, #71	; 0x47
 800a1e2:	4622      	mov	r2, r4
 800a1e4:	4621      	mov	r1, r4
 800a1e6:	f7f6 ff5b 	bl	80010a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800a1ea:	2047      	movs	r0, #71	; 0x47
 800a1ec:	e7cd      	b.n	800a18a <HAL_UART_MspInit+0x5e>
 800a1ee:	bf00      	nop
 800a1f0:	40004400 	.word	0x40004400
 800a1f4:	40023800 	.word	0x40023800
 800a1f8:	40020c00 	.word	0x40020c00
 800a1fc:	40011400 	.word	0x40011400
 800a200:	40020800 	.word	0x40020800

0800a204 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800a204:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a206:	f7f6 fc41 	bl	8000a8c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a20a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800a20e:	f7f6 bff8 	b.w	8001202 <HAL_SYSTICK_IRQHandler>
	...

0800a214 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800a214:	4801      	ldr	r0, [pc, #4]	; (800a21c <DMA1_Stream5_IRQHandler+0x8>)
 800a216:	f7f7 b911 	b.w	800143c <HAL_DMA_IRQHandler>
 800a21a:	bf00      	nop
 800a21c:	2000ee24 	.word	0x2000ee24

0800a220 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 800a220:	4801      	ldr	r0, [pc, #4]	; (800a228 <DMA1_Stream6_IRQHandler+0x8>)
 800a222:	f7f7 b90b 	b.w	800143c <HAL_DMA_IRQHandler>
 800a226:	bf00      	nop
 800a228:	200102e0 	.word	0x200102e0

0800a22c <ADC_IRQHandler>:
*/
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */
	//*(uint32_t *) Dac_x = xVoltageBuffer[(column) + wix];
	*(uint32_t *) Dac_x = xVoltageBuffer[(column++)/multiply];
 800a22c:	4a08      	ldr	r2, [pc, #32]	; (800a250 <ADC_IRQHandler+0x24>)
 800a22e:	4b09      	ldr	r3, [pc, #36]	; (800a254 <ADC_IRQHandler+0x28>)
 800a230:	6819      	ldr	r1, [r3, #0]
 800a232:	6813      	ldr	r3, [r2, #0]
 800a234:	1c58      	adds	r0, r3, #1
 800a236:	6010      	str	r0, [r2, #0]
 800a238:	4a07      	ldr	r2, [pc, #28]	; (800a258 <ADC_IRQHandler+0x2c>)
	//	if ((column++) > (wnx - 1))
	 //   column = 0;
  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800a23a:	4808      	ldr	r0, [pc, #32]	; (800a25c <ADC_IRQHandler+0x30>)
	*(uint32_t *) Dac_x = xVoltageBuffer[(column++)/multiply];
 800a23c:	6812      	ldr	r2, [r2, #0]
 800a23e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a242:	4a07      	ldr	r2, [pc, #28]	; (800a260 <ADC_IRQHandler+0x34>)
 800a244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a248:	600b      	str	r3, [r1, #0]
  HAL_ADC_IRQHandler(&hadc1);
 800a24a:	f7f6 bd4c 	b.w	8000ce6 <HAL_ADC_IRQHandler>
 800a24e:	bf00      	nop
 800a250:	2000ed7c 	.word	0x2000ed7c
 800a254:	2000039c 	.word	0x2000039c
 800a258:	20000010 	.word	0x20000010
 800a25c:	2000ef0c 	.word	0x2000ef0c
 800a260:	2000e528 	.word	0x2000e528

0800a264 <USART2_IRQHandler>:
				}
			}
		}
	}*/
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800a264:	4801      	ldr	r0, [pc, #4]	; (800a26c <USART2_IRQHandler+0x8>)
 800a266:	f7f9 bc51 	b.w	8003b0c <HAL_UART_IRQHandler>
 800a26a:	bf00      	nop
 800a26c:	20010030 	.word	0x20010030

0800a270 <DMA2_Stream0_IRQHandler>:
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	//__HAL_TIM_DISABLE(&htim4);
	//hadc1.Instance->CR2 &= ~((uint32_t)(0x01U << 9U));//dds
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800a270:	4801      	ldr	r0, [pc, #4]	; (800a278 <DMA2_Stream0_IRQHandler+0x8>)
 800a272:	f7f7 b8e3 	b.w	800143c <HAL_DMA_IRQHandler>
 800a276:	bf00      	nop
 800a278:	2000f054 	.word	0x2000f054

0800a27c <ETH_WKUP_IRQHandler>:
void ETH_WKUP_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800a27c:	4801      	ldr	r0, [pc, #4]	; (800a284 <ETH_WKUP_IRQHandler+0x8>)
 800a27e:	f7f7 bd73 	b.w	8001d68 <HAL_ETH_IRQHandler>
 800a282:	bf00      	nop
 800a284:	2000c9a4 	.word	0x2000c9a4

0800a288 <ETH_IRQHandler>:
 800a288:	f7ff bff8 	b.w	800a27c <ETH_WKUP_IRQHandler>

0800a28c <USART6_IRQHandler>:
			}
		}
	}
}*/
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800a28c:	4801      	ldr	r0, [pc, #4]	; (800a294 <USART6_IRQHandler+0x8>)
 800a28e:	f7f9 bc3d 	b.w	8003b0c <HAL_UART_IRQHandler>
 800a292:	bf00      	nop
 800a294:	2000f300 	.word	0x2000f300

0800a298 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a298:	490f      	ldr	r1, [pc, #60]	; (800a2d8 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a29a:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a29c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800a2a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a2a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 800a2a8:	4b0c      	ldr	r3, [pc, #48]	; (800a2dc <SystemInit+0x44>)
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	f042 0201 	orr.w	r2, r2, #1
 800a2b0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800a2b2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800a2ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a2be:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a2c0:	4a07      	ldr	r2, [pc, #28]	; (800a2e0 <SystemInit+0x48>)
 800a2c2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a2ca:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a2cc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a2ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a2d2:	608b      	str	r3, [r1, #8]
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop
 800a2d8:	e000ed00 	.word	0xe000ed00
 800a2dc:	40023800 	.word	0x40023800
 800a2e0:	24003010 	.word	0x24003010

0800a2e4 <tcp_echoserver_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 800a2e4:	b508      	push	{r3, lr}
  err_t ret_err;
  struct tcp_echoserver_struct *es;
  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 800a2e6:	2180      	movs	r1, #128	; 0x80
 800a2e8:	4802      	ldr	r0, [pc, #8]	; (800a2f4 <tcp_echoserver_poll+0x10>)
 800a2ea:	f7f8 f80e 	bl	800230a <HAL_GPIO_TogglePin>
    /* nothing to be done */
  //  tcp_abort(tpcb);
  //  ret_err = ERR_ABRT;
  }
  return ret_err;
}
 800a2ee:	2000      	movs	r0, #0
 800a2f0:	bd08      	pop	{r3, pc}
 800a2f2:	bf00      	nop
 800a2f4:	40020400 	.word	0x40020400

0800a2f8 <tcp_echoserver_error>:
{
 800a2f8:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
{
 800a300:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 800a302:	4841      	ldr	r0, [pc, #260]	; (800a408 <tcp_echoserver_error+0x110>)
 800a304:	f7f7 fffc 	bl	8002300 <HAL_GPIO_WritePin>
    HAL_Delay(400);
 800a308:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800a30c:	f7f6 fbcc 	bl	8000aa8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 800a310:	2200      	movs	r2, #0
 800a312:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a316:	483c      	ldr	r0, [pc, #240]	; (800a408 <tcp_echoserver_error+0x110>)
 800a318:	f7f7 fff2 	bl	8002300 <HAL_GPIO_WritePin>
    HAL_Delay(80);
 800a31c:	2050      	movs	r0, #80	; 0x50
 800a31e:	f7f6 fbc3 	bl	8000aa8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 800a322:	2201      	movs	r2, #1
 800a324:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a328:	4837      	ldr	r0, [pc, #220]	; (800a408 <tcp_echoserver_error+0x110>)
 800a32a:	f7f7 ffe9 	bl	8002300 <HAL_GPIO_WritePin>
    HAL_Delay(80);
 800a32e:	2050      	movs	r0, #80	; 0x50
 800a330:	f7f6 fbba 	bl	8000aa8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 800a334:	2200      	movs	r2, #0
 800a336:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a33a:	4833      	ldr	r0, [pc, #204]	; (800a408 <tcp_echoserver_error+0x110>)
 800a33c:	f7f7 ffe0 	bl	8002300 <HAL_GPIO_WritePin>
    HAL_Delay(80);
 800a340:	2050      	movs	r0, #80	; 0x50
 800a342:	f7f6 fbb1 	bl	8000aa8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 800a346:	2201      	movs	r2, #1
 800a348:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a34c:	482e      	ldr	r0, [pc, #184]	; (800a408 <tcp_echoserver_error+0x110>)
 800a34e:	f7f7 ffd7 	bl	8002300 <HAL_GPIO_WritePin>
    HAL_Delay(80);
 800a352:	2050      	movs	r0, #80	; 0x50
 800a354:	f7f6 fba8 	bl	8000aa8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 800a358:	2200      	movs	r2, #0
 800a35a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a35e:	482a      	ldr	r0, [pc, #168]	; (800a408 <tcp_echoserver_error+0x110>)
 800a360:	f7f7 ffce 	bl	8002300 <HAL_GPIO_WritePin>
    HAL_Delay(80);
 800a364:	2050      	movs	r0, #80	; 0x50
 800a366:	f7f6 fb9f 	bl	8000aa8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 800a36a:	2201      	movs	r2, #1
 800a36c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a370:	4825      	ldr	r0, [pc, #148]	; (800a408 <tcp_echoserver_error+0x110>)
 800a372:	f7f7 ffc5 	bl	8002300 <HAL_GPIO_WritePin>
    HAL_Delay(400);
 800a376:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800a37a:	f7f6 fb95 	bl	8000aa8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 800a37e:	2200      	movs	r2, #0
 800a380:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a384:	4820      	ldr	r0, [pc, #128]	; (800a408 <tcp_echoserver_error+0x110>)
 800a386:	f7f7 ffbb 	bl	8002300 <HAL_GPIO_WritePin>
    HAL_Delay(80);
 800a38a:	2050      	movs	r0, #80	; 0x50
 800a38c:	f7f6 fb8c 	bl	8000aa8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 800a390:	2201      	movs	r2, #1
 800a392:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a396:	481c      	ldr	r0, [pc, #112]	; (800a408 <tcp_echoserver_error+0x110>)
 800a398:	f7f7 ffb2 	bl	8002300 <HAL_GPIO_WritePin>
    HAL_Delay(80);
 800a39c:	2050      	movs	r0, #80	; 0x50
 800a39e:	f7f6 fb83 	bl	8000aa8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a3a8:	4817      	ldr	r0, [pc, #92]	; (800a408 <tcp_echoserver_error+0x110>)
 800a3aa:	f7f7 ffa9 	bl	8002300 <HAL_GPIO_WritePin>
    HAL_Delay(80);
 800a3ae:	2050      	movs	r0, #80	; 0x50
 800a3b0:	f7f6 fb7a 	bl	8000aa8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a3ba:	4813      	ldr	r0, [pc, #76]	; (800a408 <tcp_echoserver_error+0x110>)
 800a3bc:	f7f7 ffa0 	bl	8002300 <HAL_GPIO_WritePin>
    HAL_Delay(80);
 800a3c0:	2050      	movs	r0, #80	; 0x50
 800a3c2:	f7f6 fb71 	bl	8000aa8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a3cc:	480e      	ldr	r0, [pc, #56]	; (800a408 <tcp_echoserver_error+0x110>)
 800a3ce:	f7f7 ff97 	bl	8002300 <HAL_GPIO_WritePin>
    HAL_Delay(80);
 800a3d2:	2050      	movs	r0, #80	; 0x50
 800a3d4:	f7f6 fb68 	bl	8000aa8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 800a3d8:	2201      	movs	r2, #1
 800a3da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a3de:	480a      	ldr	r0, [pc, #40]	; (800a408 <tcp_echoserver_error+0x110>)
 800a3e0:	f7f7 ff8e 	bl	8002300 <HAL_GPIO_WritePin>
    HAL_Delay(400);
 800a3e4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800a3e8:	f7f6 fb5e 	bl	8000aa8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a3f2:	4805      	ldr	r0, [pc, #20]	; (800a408 <tcp_echoserver_error+0x110>)
 800a3f4:	f7f7 ff84 	bl	8002300 <HAL_GPIO_WritePin>
  if (es != NULL)
 800a3f8:	b124      	cbz	r4, 800a404 <tcp_echoserver_error+0x10c>
    mem_free(es);
 800a3fa:	4620      	mov	r0, r4
}
 800a3fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mem_free(es);
 800a400:	f7fa bd2a 	b.w	8004e58 <mem_free>
 800a404:	bd10      	pop	{r4, pc}
 800a406:	bf00      	nop
 800a408:	40021400 	.word	0x40021400

0800a40c <tcp_echoserver_init>:
{
 800a40c:	b510      	push	{r4, lr}
  tcp_echoserver_pcb = tcp_new();
 800a40e:	4c0d      	ldr	r4, [pc, #52]	; (800a444 <tcp_echoserver_init+0x38>)
 800a410:	f7fb fe48 	bl	80060a4 <tcp_new>
 800a414:	6020      	str	r0, [r4, #0]
  if (tcp_echoserver_pcb != NULL)
 800a416:	b1a0      	cbz	r0, 800a442 <tcp_echoserver_init+0x36>
    err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, 152);
 800a418:	2298      	movs	r2, #152	; 0x98
 800a41a:	490b      	ldr	r1, [pc, #44]	; (800a448 <tcp_echoserver_init+0x3c>)
 800a41c:	f7fb f8fe 	bl	800561c <tcp_bind>
    if (err == ERR_OK)
 800a420:	b948      	cbnz	r0, 800a436 <tcp_echoserver_init+0x2a>
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 800a422:	21ff      	movs	r1, #255	; 0xff
 800a424:	6820      	ldr	r0, [r4, #0]
 800a426:	f7fb f935 	bl	8005694 <tcp_listen_with_backlog>
      tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 800a42a:	4908      	ldr	r1, [pc, #32]	; (800a44c <tcp_echoserver_init+0x40>)
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 800a42c:	6020      	str	r0, [r4, #0]
}
 800a42e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 800a432:	f7fb b9eb 	b.w	800580c <tcp_accept>
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 800a436:	6821      	ldr	r1, [r4, #0]
 800a438:	2001      	movs	r0, #1
}
 800a43a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 800a43e:	f7fa be33 	b.w	80050a8 <memp_free>
 800a442:	bd10      	pop	{r4, pc}
 800a444:	2001036c 	.word	0x2001036c
 800a448:	0800b890 	.word	0x0800b890
 800a44c:	0800a56d 	.word	0x0800a56d

0800a450 <tcp_echoserver_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 800a450:	b570      	push	{r4, r5, r6, lr}
 //        (es->p != NULL) &&
 //        (es->p->len <= tcp_sndbuf(tpcb)))
  {
    
    /* get pointer on pbuf from es structure */
    ptr = es->p;
 800a452:	688d      	ldr	r5, [r1, #8]
{
 800a454:	460c      	mov	r4, r1


    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, 26, 1);
 800a456:	2301      	movs	r3, #1
 800a458:	221a      	movs	r2, #26
 800a45a:	6869      	ldr	r1, [r5, #4]
{
 800a45c:	4606      	mov	r6, r0
    wr_err = tcp_write(tpcb, ptr->payload, 26, 1);
 800a45e:	f7fc ffc2 	bl	80073e6 <tcp_write>

   if (wr_err == ERR_OK)
 800a462:	b920      	cbnz	r0, 800a46e <tcp_echoserver_send+0x1e>
   {
     tcp_output(tpcb);
 800a464:	4630      	mov	r0, r6
   else
   {
     /* other problem ?? */
   }
  }
}
 800a466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     tcp_output(tpcb);
 800a46a:	f7fd b9f1 	b.w	8007850 <tcp_output>
   else if(wr_err == ERR_MEM)
 800a46e:	3001      	adds	r0, #1
     es->p = ptr;
 800a470:	bf08      	it	eq
 800a472:	60a5      	streq	r5, [r4, #8]
 800a474:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a478 <tcp_echoserver_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 800a478:	b538      	push	{r3, r4, r5, lr}
 800a47a:	4604      	mov	r4, r0
 800a47c:	460d      	mov	r5, r1
  
  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 800a47e:	2100      	movs	r1, #0
 800a480:	f7fb f9b6 	bl	80057f0 <tcp_arg>
  tcp_sent(tpcb, NULL);
 800a484:	2100      	movs	r1, #0
 800a486:	4620      	mov	r0, r4
 800a488:	f7fb f9b9 	bl	80057fe <tcp_sent>
  tcp_recv(tpcb, NULL);
 800a48c:	2100      	movs	r1, #0
 800a48e:	4620      	mov	r0, r4
 800a490:	f7fb f9b1 	bl	80057f6 <tcp_recv>
  tcp_err(tpcb, NULL);
 800a494:	2100      	movs	r1, #0
 800a496:	4620      	mov	r0, r4
 800a498:	f7fb f9b4 	bl	8005804 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 800a49c:	2200      	movs	r2, #0
 800a49e:	4620      	mov	r0, r4
 800a4a0:	4611      	mov	r1, r2
 800a4a2:	f7fb f9b9 	bl	8005818 <tcp_poll>
  
      	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a4ac:	482e      	ldr	r0, [pc, #184]	; (800a568 <tcp_echoserver_connection_close+0xf0>)
 800a4ae:	f7f7 ff27 	bl	8002300 <HAL_GPIO_WritePin>
      	  HAL_Delay(100);
 800a4b2:	2064      	movs	r0, #100	; 0x64
 800a4b4:	f7f6 faf8 	bl	8000aa8 <HAL_Delay>

      	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a4be:	482a      	ldr	r0, [pc, #168]	; (800a568 <tcp_echoserver_connection_close+0xf0>)
 800a4c0:	f7f7 ff1e 	bl	8002300 <HAL_GPIO_WritePin>
      	  HAL_Delay(100);
 800a4c4:	2064      	movs	r0, #100	; 0x64
 800a4c6:	f7f6 faef 	bl	8000aa8 <HAL_Delay>

      	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a4d0:	4825      	ldr	r0, [pc, #148]	; (800a568 <tcp_echoserver_connection_close+0xf0>)
 800a4d2:	f7f7 ff15 	bl	8002300 <HAL_GPIO_WritePin>
      	  HAL_Delay(100);
 800a4d6:	2064      	movs	r0, #100	; 0x64
 800a4d8:	f7f6 fae6 	bl	8000aa8 <HAL_Delay>

      	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a4e2:	4821      	ldr	r0, [pc, #132]	; (800a568 <tcp_echoserver_connection_close+0xf0>)
 800a4e4:	f7f7 ff0c 	bl	8002300 <HAL_GPIO_WritePin>
      	  HAL_Delay(100);
 800a4e8:	2064      	movs	r0, #100	; 0x64
 800a4ea:	f7f6 fadd 	bl	8000aa8 <HAL_Delay>

      	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a4f4:	481c      	ldr	r0, [pc, #112]	; (800a568 <tcp_echoserver_connection_close+0xf0>)
 800a4f6:	f7f7 ff03 	bl	8002300 <HAL_GPIO_WritePin>
      	  HAL_Delay(100);
 800a4fa:	2064      	movs	r0, #100	; 0x64
 800a4fc:	f7f6 fad4 	bl	8000aa8 <HAL_Delay>

      	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 800a500:	2200      	movs	r2, #0
 800a502:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a506:	4818      	ldr	r0, [pc, #96]	; (800a568 <tcp_echoserver_connection_close+0xf0>)
 800a508:	f7f7 fefa 	bl	8002300 <HAL_GPIO_WritePin>
      	  HAL_Delay(100);
 800a50c:	2064      	movs	r0, #100	; 0x64
 800a50e:	f7f6 facb 	bl	8000aa8 <HAL_Delay>

      	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 800a512:	2201      	movs	r2, #1
 800a514:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a518:	4813      	ldr	r0, [pc, #76]	; (800a568 <tcp_echoserver_connection_close+0xf0>)
 800a51a:	f7f7 fef1 	bl	8002300 <HAL_GPIO_WritePin>
      	  HAL_Delay(100);
 800a51e:	2064      	movs	r0, #100	; 0x64
 800a520:	f7f6 fac2 	bl	8000aa8 <HAL_Delay>

      	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 800a524:	2200      	movs	r2, #0
 800a526:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a52a:	480f      	ldr	r0, [pc, #60]	; (800a568 <tcp_echoserver_connection_close+0xf0>)
 800a52c:	f7f7 fee8 	bl	8002300 <HAL_GPIO_WritePin>
      	  HAL_Delay(100);
 800a530:	2064      	movs	r0, #100	; 0x64
 800a532:	f7f6 fab9 	bl	8000aa8 <HAL_Delay>

      	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 800a536:	2201      	movs	r2, #1
 800a538:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a53c:	480a      	ldr	r0, [pc, #40]	; (800a568 <tcp_echoserver_connection_close+0xf0>)
 800a53e:	f7f7 fedf 	bl	8002300 <HAL_GPIO_WritePin>
      	  HAL_Delay(100);
 800a542:	2064      	movs	r0, #100	; 0x64
 800a544:	f7f6 fab0 	bl	8000aa8 <HAL_Delay>

      	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 800a548:	2200      	movs	r2, #0
 800a54a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a54e:	4806      	ldr	r0, [pc, #24]	; (800a568 <tcp_echoserver_connection_close+0xf0>)
 800a550:	f7f7 fed6 	bl	8002300 <HAL_GPIO_WritePin>
  /* delete es structure */
  if (es != NULL)
 800a554:	b115      	cbz	r5, 800a55c <tcp_echoserver_connection_close+0xe4>
  {
    mem_free(es);
 800a556:	4628      	mov	r0, r5
 800a558:	f7fa fc7e 	bl	8004e58 <mem_free>
  }  
  
  /* close tcp connection */
  tcp_close(tpcb);
 800a55c:	4620      	mov	r0, r4
}
 800a55e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  tcp_close(tpcb);
 800a562:	f7fb bbd1 	b.w	8005d08 <tcp_close>
 800a566:	bf00      	nop
 800a568:	40021400 	.word	0x40021400

0800a56c <tcp_echoserver_accept>:
{
 800a56c:	b570      	push	{r4, r5, r6, lr}
 800a56e:	460d      	mov	r5, r1
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 800a570:	2101      	movs	r1, #1
 800a572:	4628      	mov	r0, r5
 800a574:	f7fb f924 	bl	80057c0 <tcp_setprio>
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 800a578:	200c      	movs	r0, #12
 800a57a:	f7fa fd07 	bl	8004f8c <mem_malloc>
  if (es != NULL)
 800a57e:	4601      	mov	r1, r0
 800a580:	2800      	cmp	r0, #0
 800a582:	f000 8085 	beq.w	800a690 <tcp_echoserver_accept+0x124>
    es->retries = 0;
 800a586:	2400      	movs	r4, #0
    es->state = ES_ACCEPTED;
 800a588:	2601      	movs	r6, #1
    es->pcb = newpcb;
 800a58a:	6045      	str	r5, [r0, #4]
    es->state = ES_ACCEPTED;
 800a58c:	7006      	strb	r6, [r0, #0]
    es->retries = 0;
 800a58e:	7044      	strb	r4, [r0, #1]
    es->p = NULL;
 800a590:	6084      	str	r4, [r0, #8]
    tcp_arg(newpcb, es);
 800a592:	4628      	mov	r0, r5
 800a594:	f7fb f92c 	bl	80057f0 <tcp_arg>
    tcp_recv(newpcb, tcp_echoserver_recv);
 800a598:	4628      	mov	r0, r5
 800a59a:	4940      	ldr	r1, [pc, #256]	; (800a69c <tcp_echoserver_accept+0x130>)
 800a59c:	f7fb f92b 	bl	80057f6 <tcp_recv>
    tcp_err(newpcb, tcp_echoserver_error);
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	493f      	ldr	r1, [pc, #252]	; (800a6a0 <tcp_echoserver_accept+0x134>)
 800a5a4:	f7fb f92e 	bl	8005804 <tcp_err>
    tcp_poll(newpcb, tcp_echoserver_poll, 0);
 800a5a8:	4622      	mov	r2, r4
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	493d      	ldr	r1, [pc, #244]	; (800a6a4 <tcp_echoserver_accept+0x138>)
 800a5ae:	f7fb f933 	bl	8005818 <tcp_poll>
    tcp_sent(newpcb, tcp_echoserver_sent);
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	493c      	ldr	r1, [pc, #240]	; (800a6a8 <tcp_echoserver_accept+0x13c>)
 800a5b6:	f7fb f922 	bl	80057fe <tcp_sent>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 800a5ba:	4632      	mov	r2, r6
 800a5bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a5c0:	483a      	ldr	r0, [pc, #232]	; (800a6ac <tcp_echoserver_accept+0x140>)
 800a5c2:	f7f7 fe9d 	bl	8002300 <HAL_GPIO_WritePin>
    HAL_Delay(40);
 800a5c6:	2028      	movs	r0, #40	; 0x28
 800a5c8:	f7f6 fa6e 	bl	8000aa8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 800a5cc:	4622      	mov	r2, r4
 800a5ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a5d2:	4836      	ldr	r0, [pc, #216]	; (800a6ac <tcp_echoserver_accept+0x140>)
 800a5d4:	f7f7 fe94 	bl	8002300 <HAL_GPIO_WritePin>
    HAL_Delay(40);
 800a5d8:	2028      	movs	r0, #40	; 0x28
 800a5da:	f7f6 fa65 	bl	8000aa8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 800a5de:	4632      	mov	r2, r6
 800a5e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a5e4:	4831      	ldr	r0, [pc, #196]	; (800a6ac <tcp_echoserver_accept+0x140>)
 800a5e6:	f7f7 fe8b 	bl	8002300 <HAL_GPIO_WritePin>
    HAL_Delay(40);
 800a5ea:	2028      	movs	r0, #40	; 0x28
 800a5ec:	f7f6 fa5c 	bl	8000aa8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 800a5f0:	4622      	mov	r2, r4
 800a5f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a5f6:	482d      	ldr	r0, [pc, #180]	; (800a6ac <tcp_echoserver_accept+0x140>)
 800a5f8:	f7f7 fe82 	bl	8002300 <HAL_GPIO_WritePin>
    HAL_Delay(40);
 800a5fc:	2028      	movs	r0, #40	; 0x28
 800a5fe:	f7f6 fa53 	bl	8000aa8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 800a602:	4632      	mov	r2, r6
 800a604:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a608:	4828      	ldr	r0, [pc, #160]	; (800a6ac <tcp_echoserver_accept+0x140>)
 800a60a:	f7f7 fe79 	bl	8002300 <HAL_GPIO_WritePin>
    HAL_Delay(40);
 800a60e:	2028      	movs	r0, #40	; 0x28
 800a610:	f7f6 fa4a 	bl	8000aa8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 800a614:	4622      	mov	r2, r4
 800a616:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a61a:	4824      	ldr	r0, [pc, #144]	; (800a6ac <tcp_echoserver_accept+0x140>)
 800a61c:	f7f7 fe70 	bl	8002300 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 800a620:	20c8      	movs	r0, #200	; 0xc8
 800a622:	f7f6 fa41 	bl	8000aa8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 800a626:	4632      	mov	r2, r6
 800a628:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a62c:	481f      	ldr	r0, [pc, #124]	; (800a6ac <tcp_echoserver_accept+0x140>)
 800a62e:	f7f7 fe67 	bl	8002300 <HAL_GPIO_WritePin>
    HAL_Delay(40);
 800a632:	2028      	movs	r0, #40	; 0x28
 800a634:	f7f6 fa38 	bl	8000aa8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 800a638:	4622      	mov	r2, r4
 800a63a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a63e:	481b      	ldr	r0, [pc, #108]	; (800a6ac <tcp_echoserver_accept+0x140>)
 800a640:	f7f7 fe5e 	bl	8002300 <HAL_GPIO_WritePin>
    HAL_Delay(40);
 800a644:	2028      	movs	r0, #40	; 0x28
 800a646:	f7f6 fa2f 	bl	8000aa8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 800a64a:	4632      	mov	r2, r6
 800a64c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a650:	4816      	ldr	r0, [pc, #88]	; (800a6ac <tcp_echoserver_accept+0x140>)
 800a652:	f7f7 fe55 	bl	8002300 <HAL_GPIO_WritePin>
    HAL_Delay(40);
 800a656:	2028      	movs	r0, #40	; 0x28
 800a658:	f7f6 fa26 	bl	8000aa8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 800a65c:	4622      	mov	r2, r4
 800a65e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a662:	4812      	ldr	r0, [pc, #72]	; (800a6ac <tcp_echoserver_accept+0x140>)
 800a664:	f7f7 fe4c 	bl	8002300 <HAL_GPIO_WritePin>
    HAL_Delay(40);
 800a668:	2028      	movs	r0, #40	; 0x28
 800a66a:	f7f6 fa1d 	bl	8000aa8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 800a66e:	4632      	mov	r2, r6
 800a670:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a674:	480d      	ldr	r0, [pc, #52]	; (800a6ac <tcp_echoserver_accept+0x140>)
 800a676:	f7f7 fe43 	bl	8002300 <HAL_GPIO_WritePin>
    HAL_Delay(40);
 800a67a:	2028      	movs	r0, #40	; 0x28
 800a67c:	f7f6 fa14 	bl	8000aa8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 800a680:	4622      	mov	r2, r4
 800a682:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a686:	4809      	ldr	r0, [pc, #36]	; (800a6ac <tcp_echoserver_accept+0x140>)
 800a688:	f7f7 fe3a 	bl	8002300 <HAL_GPIO_WritePin>
    ret_err = ERR_OK;
 800a68c:	4620      	mov	r0, r4
 800a68e:	bd70      	pop	{r4, r5, r6, pc}
    tcp_echoserver_connection_close(newpcb, es);
 800a690:	4628      	mov	r0, r5
 800a692:	f7ff fef1 	bl	800a478 <tcp_echoserver_connection_close>
    ret_err = ERR_MEM;
 800a696:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a69a:	bd70      	pop	{r4, r5, r6, pc}
 800a69c:	0800b309 	.word	0x0800b309
 800a6a0:	0800a2f9 	.word	0x0800a2f9
 800a6a4:	0800a2e5 	.word	0x0800a2e5
 800a6a8:	0800a6b1 	.word	0x0800a6b1
 800a6ac:	40021400 	.word	0x40021400

0800a6b0 <tcp_echoserver_sent>:
{
 800a6b0:	b508      	push	{r3, lr}
  es->retries = 0;
 800a6b2:	2200      	movs	r2, #0
{
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	4608      	mov	r0, r1
  es->retries = 0;
 800a6b8:	705a      	strb	r2, [r3, #1]
  if(es->p != NULL)
 800a6ba:	689a      	ldr	r2, [r3, #8]
 800a6bc:	b92a      	cbnz	r2, 800a6ca <tcp_echoserver_sent+0x1a>
    if(es->state == ES_CLOSING)
 800a6be:	781a      	ldrb	r2, [r3, #0]
 800a6c0:	2a03      	cmp	r2, #3
 800a6c2:	d102      	bne.n	800a6ca <tcp_echoserver_sent+0x1a>
      tcp_echoserver_connection_close(tpcb, es);
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	f7ff fed7 	bl	800a478 <tcp_echoserver_connection_close>
  flagtcp=0;
 800a6ca:	2000      	movs	r0, #0
 800a6cc:	4b01      	ldr	r3, [pc, #4]	; (800a6d4 <tcp_echoserver_sent+0x24>)
 800a6ce:	6018      	str	r0, [r3, #0]
}
 800a6d0:	bd08      	pop	{r3, pc}
 800a6d2:	bf00      	nop
 800a6d4:	200003b0 	.word	0x200003b0

0800a6d8 <check>:
		es->p->payload = "err.undefined command\r";
	//return;
}

int check(char* order,char* word)
{
 800a6d8:	b538      	push	{r3, r4, r5, lr}
 800a6da:	4605      	mov	r5, r0
 800a6dc:	460c      	mov	r4, r1
	int is = 0;
	if (strncmp(order,word,strlen(word)) == 0) is=1;
 800a6de:	4608      	mov	r0, r1
 800a6e0:	f7f5 fd92 	bl	8000208 <strlen>
 800a6e4:	4621      	mov	r1, r4
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	f000 fefd 	bl	800b4e8 <strncmp>
	return is;
}
 800a6ee:	fab0 f080 	clz	r0, r0
 800a6f2:	0940      	lsrs	r0, r0, #5
 800a6f4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a6f8 <GetInputs>:

int GetInputs(char* Command, int* inputs)
{
 800a6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6fc:	b092      	sub	sp, #72	; 0x48
 800a6fe:	460f      	mov	r7, r1

	char str[50];
	strcpy(str,Command);
	char* pch;
	pch = strtok (str," ,\r");
	int num=0;
 800a700:	2600      	movs	r6, #0
	strcpy(str,Command);
 800a702:	4601      	mov	r1, r0
 800a704:	a805      	add	r0, sp, #20
	cnt=0;
	while (pch != NULL)
	{
	  sprintf(buffer, "%s",pch);
          pch = strtok (NULL, " ,\r");
 800a706:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800a748 <GetInputs+0x50>
	strcpy(str,Command);
 800a70a:	f000 fee5 	bl	800b4d8 <strcpy>
	pch = strtok (str," ,\r");
 800a70e:	490e      	ldr	r1, [pc, #56]	; (800a748 <GetInputs+0x50>)
 800a710:	a805      	add	r0, sp, #20
	cnt=0;
 800a712:	4634      	mov	r4, r6
	pch = strtok (str," ,\r");
 800a714:	f000 fefa 	bl	800b50c <strtok>
 800a718:	4605      	mov	r5, r0
	while (pch != NULL)
 800a71a:	b91d      	cbnz	r5, 800a724 <GetInputs+0x2c>
    	    cnt++;
          }
          num=1;
	}
	return cnt-1;
}
 800a71c:	1e60      	subs	r0, r4, #1
 800a71e:	b012      	add	sp, #72	; 0x48
 800a720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  sprintf(buffer, "%s",pch);
 800a724:	4629      	mov	r1, r5
 800a726:	4668      	mov	r0, sp
 800a728:	f000 fed6 	bl	800b4d8 <strcpy>
          pch = strtok (NULL, " ,\r");
 800a72c:	4641      	mov	r1, r8
 800a72e:	2000      	movs	r0, #0
 800a730:	f000 feec 	bl	800b50c <strtok>
 800a734:	4605      	mov	r5, r0
          if (num!=0)
 800a736:	b12e      	cbz	r6, 800a744 <GetInputs+0x4c>
    	    inputs[cnt] = atoi(buffer);
 800a738:	4668      	mov	r0, sp
 800a73a:	f000 fe82 	bl	800b442 <atoi>
 800a73e:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
    	    cnt++;
 800a742:	3401      	adds	r4, #1
 800a744:	2601      	movs	r6, #1
 800a746:	e7e8      	b.n	800a71a <GetInputs+0x22>
 800a748:	0800bc45 	.word	0x0800bc45

0800a74c <GetChildCommand>:

int GetChildCommand(char* Command, char* ChildCommand)
{
	int istart = 0;
	for (int i=0; i<26; i++)
 800a74c:	2300      	movs	r3, #0
{
 800a74e:	b530      	push	{r4, r5, lr}
	{
		if (Command[i] == '.')
 800a750:	5cc2      	ldrb	r2, [r0, r3]
 800a752:	3301      	adds	r3, #1
 800a754:	2a2e      	cmp	r2, #46	; 0x2e
 800a756:	d10d      	bne.n	800a774 <GetChildCommand+0x28>
 800a758:	18c2      	adds	r2, r0, r3
	int istart = 0;
 800a75a:	2000      	movs	r0, #0
			break;
		}
	}

	int n = 0;
	for (int i=istart; i<26; i++)
 800a75c:	181c      	adds	r4, r3, r0
 800a75e:	2c19      	cmp	r4, #25
 800a760:	dc07      	bgt.n	800a772 <GetChildCommand+0x26>
 800a762:	4614      	mov	r4, r2
	{
		ChildCommand[n]=Command[i];
 800a764:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a768:	540d      	strb	r5, [r1, r0]
		n++;
 800a76a:	3001      	adds	r0, #1
		if (Command[i] == '\r')
 800a76c:	7824      	ldrb	r4, [r4, #0]
 800a76e:	2c0d      	cmp	r4, #13
 800a770:	d1f4      	bne.n	800a75c <GetChildCommand+0x10>
			break;
		}
	}

	return n;
}
 800a772:	bd30      	pop	{r4, r5, pc}
	for (int i=0; i<26; i++)
 800a774:	2b1a      	cmp	r3, #26
 800a776:	d1eb      	bne.n	800a750 <GetChildCommand+0x4>
	int istart = 0;
 800a778:	2300      	movs	r3, #0
 800a77a:	e7ed      	b.n	800a758 <GetChildCommand+0xc>

0800a77c <GetDeviceNameLength>:

int GetDeviceNameLength(char* Command)
{
	int n = -1;
 800a77c:	f04f 33ff 	mov.w	r3, #4294967295
	for (int i=0; i<26; i++)
	{
		n++;
 800a780:	3301      	adds	r3, #1
		if (Command[i] == '.')
 800a782:	5cc2      	ldrb	r2, [r0, r3]
 800a784:	2a2e      	cmp	r2, #46	; 0x2e
 800a786:	d001      	beq.n	800a78c <GetDeviceNameLength+0x10>
	for (int i=0; i<26; i++)
 800a788:	2b19      	cmp	r3, #25
 800a78a:	d1f9      	bne.n	800a780 <GetDeviceNameLength+0x4>
		{
			break;
		}
	}
	return n;
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	4770      	bx	lr

0800a790 <IsSame>:

int IsSame(char* s1,char* s2, int n)
{
 800a790:	2a1a      	cmp	r2, #26
	int nMax=26;
	if (n>nMax) n=nMax;
	int is=1;
	for (int i=0; i<n; i++)
 800a792:	f04f 0300 	mov.w	r3, #0
 800a796:	bfa8      	it	ge
 800a798:	221a      	movge	r2, #26
{
 800a79a:	b530      	push	{r4, r5, lr}
	for (int i=0; i<n; i++)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	db01      	blt.n	800a7a4 <IsSame+0x14>
	int is=1;
 800a7a0:	2001      	movs	r0, #1
 800a7a2:	bd30      	pop	{r4, r5, pc}
	{
		if (s1[i] != s2[i])
 800a7a4:	5cc5      	ldrb	r5, [r0, r3]
 800a7a6:	5ccc      	ldrb	r4, [r1, r3]
 800a7a8:	42a5      	cmp	r5, r4
 800a7aa:	d101      	bne.n	800a7b0 <IsSame+0x20>
	for (int i=0; i<n; i++)
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	e7f5      	b.n	800a79c <IsSame+0xc>
		{
			is=0;
 800a7b0:	2000      	movs	r0, #0
			break;
		}
	}
	return is;
}
 800a7b2:	bd30      	pop	{r4, r5, pc}

0800a7b4 <AnswerToOrder>:
{
 800a7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b8:	b097      	sub	sp, #92	; 0x5c
	isUart2 = 0;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	4e9e      	ldr	r6, [pc, #632]	; (800aa38 <AnswerToOrder+0x284>)
{
 800a7be:	460c      	mov	r4, r1
	isUart6 = 0;
 800a7c0:	4d9e      	ldr	r5, [pc, #632]	; (800aa3c <AnswerToOrder+0x288>)
	if (check(Command,"name"))
 800a7c2:	499f      	ldr	r1, [pc, #636]	; (800aa40 <AnswerToOrder+0x28c>)
{
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	4680      	mov	r8, r0
	isUart2 = 0;
 800a7c8:	6033      	str	r3, [r6, #0]
	isUart6 = 0;
 800a7ca:	602b      	str	r3, [r5, #0]
	if (check(Command,"name"))
 800a7cc:	f7ff ff84 	bl	800a6d8 <check>
 800a7d0:	b118      	cbz	r0, 800a7da <AnswerToOrder+0x26>
		es->p->payload = "SEM\r";
 800a7d2:	68a3      	ldr	r3, [r4, #8]
 800a7d4:	4a9b      	ldr	r2, [pc, #620]	; (800aa44 <AnswerToOrder+0x290>)
		es->p->payload = "err.undefined command\r";
 800a7d6:	605a      	str	r2, [r3, #4]
}
 800a7d8:	e0cf      	b.n	800a97a <AnswerToOrder+0x1c6>
	else if (check(Command,"ver"))
 800a7da:	499b      	ldr	r1, [pc, #620]	; (800aa48 <AnswerToOrder+0x294>)
 800a7dc:	4640      	mov	r0, r8
 800a7de:	f7ff ff7b 	bl	800a6d8 <check>
 800a7e2:	b110      	cbz	r0, 800a7ea <AnswerToOrder+0x36>
		es->p->payload = "2017.1\r";
 800a7e4:	68a3      	ldr	r3, [r4, #8]
 800a7e6:	4a99      	ldr	r2, [pc, #612]	; (800aa4c <AnswerToOrder+0x298>)
 800a7e8:	e7f5      	b.n	800a7d6 <AnswerToOrder+0x22>
	else if (check(Command,"ip"))
 800a7ea:	4999      	ldr	r1, [pc, #612]	; (800aa50 <AnswerToOrder+0x29c>)
 800a7ec:	4640      	mov	r0, r8
 800a7ee:	f7ff ff73 	bl	800a6d8 <check>
 800a7f2:	b110      	cbz	r0, 800a7fa <AnswerToOrder+0x46>
		es->p->payload = "190.100.101.1\r";
 800a7f4:	68a3      	ldr	r3, [r4, #8]
 800a7f6:	4a97      	ldr	r2, [pc, #604]	; (800aa54 <AnswerToOrder+0x2a0>)
 800a7f8:	e7ed      	b.n	800a7d6 <AnswerToOrder+0x22>
	else if (check(Command,"port"))
 800a7fa:	4997      	ldr	r1, [pc, #604]	; (800aa58 <AnswerToOrder+0x2a4>)
 800a7fc:	4640      	mov	r0, r8
 800a7fe:	f7ff ff6b 	bl	800a6d8 <check>
 800a802:	b110      	cbz	r0, 800a80a <AnswerToOrder+0x56>
		es->p->payload = "7\r";
 800a804:	68a3      	ldr	r3, [r4, #8]
 800a806:	4a95      	ldr	r2, [pc, #596]	; (800aa5c <AnswerToOrder+0x2a8>)
 800a808:	e7e5      	b.n	800a7d6 <AnswerToOrder+0x22>
	else if (check(Command,"sisel "))
 800a80a:	4995      	ldr	r1, [pc, #596]	; (800aa60 <AnswerToOrder+0x2ac>)
 800a80c:	4640      	mov	r0, r8
 800a80e:	f7ff ff63 	bl	800a6d8 <check>
 800a812:	b160      	cbz	r0, 800a82e <AnswerToOrder+0x7a>
		int n = GetInputs(Command,inputs);
 800a814:	f107 0108 	add.w	r1, r7, #8
 800a818:	4640      	mov	r0, r8
 800a81a:	f7ff ff6d 	bl	800a6f8 <GetInputs>
		if (n==1)
 800a81e:	2801      	cmp	r0, #1
 800a820:	f040 846c 	bne.w	800b0fc <AnswerToOrder+0x948>
		  ScanISel((uint8_t)inputs[0]);
 800a824:	7a38      	ldrb	r0, [r7, #8]
 800a826:	f7fe f887 	bl	8008938 <ScanISel>
					es->p->payload = "OK\r";
 800a82a:	68a3      	ldr	r3, [r4, #8]
 800a82c:	e3a8      	b.n	800af80 <AnswerToOrder+0x7cc>
	else if (check(Command,"strim "))
 800a82e:	498d      	ldr	r1, [pc, #564]	; (800aa64 <AnswerToOrder+0x2b0>)
 800a830:	4640      	mov	r0, r8
 800a832:	f7ff ff51 	bl	800a6d8 <check>
 800a836:	b198      	cbz	r0, 800a860 <AnswerToOrder+0xac>
		int n = GetInputs(Command,inputs);
 800a838:	f107 0108 	add.w	r1, r7, #8
 800a83c:	4640      	mov	r0, r8
 800a83e:	f7ff ff5b 	bl	800a6f8 <GetInputs>
		if (n==2)
 800a842:	2802      	cmp	r0, #2
 800a844:	d104      	bne.n	800a850 <AnswerToOrder+0x9c>
	      ScanTrim((uint8_t)inputs[0], (uint16_t)inputs[1]);
 800a846:	89b9      	ldrh	r1, [r7, #12]
 800a848:	7a38      	ldrb	r0, [r7, #8]
 800a84a:	f7fe f89f 	bl	800898c <ScanTrim>
 800a84e:	e7ec      	b.n	800a82a <AnswerToOrder+0x76>
		else if (n==3)
 800a850:	2803      	cmp	r0, #3
 800a852:	d156      	bne.n	800a902 <AnswerToOrder+0x14e>
	      ScanTrimij((uint8_t)inputs[0], (uint8_t)inputs[1], (uint16_t)inputs[2]);
 800a854:	8a3a      	ldrh	r2, [r7, #16]
 800a856:	7b39      	ldrb	r1, [r7, #12]
 800a858:	7a38      	ldrb	r0, [r7, #8]
 800a85a:	f7fe f8cd 	bl	80089f8 <ScanTrimij>
 800a85e:	e7e4      	b.n	800a82a <AnswerToOrder+0x76>
	else if (check(Command,"zoomrot "))
 800a860:	4981      	ldr	r1, [pc, #516]	; (800aa68 <AnswerToOrder+0x2b4>)
 800a862:	4640      	mov	r0, r8
 800a864:	f7ff ff38 	bl	800a6d8 <check>
 800a868:	b160      	cbz	r0, 800a884 <AnswerToOrder+0xd0>
		int n = GetInputs(Command,inputs);
 800a86a:	f107 0108 	add.w	r1, r7, #8
 800a86e:	4640      	mov	r0, r8
 800a870:	f7ff ff42 	bl	800a6f8 <GetInputs>
		if (n==3)
 800a874:	2803      	cmp	r0, #3
 800a876:	d128      	bne.n	800a8ca <AnswerToOrder+0x116>
		  ScanZoomRot((uint8_t)inputs[0], (uint8_t)inputs[1], (uint16_t)inputs[2]);
 800a878:	8a3a      	ldrh	r2, [r7, #16]
 800a87a:	7b39      	ldrb	r1, [r7, #12]
 800a87c:	7a38      	ldrb	r0, [r7, #8]
 800a87e:	f7fe f8c3 	bl	8008a08 <ScanZoomRot>
 800a882:	e7d2      	b.n	800a82a <AnswerToOrder+0x76>
	else if (check(Command,"mux "))
 800a884:	4979      	ldr	r1, [pc, #484]	; (800aa6c <AnswerToOrder+0x2b8>)
 800a886:	4640      	mov	r0, r8
 800a888:	f7ff ff26 	bl	800a6d8 <check>
 800a88c:	b158      	cbz	r0, 800a8a6 <AnswerToOrder+0xf2>
		int n = GetInputs(Command,inputs);
 800a88e:	f107 0108 	add.w	r1, r7, #8
 800a892:	4640      	mov	r0, r8
 800a894:	f7ff ff30 	bl	800a6f8 <GetInputs>
		if (n==1)
 800a898:	2801      	cmp	r0, #1
 800a89a:	f040 842f 	bne.w	800b0fc <AnswerToOrder+0x948>
		  DetMuxSel((uint8_t)inputs[0]);
 800a89e:	7a38      	ldrb	r0, [r7, #8]
 800a8a0:	f7fe f920 	bl	8008ae4 <DetMuxSel>
 800a8a4:	e7c1      	b.n	800a82a <AnswerToOrder+0x76>
	else if (check(Command,"dgain "))
 800a8a6:	4972      	ldr	r1, [pc, #456]	; (800aa70 <AnswerToOrder+0x2bc>)
 800a8a8:	4640      	mov	r0, r8
 800a8aa:	f7ff ff15 	bl	800a6d8 <check>
 800a8ae:	b178      	cbz	r0, 800a8d0 <AnswerToOrder+0x11c>
		int n = GetInputs(Command,inputs);
 800a8b0:	f107 0108 	add.w	r1, r7, #8
 800a8b4:	4640      	mov	r0, r8
 800a8b6:	f7ff ff1f 	bl	800a6f8 <GetInputs>
		if (n==3)
 800a8ba:	2803      	cmp	r0, #3
 800a8bc:	d105      	bne.n	800a8ca <AnswerToOrder+0x116>
		  DetAmpGain((uint8_t)inputs[0], (uint8_t)inputs[1], (uint8_t)inputs[2]);
 800a8be:	7c3a      	ldrb	r2, [r7, #16]
 800a8c0:	7b39      	ldrb	r1, [r7, #12]
 800a8c2:	7a38      	ldrb	r0, [r7, #8]
 800a8c4:	f7fe f938 	bl	8008b38 <DetAmpGain>
 800a8c8:	e7af      	b.n	800a82a <AnswerToOrder+0x76>
			es->p->payload = "err.number of inputs:3\r";
 800a8ca:	68a3      	ldr	r3, [r4, #8]
 800a8cc:	4a69      	ldr	r2, [pc, #420]	; (800aa74 <AnswerToOrder+0x2c0>)
 800a8ce:	e782      	b.n	800a7d6 <AnswerToOrder+0x22>
	else if (check(Command,"dtrim "))
 800a8d0:	4969      	ldr	r1, [pc, #420]	; (800aa78 <AnswerToOrder+0x2c4>)
 800a8d2:	4640      	mov	r0, r8
 800a8d4:	f7ff ff00 	bl	800a6d8 <check>
 800a8d8:	b1b0      	cbz	r0, 800a908 <AnswerToOrder+0x154>
		int n = GetInputs(Command,inputs);
 800a8da:	f107 0108 	add.w	r1, r7, #8
 800a8de:	4640      	mov	r0, r8
 800a8e0:	f7ff ff0a 	bl	800a6f8 <GetInputs>
		if (n==2)
 800a8e4:	2802      	cmp	r0, #2
 800a8e6:	d104      	bne.n	800a8f2 <AnswerToOrder+0x13e>
		  DetTrim((uint8_t)inputs[0], (uint16_t)inputs[1]);
 800a8e8:	89b9      	ldrh	r1, [r7, #12]
 800a8ea:	7a38      	ldrb	r0, [r7, #8]
 800a8ec:	f7fe f986 	bl	8008bfc <DetTrim>
 800a8f0:	e79b      	b.n	800a82a <AnswerToOrder+0x76>
		else if (n==3)
 800a8f2:	2803      	cmp	r0, #3
 800a8f4:	d105      	bne.n	800a902 <AnswerToOrder+0x14e>
		  DetTrimij((uint8_t)inputs[0], (uint8_t)inputs[1], (uint16_t)inputs[2]);
 800a8f6:	8a3a      	ldrh	r2, [r7, #16]
 800a8f8:	7b39      	ldrb	r1, [r7, #12]
 800a8fa:	7a38      	ldrb	r0, [r7, #8]
 800a8fc:	f7fe f9b4 	bl	8008c68 <DetTrimij>
 800a900:	e793      	b.n	800a82a <AnswerToOrder+0x76>
			es->p->payload = "err.number of inputs:2,3\r";
 800a902:	68a3      	ldr	r3, [r4, #8]
 800a904:	4a5d      	ldr	r2, [pc, #372]	; (800aa7c <AnswerToOrder+0x2c8>)
 800a906:	e766      	b.n	800a7d6 <AnswerToOrder+0x22>
	else if (check(Command,"led1 "))
 800a908:	495d      	ldr	r1, [pc, #372]	; (800aa80 <AnswerToOrder+0x2cc>)
 800a90a:	4640      	mov	r0, r8
 800a90c:	f7ff fee4 	bl	800a6d8 <check>
 800a910:	b190      	cbz	r0, 800a938 <AnswerToOrder+0x184>
		int n = GetInputs(Command,inputs);
 800a912:	f107 0108 	add.w	r1, r7, #8
 800a916:	4640      	mov	r0, r8
 800a918:	f7ff feee 	bl	800a6f8 <GetInputs>
		if (n==1)
 800a91c:	2801      	cmp	r0, #1
		int n = GetInputs(Command,inputs);
 800a91e:	4601      	mov	r1, r0
		if (n==1)
 800a920:	f040 83ec 	bne.w	800b0fc <AnswerToOrder+0x948>
			if ((uint8_t)inputs[0]==(uint8_t)0)
 800a924:	7a3a      	ldrb	r2, [r7, #8]
 800a926:	b91a      	cbnz	r2, 800a930 <AnswerToOrder+0x17c>
				HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 800a928:	4856      	ldr	r0, [pc, #344]	; (800aa84 <AnswerToOrder+0x2d0>)
 800a92a:	f7f7 fce9 	bl	8002300 <HAL_GPIO_WritePin>
 800a92e:	e77c      	b.n	800a82a <AnswerToOrder+0x76>
			else if ((uint8_t)inputs[0]==(uint8_t)1)
 800a930:	2a01      	cmp	r2, #1
 800a932:	d114      	bne.n	800a95e <AnswerToOrder+0x1aa>
				HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 800a934:	4611      	mov	r1, r2
 800a936:	e7f7      	b.n	800a928 <AnswerToOrder+0x174>
	else if (check(Command,"led2 "))
 800a938:	4953      	ldr	r1, [pc, #332]	; (800aa88 <AnswerToOrder+0x2d4>)
 800a93a:	4640      	mov	r0, r8
 800a93c:	f7ff fecc 	bl	800a6d8 <check>
 800a940:	b180      	cbz	r0, 800a964 <AnswerToOrder+0x1b0>
		int n = GetInputs(Command,inputs);
 800a942:	f107 0108 	add.w	r1, r7, #8
 800a946:	4640      	mov	r0, r8
 800a948:	f7ff fed6 	bl	800a6f8 <GetInputs>
		if (n==1)
 800a94c:	2801      	cmp	r0, #1
 800a94e:	f040 83d5 	bne.w	800b0fc <AnswerToOrder+0x948>
			if ((uint8_t)inputs[0]==(uint8_t)0)
 800a952:	7a3a      	ldrb	r2, [r7, #8]
 800a954:	b90a      	cbnz	r2, 800a95a <AnswerToOrder+0x1a6>
				HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 800a956:	2180      	movs	r1, #128	; 0x80
 800a958:	e7e6      	b.n	800a928 <AnswerToOrder+0x174>
			else if ((uint8_t)inputs[0]==(uint8_t)1)
 800a95a:	2a01      	cmp	r2, #1
 800a95c:	d0fb      	beq.n	800a956 <AnswerToOrder+0x1a2>
				es->p->payload = "err.Valid values:0,1\r";
 800a95e:	68a3      	ldr	r3, [r4, #8]
				es->p->payload = "err.Valid values:0,1\r";
 800a960:	4a4a      	ldr	r2, [pc, #296]	; (800aa8c <AnswerToOrder+0x2d8>)
 800a962:	e738      	b.n	800a7d6 <AnswerToOrder+0x22>
	else if (check(Command,"checkuart2"))
 800a964:	494a      	ldr	r1, [pc, #296]	; (800aa90 <AnswerToOrder+0x2dc>)
 800a966:	4640      	mov	r0, r8
 800a968:	f7ff feb6 	bl	800a6d8 <check>
 800a96c:	b148      	cbz	r0, 800a982 <AnswerToOrder+0x1ce>
		sendhello2(aRxBuffer);
 800a96e:	4d49      	ldr	r5, [pc, #292]	; (800aa94 <AnswerToOrder+0x2e0>)
 800a970:	4628      	mov	r0, r5
 800a972:	f7fe f9ab 	bl	8008ccc <sendhello2>
		es->p->payload = aRxBuffer;
 800a976:	68a3      	ldr	r3, [r4, #8]
 800a978:	605d      	str	r5, [r3, #4]
}
 800a97a:	375c      	adds	r7, #92	; 0x5c
 800a97c:	46bd      	mov	sp, r7
 800a97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if (check(Command,"checkuart6"))
 800a982:	4945      	ldr	r1, [pc, #276]	; (800aa98 <AnswerToOrder+0x2e4>)
 800a984:	4640      	mov	r0, r8
 800a986:	f7ff fea7 	bl	800a6d8 <check>
 800a98a:	4682      	mov	sl, r0
 800a98c:	b120      	cbz	r0, 800a998 <AnswerToOrder+0x1e4>
		sendhello6(aRxBuffer);
 800a98e:	4d41      	ldr	r5, [pc, #260]	; (800aa94 <AnswerToOrder+0x2e0>)
 800a990:	4628      	mov	r0, r5
 800a992:	f7fe f9d5 	bl	8008d40 <sendhello6>
 800a996:	e7ee      	b.n	800a976 <AnswerToOrder+0x1c2>
	else if (check(Command,"?."))
 800a998:	4940      	ldr	r1, [pc, #256]	; (800aa9c <AnswerToOrder+0x2e8>)
 800a99a:	4640      	mov	r0, r8
 800a99c:	f7ff fe9c 	bl	800a6d8 <check>
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	f000 80d1 	beq.w	800ab48 <AnswerToOrder+0x394>
		int ndata = GetChildCommand(Command, aTxBuffer);
 800a9a6:	493e      	ldr	r1, [pc, #248]	; (800aaa0 <AnswerToOrder+0x2ec>)
 800a9a8:	4640      	mov	r0, r8
 800a9aa:	f7ff fecf 	bl	800a74c <GetChildCommand>
		int nDeviceName = GetDeviceNameLength(aTxBuffer);
 800a9ae:	483c      	ldr	r0, [pc, #240]	; (800aaa0 <AnswerToOrder+0x2ec>)
 800a9b0:	f7ff fee4 	bl	800a77c <GetDeviceNameLength>
		char PureYouCommand[ndata];
 800a9b4:	f100 030d 	add.w	r3, r0, #13
	{
 800a9b8:	46eb      	mov	fp, sp
		int nDeviceName = GetDeviceNameLength(aTxBuffer);
 800a9ba:	4606      	mov	r6, r0
		char PureYouCommand[ndata];
 800a9bc:	f023 0307 	bic.w	r3, r3, #7
		ndata = nDeviceName + 6; //DeviceName.you?\r nDeviceName + 6
 800a9c0:	f100 0906 	add.w	r9, r0, #6
		char PureYouCommand[ndata];
 800a9c4:	1d42      	adds	r2, r0, #5
		for (int i=0; i<ndata-1; i++) PureYouCommand[i] = aTxBuffer[i];
 800a9c6:	4936      	ldr	r1, [pc, #216]	; (800aaa0 <AnswerToOrder+0x2ec>)
		char PureYouCommand[ndata];
 800a9c8:	ebad 0d03 	sub.w	sp, sp, r3
		for (int i=0; i<ndata-1; i++) PureYouCommand[i] = aTxBuffer[i];
 800a9cc:	4653      	mov	r3, sl
		char PureYouCommand[ndata];
 800a9ce:	466d      	mov	r5, sp
		for (int i=0; i<ndata-1; i++) PureYouCommand[i] = aTxBuffer[i];
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	dc2d      	bgt.n	800aa30 <AnswerToOrder+0x27c>
		PureYouCommand[ndata-1] = '\r';
 800a9d4:	230d      	movs	r3, #13
		int n = GetInputs(Command,inputs);
 800a9d6:	f107 0108 	add.w	r1, r7, #8
 800a9da:	4640      	mov	r0, r8
		PureYouCommand[ndata-1] = '\r';
 800a9dc:	54ab      	strb	r3, [r5, r2]
		int n = GetInputs(Command,inputs);
 800a9de:	f7ff fe8b 	bl	800a6f8 <GetInputs>
		if (n==4)
 800a9e2:	2804      	cmp	r0, #4
 800a9e4:	f040 80ad 	bne.w	800ab42 <AnswerToOrder+0x38e>
			if (inputs[0]==1 && isFound == 0)
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d16a      	bne.n	800aac4 <AnswerToOrder+0x310>
				FreeReceiveBuf2();
 800a9ee:	f7fe fae1 	bl	8008fb4 <FreeReceiveBuf2>
				if(HAL_UART_Transmit(&huart2, (uint8_t*)PureYouCommand, ndata, 500)== HAL_OK)
 800a9f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800a9f6:	fa1f f289 	uxth.w	r2, r9
 800a9fa:	4629      	mov	r1, r5
 800a9fc:	4829      	ldr	r0, [pc, #164]	; (800aaa4 <AnswerToOrder+0x2f0>)
 800a9fe:	f7f8 ff82 	bl	8003906 <HAL_UART_Transmit>
 800aa02:	2800      	cmp	r0, #0
 800aa04:	d15e      	bne.n	800aac4 <AnswerToOrder+0x310>
					uint8_t receivedchar=' ';
 800aa06:	f107 0858 	add.w	r8, r7, #88	; 0x58
 800aa0a:	2320      	movs	r3, #32
 800aa0c:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800aaac <AnswerToOrder+0x2f8>
 800aa10:	f808 3d58 	strb.w	r3, [r8, #-88]!
					while ((receivedchar != '\r' && isOK==1) && cnt<=26)
 800aa14:	783b      	ldrb	r3, [r7, #0]
 800aa16:	2b0d      	cmp	r3, #13
 800aa18:	d14a      	bne.n	800aab0 <AnswerToOrder+0x2fc>
					if(isOK==1 && IsSame(aRxBuffer,PureYouCommand, nDeviceName) == 1)
 800aa1a:	4632      	mov	r2, r6
 800aa1c:	4629      	mov	r1, r5
 800aa1e:	481d      	ldr	r0, [pc, #116]	; (800aa94 <AnswerToOrder+0x2e0>)
 800aa20:	f7ff feb6 	bl	800a790 <IsSame>
 800aa24:	2801      	cmp	r0, #1
 800aa26:	d14b      	bne.n	800aac0 <AnswerToOrder+0x30c>
						es->p->payload = "u2\r";
 800aa28:	68a3      	ldr	r3, [r4, #8]
 800aa2a:	4a1f      	ldr	r2, [pc, #124]	; (800aaa8 <AnswerToOrder+0x2f4>)
 800aa2c:	605a      	str	r2, [r3, #4]
 800aa2e:	e048      	b.n	800aac2 <AnswerToOrder+0x30e>
		for (int i=0; i<ndata-1; i++) PureYouCommand[i] = aTxBuffer[i];
 800aa30:	5c58      	ldrb	r0, [r3, r1]
 800aa32:	54e8      	strb	r0, [r5, r3]
 800aa34:	3301      	adds	r3, #1
 800aa36:	e7cb      	b.n	800a9d0 <AnswerToOrder+0x21c>
 800aa38:	200003c8 	.word	0x200003c8
 800aa3c:	200003d0 	.word	0x200003d0
 800aa40:	0800b988 	.word	0x0800b988
 800aa44:	0800b98d 	.word	0x0800b98d
 800aa48:	0800b992 	.word	0x0800b992
 800aa4c:	0800b996 	.word	0x0800b996
 800aa50:	0800b99e 	.word	0x0800b99e
 800aa54:	0800b9a1 	.word	0x0800b9a1
 800aa58:	0800b9b0 	.word	0x0800b9b0
 800aa5c:	0800b9b5 	.word	0x0800b9b5
 800aa60:	0800b9b8 	.word	0x0800b9b8
 800aa64:	0800b9db 	.word	0x0800b9db
 800aa68:	0800b9fc 	.word	0x0800b9fc
 800aa6c:	0800ba1d 	.word	0x0800ba1d
 800aa70:	0800ba22 	.word	0x0800ba22
 800aa74:	0800ba05 	.word	0x0800ba05
 800aa78:	0800ba29 	.word	0x0800ba29
 800aa7c:	0800b9e2 	.word	0x0800b9e2
 800aa80:	0800ba30 	.word	0x0800ba30
 800aa84:	40020400 	.word	0x40020400
 800aa88:	0800ba4c 	.word	0x0800ba4c
 800aa8c:	0800ba36 	.word	0x0800ba36
 800aa90:	0800ba52 	.word	0x0800ba52
 800aa94:	2001034c 	.word	0x2001034c
 800aa98:	0800ba5d 	.word	0x0800ba5d
 800aa9c:	0800ba68 	.word	0x0800ba68
 800aaa0:	20010370 	.word	0x20010370
 800aaa4:	20010030 	.word	0x20010030
 800aaa8:	0800ba6b 	.word	0x0800ba6b
 800aaac:	2001034b 	.word	0x2001034b
						if(HAL_UART_Receive(&huart2, &receivedchar, 1,1000)!= HAL_OK) {isOK=0;break;}
 800aab0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aab4:	2201      	movs	r2, #1
 800aab6:	4641      	mov	r1, r8
 800aab8:	48a2      	ldr	r0, [pc, #648]	; (800ad44 <AnswerToOrder+0x590>)
 800aaba:	f7f8 ff7d 	bl	80039b8 <HAL_UART_Receive>
 800aabe:	b350      	cbz	r0, 800ab16 <AnswerToOrder+0x362>
		int isFound = 0;
 800aac0:	2000      	movs	r0, #0
 800aac2:	4682      	mov	sl, r0
			if (inputs[1]==1 && isFound == 0)
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d135      	bne.n	800ab36 <AnswerToOrder+0x382>
 800aaca:	f1ba 0f00 	cmp.w	sl, #0
 800aace:	d132      	bne.n	800ab36 <AnswerToOrder+0x382>
				FreeReceiveBuf6();
 800aad0:	f7fe fa80 	bl	8008fd4 <FreeReceiveBuf6>
				if(HAL_UART_Transmit(&huart6, (uint8_t*)PureYouCommand, ndata , 500)== HAL_OK)
 800aad4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800aad8:	fa1f f289 	uxth.w	r2, r9
 800aadc:	4629      	mov	r1, r5
 800aade:	489a      	ldr	r0, [pc, #616]	; (800ad48 <AnswerToOrder+0x594>)
 800aae0:	f7f8 ff11 	bl	8003906 <HAL_UART_Transmit>
 800aae4:	bb50      	cbnz	r0, 800ab3c <AnswerToOrder+0x388>
					uint8_t receivedchar=' ';
 800aae6:	f107 0858 	add.w	r8, r7, #88	; 0x58
 800aaea:	2320      	movs	r3, #32
 800aaec:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800ad74 <AnswerToOrder+0x5c0>
						if(HAL_UART_Receive(&huart6, &receivedchar, 1,1000)!= HAL_OK) {isOK=0;break;}
 800aaf0:	f8df a254 	ldr.w	sl, [pc, #596]	; 800ad48 <AnswerToOrder+0x594>
					uint8_t receivedchar=' ';
 800aaf4:	f808 3d58 	strb.w	r3, [r8, #-88]!
					while ((receivedchar != '\r' && isOK==1) && cnt<=26)
 800aaf8:	783b      	ldrb	r3, [r7, #0]
 800aafa:	2b0d      	cmp	r3, #13
 800aafc:	d10f      	bne.n	800ab1e <AnswerToOrder+0x36a>
					if(isOK==1 && IsSame(aRxBuffer,PureYouCommand, nDeviceName) == 1)
 800aafe:	4632      	mov	r2, r6
 800ab00:	4629      	mov	r1, r5
 800ab02:	4892      	ldr	r0, [pc, #584]	; (800ad4c <AnswerToOrder+0x598>)
 800ab04:	f7ff fe44 	bl	800a790 <IsSame>
 800ab08:	2801      	cmp	r0, #1
 800ab0a:	d117      	bne.n	800ab3c <AnswerToOrder+0x388>
						es->p->payload = "u6\r";
 800ab0c:	68a3      	ldr	r3, [r4, #8]
 800ab0e:	4a90      	ldr	r2, [pc, #576]	; (800ad50 <AnswerToOrder+0x59c>)
			es->p->payload = "err.number of inputs:4\r";
 800ab10:	605a      	str	r2, [r3, #4]
 800ab12:	46dd      	mov	sp, fp
 800ab14:	e731      	b.n	800a97a <AnswerToOrder+0x1c6>
						aRxBuffer[cnt] = receivedchar;
 800ab16:	783b      	ldrb	r3, [r7, #0]
 800ab18:	f80a 3f01 	strb.w	r3, [sl, #1]!
 800ab1c:	e77a      	b.n	800aa14 <AnswerToOrder+0x260>
						if(HAL_UART_Receive(&huart6, &receivedchar, 1,1000)!= HAL_OK) {isOK=0;break;}
 800ab1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ab22:	2201      	movs	r2, #1
 800ab24:	4641      	mov	r1, r8
 800ab26:	4650      	mov	r0, sl
 800ab28:	f7f8 ff46 	bl	80039b8 <HAL_UART_Receive>
 800ab2c:	b930      	cbnz	r0, 800ab3c <AnswerToOrder+0x388>
						aRxBuffer[cnt] = receivedchar;
 800ab2e:	783b      	ldrb	r3, [r7, #0]
 800ab30:	f809 3f01 	strb.w	r3, [r9, #1]!
 800ab34:	e7e0      	b.n	800aaf8 <AnswerToOrder+0x344>
			if (isFound == 0) es->p->payload = "null\r";
 800ab36:	f1ba 0f00 	cmp.w	sl, #0
 800ab3a:	d1ea      	bne.n	800ab12 <AnswerToOrder+0x35e>
 800ab3c:	68a3      	ldr	r3, [r4, #8]
 800ab3e:	4a85      	ldr	r2, [pc, #532]	; (800ad54 <AnswerToOrder+0x5a0>)
 800ab40:	e7e6      	b.n	800ab10 <AnswerToOrder+0x35c>
			es->p->payload = "err.number of inputs:4\r";
 800ab42:	68a3      	ldr	r3, [r4, #8]
 800ab44:	4a84      	ldr	r2, [pc, #528]	; (800ad58 <AnswerToOrder+0x5a4>)
 800ab46:	e7e3      	b.n	800ab10 <AnswerToOrder+0x35c>
	else if (check(Command,"u2."))
 800ab48:	4984      	ldr	r1, [pc, #528]	; (800ad5c <AnswerToOrder+0x5a8>)
 800ab4a:	4640      	mov	r0, r8
 800ab4c:	f7ff fdc4 	bl	800a6d8 <check>
 800ab50:	4681      	mov	r9, r0
 800ab52:	2800      	cmp	r0, #0
 800ab54:	d045      	beq.n	800abe2 <AnswerToOrder+0x42e>
		isUart2 = 1;
 800ab56:	2301      	movs	r3, #1
 800ab58:	6033      	str	r3, [r6, #0]
		FreeReceiveBuf2();
 800ab5a:	f7fe fa2b 	bl	8008fb4 <FreeReceiveBuf2>
		int ndata = GetChildCommand(Command, aTxBuffer);
 800ab5e:	4980      	ldr	r1, [pc, #512]	; (800ad60 <AnswerToOrder+0x5ac>)
 800ab60:	4640      	mov	r0, r8
 800ab62:	f7ff fdf3 	bl	800a74c <GetChildCommand>
		if (isUart2ITMode == 1)
 800ab66:	4b7f      	ldr	r3, [pc, #508]	; (800ad64 <AnswerToOrder+0x5b0>)
 800ab68:	b282      	uxth	r2, r0
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d112      	bne.n	800ab96 <AnswerToOrder+0x3e2>
			if(HAL_UART_Transmit_IT(&huart2, (uint8_t*)aTxBuffer, ndata) != HAL_OK)
 800ab70:	497b      	ldr	r1, [pc, #492]	; (800ad60 <AnswerToOrder+0x5ac>)
 800ab72:	4874      	ldr	r0, [pc, #464]	; (800ad44 <AnswerToOrder+0x590>)
 800ab74:	f7f8 fe31 	bl	80037da <HAL_UART_Transmit_IT>
 800ab78:	b110      	cbz	r0, 800ab80 <AnswerToOrder+0x3cc>
			    es->p->payload = "err.sending error\r";
 800ab7a:	68a3      	ldr	r3, [r4, #8]
 800ab7c:	4a7a      	ldr	r2, [pc, #488]	; (800ad68 <AnswerToOrder+0x5b4>)
 800ab7e:	605a      	str	r2, [r3, #4]
			if(HAL_UART_Receive_IT(&huart2, (uint8_t*)uRxBuffer, 2) != HAL_OK)
 800ab80:	2202      	movs	r2, #2
 800ab82:	497a      	ldr	r1, [pc, #488]	; (800ad6c <AnswerToOrder+0x5b8>)
 800ab84:	486f      	ldr	r0, [pc, #444]	; (800ad44 <AnswerToOrder+0x590>)
 800ab86:	f7f8 fe49 	bl	800381c <HAL_UART_Receive_IT>
 800ab8a:	2800      	cmp	r0, #0
 800ab8c:	f43f aef5 	beq.w	800a97a <AnswerToOrder+0x1c6>
									      es->p->payload = "err.receive error\r";
 800ab90:	68a3      	ldr	r3, [r4, #8]
 800ab92:	4a77      	ldr	r2, [pc, #476]	; (800ad70 <AnswerToOrder+0x5bc>)
 800ab94:	e61f      	b.n	800a7d6 <AnswerToOrder+0x22>
			if(HAL_UART_Transmit(&huart2, (uint8_t*)aTxBuffer, ndata, 2000)== HAL_OK)
 800ab96:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ab9a:	4971      	ldr	r1, [pc, #452]	; (800ad60 <AnswerToOrder+0x5ac>)
 800ab9c:	4869      	ldr	r0, [pc, #420]	; (800ad44 <AnswerToOrder+0x590>)
 800ab9e:	f7f8 feb2 	bl	8003906 <HAL_UART_Transmit>
 800aba2:	b9d8      	cbnz	r0, 800abdc <AnswerToOrder+0x428>
				uint8_t receivedchar=' ';
 800aba4:	f107 0558 	add.w	r5, r7, #88	; 0x58
 800aba8:	2320      	movs	r3, #32
 800abaa:	4e72      	ldr	r6, [pc, #456]	; (800ad74 <AnswerToOrder+0x5c0>)
					if(HAL_UART_Receive(&huart2, &receivedchar, 1,2000)!= HAL_OK) {isOK=0;break;}
 800abac:	f8df 8194 	ldr.w	r8, [pc, #404]	; 800ad44 <AnswerToOrder+0x590>
				uint8_t receivedchar=' ';
 800abb0:	f805 3d50 	strb.w	r3, [r5, #-80]!
				while ((receivedchar != '\r' && isOK==1) && cnt<=26)
 800abb4:	7a3b      	ldrb	r3, [r7, #8]
 800abb6:	2b0d      	cmp	r3, #13
 800abb8:	d102      	bne.n	800abc0 <AnswerToOrder+0x40c>
					es->p->payload = aRxBuffer;
 800abba:	68a3      	ldr	r3, [r4, #8]
 800abbc:	4a63      	ldr	r2, [pc, #396]	; (800ad4c <AnswerToOrder+0x598>)
 800abbe:	e60a      	b.n	800a7d6 <AnswerToOrder+0x22>
					if(HAL_UART_Receive(&huart2, &receivedchar, 1,2000)!= HAL_OK) {isOK=0;break;}
 800abc0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800abc4:	2201      	movs	r2, #1
 800abc6:	4629      	mov	r1, r5
 800abc8:	4640      	mov	r0, r8
 800abca:	f7f8 fef5 	bl	80039b8 <HAL_UART_Receive>
 800abce:	2800      	cmp	r0, #0
 800abd0:	f040 835d 	bne.w	800b28e <AnswerToOrder+0xada>
					aRxBuffer[cnt] = receivedchar;
 800abd4:	7a3b      	ldrb	r3, [r7, #8]
 800abd6:	f806 3f01 	strb.w	r3, [r6, #1]!
 800abda:	e7eb      	b.n	800abb4 <AnswerToOrder+0x400>
				es->p->payload = "err.sending time out\r";
 800abdc:	68a3      	ldr	r3, [r4, #8]
 800abde:	4a66      	ldr	r2, [pc, #408]	; (800ad78 <AnswerToOrder+0x5c4>)
 800abe0:	e5f9      	b.n	800a7d6 <AnswerToOrder+0x22>
	else if (check(Command,"u6."))
 800abe2:	4966      	ldr	r1, [pc, #408]	; (800ad7c <AnswerToOrder+0x5c8>)
 800abe4:	4640      	mov	r0, r8
 800abe6:	f7ff fd77 	bl	800a6d8 <check>
 800abea:	2800      	cmp	r0, #0
 800abec:	d070      	beq.n	800acd0 <AnswerToOrder+0x51c>
		isUart6 = 1;
 800abee:	2601      	movs	r6, #1
		if (check(Command,"u6.l.ss"))
 800abf0:	4963      	ldr	r1, [pc, #396]	; (800ad80 <AnswerToOrder+0x5cc>)
 800abf2:	4640      	mov	r0, r8
		isUart6 = 1;
 800abf4:	602e      	str	r6, [r5, #0]
		if (check(Command,"u6.l.ss"))
 800abf6:	f7ff fd6f 	bl	800a6d8 <check>
 800abfa:	4605      	mov	r5, r0
 800abfc:	b198      	cbz	r0, 800ac26 <AnswerToOrder+0x472>
			int n = GetInputs(Command,inputs);
 800abfe:	f107 0108 	add.w	r1, r7, #8
 800ac02:	4640      	mov	r0, r8
 800ac04:	f7ff fd78 	bl	800a6f8 <GetInputs>
			row=0;
 800ac08:	4b5e      	ldr	r3, [pc, #376]	; (800ad84 <AnswerToOrder+0x5d0>)
			isSS=1;//ss=single shot
 800ac0a:	4635      	mov	r5, r6
			row=0;
 800ac0c:	f8a3 9000 	strh.w	r9, [r3]
			column=0;
 800ac10:	4b5d      	ldr	r3, [pc, #372]	; (800ad88 <AnswerToOrder+0x5d4>)
 800ac12:	f8c3 9000 	str.w	r9, [r3]
			*(uint32_t *) Dac_x = 2047;
 800ac16:	4b5d      	ldr	r3, [pc, #372]	; (800ad8c <AnswerToOrder+0x5d8>)
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800ac1e:	6013      	str	r3, [r2, #0]
			*(uint32_t *) Dac_y = 2047;
 800ac20:	4a5b      	ldr	r2, [pc, #364]	; (800ad90 <AnswerToOrder+0x5dc>)
 800ac22:	6812      	ldr	r2, [r2, #0]
 800ac24:	6013      	str	r3, [r2, #0]
		int ndata = GetChildCommand(Command, aTxBuffer);
 800ac26:	494e      	ldr	r1, [pc, #312]	; (800ad60 <AnswerToOrder+0x5ac>)
 800ac28:	4640      	mov	r0, r8
 800ac2a:	f7ff fd8f 	bl	800a74c <GetChildCommand>
		if (isUart6ITMode == 1)
 800ac2e:	4b59      	ldr	r3, [pc, #356]	; (800ad94 <AnswerToOrder+0x5e0>)
 800ac30:	b282      	uxth	r2, r0
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d125      	bne.n	800ac84 <AnswerToOrder+0x4d0>
			if(HAL_UART_Transmit_IT(&huart6, (uint8_t*)aTxBuffer, ndata) != HAL_OK)
 800ac38:	4949      	ldr	r1, [pc, #292]	; (800ad60 <AnswerToOrder+0x5ac>)
 800ac3a:	4843      	ldr	r0, [pc, #268]	; (800ad48 <AnswerToOrder+0x594>)
 800ac3c:	f7f8 fdcd 	bl	80037da <HAL_UART_Transmit_IT>
 800ac40:	b110      	cbz	r0, 800ac48 <AnswerToOrder+0x494>
			      es->p->payload = "err.sending error\r";
 800ac42:	68a3      	ldr	r3, [r4, #8]
 800ac44:	4a48      	ldr	r2, [pc, #288]	; (800ad68 <AnswerToOrder+0x5b4>)
 800ac46:	605a      	str	r2, [r3, #4]
			if(HAL_UART_Receive_IT(&huart6, (uint8_t*)uRxBuffer, 2) != HAL_OK)
 800ac48:	2202      	movs	r2, #2
 800ac4a:	4948      	ldr	r1, [pc, #288]	; (800ad6c <AnswerToOrder+0x5b8>)
 800ac4c:	483e      	ldr	r0, [pc, #248]	; (800ad48 <AnswerToOrder+0x594>)
 800ac4e:	f7f8 fde5 	bl	800381c <HAL_UART_Receive_IT>
 800ac52:	b110      	cbz	r0, 800ac5a <AnswerToOrder+0x4a6>
						      es->p->payload = "err.receive error\r";
 800ac54:	68a3      	ldr	r3, [r4, #8]
 800ac56:	4a46      	ldr	r2, [pc, #280]	; (800ad70 <AnswerToOrder+0x5bc>)
				es->p->payload = "err.sending time out\r";
 800ac58:	605a      	str	r2, [r3, #4]
		if (isSS == 1) //ss=single shot
 800ac5a:	2d01      	cmp	r5, #1
 800ac5c:	f47f ae8d 	bne.w	800a97a <AnswerToOrder+0x1c6>
			if (isSS==1) HAL_Delay(2);
 800ac60:	2002      	movs	r0, #2
 800ac62:	f7f5 ff21 	bl	8000aa8 <HAL_Delay>
			isSingleShot=1;
 800ac66:	4b4c      	ldr	r3, [pc, #304]	; (800ad98 <AnswerToOrder+0x5e4>)
			SSDotNum = inputs[1] * inputs[1];
 800ac68:	4a4c      	ldr	r2, [pc, #304]	; (800ad9c <AnswerToOrder+0x5e8>)
			HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 800ac6a:	2180      	movs	r1, #128	; 0x80
			isSingleShot=1;
 800ac6c:	601d      	str	r5, [r3, #0]
			SSDotNum = inputs[1] * inputs[1];
 800ac6e:	68fb      	ldr	r3, [r7, #12]
			HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 800ac70:	484b      	ldr	r0, [pc, #300]	; (800ada0 <AnswerToOrder+0x5ec>)
			SSDotNum = inputs[1] * inputs[1];
 800ac72:	435b      	muls	r3, r3
 800ac74:	6013      	str	r3, [r2, #0]
			SSiDot = 0;
 800ac76:	2200      	movs	r2, #0
 800ac78:	4b4a      	ldr	r3, [pc, #296]	; (800ada4 <AnswerToOrder+0x5f0>)
 800ac7a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 800ac7c:	462a      	mov	r2, r5
 800ac7e:	f7f7 fb3f 	bl	8002300 <HAL_GPIO_WritePin>
 800ac82:	e67a      	b.n	800a97a <AnswerToOrder+0x1c6>
			if(HAL_UART_Transmit(&huart6, (uint8_t*)aTxBuffer, ndata, 2000)== HAL_OK)
 800ac84:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ac88:	4935      	ldr	r1, [pc, #212]	; (800ad60 <AnswerToOrder+0x5ac>)
 800ac8a:	482f      	ldr	r0, [pc, #188]	; (800ad48 <AnswerToOrder+0x594>)
 800ac8c:	f7f8 fe3b 	bl	8003906 <HAL_UART_Transmit>
 800ac90:	b9d8      	cbnz	r0, 800acca <AnswerToOrder+0x516>
				uint8_t receivedchar=' ';
 800ac92:	f107 0858 	add.w	r8, r7, #88	; 0x58
 800ac96:	2320      	movs	r3, #32
 800ac98:	4e36      	ldr	r6, [pc, #216]	; (800ad74 <AnswerToOrder+0x5c0>)
					if(HAL_UART_Receive(&huart6, &receivedchar, 1,2000)!= HAL_OK) {isOK=0;break;}
 800ac9a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800ad48 <AnswerToOrder+0x594>
				uint8_t receivedchar=' ';
 800ac9e:	f808 3d58 	strb.w	r3, [r8, #-88]!
				while ((receivedchar != '\r' && isOK==1) && cnt<=26)
 800aca2:	783b      	ldrb	r3, [r7, #0]
 800aca4:	2b0d      	cmp	r3, #13
 800aca6:	d102      	bne.n	800acae <AnswerToOrder+0x4fa>
					es->p->payload = aRxBuffer;
 800aca8:	68a3      	ldr	r3, [r4, #8]
 800acaa:	4a28      	ldr	r2, [pc, #160]	; (800ad4c <AnswerToOrder+0x598>)
 800acac:	e7d4      	b.n	800ac58 <AnswerToOrder+0x4a4>
					if(HAL_UART_Receive(&huart6, &receivedchar, 1,2000)!= HAL_OK) {isOK=0;break;}
 800acae:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800acb2:	2201      	movs	r2, #1
 800acb4:	4641      	mov	r1, r8
 800acb6:	4648      	mov	r0, r9
 800acb8:	f7f8 fe7e 	bl	80039b8 <HAL_UART_Receive>
 800acbc:	2800      	cmp	r0, #0
 800acbe:	f040 82ea 	bne.w	800b296 <AnswerToOrder+0xae2>
					aRxBuffer[cnt] = receivedchar;
 800acc2:	783b      	ldrb	r3, [r7, #0]
 800acc4:	f806 3f01 	strb.w	r3, [r6, #1]!
 800acc8:	e7eb      	b.n	800aca2 <AnswerToOrder+0x4ee>
				es->p->payload = "err.sending time out\r";
 800acca:	68a3      	ldr	r3, [r4, #8]
 800accc:	4a2a      	ldr	r2, [pc, #168]	; (800ad78 <AnswerToOrder+0x5c4>)
 800acce:	e7c3      	b.n	800ac58 <AnswerToOrder+0x4a4>
	else if (check(Command,"c1."))
 800acd0:	4935      	ldr	r1, [pc, #212]	; (800ada8 <AnswerToOrder+0x5f4>)
 800acd2:	4640      	mov	r0, r8
 800acd4:	f7ff fd00 	bl	800a6d8 <check>
 800acd8:	b110      	cbz	r0, 800ace0 <AnswerToOrder+0x52c>
		es->p->payload = "err.CAN1 is not programed.\r";
 800acda:	68a3      	ldr	r3, [r4, #8]
 800acdc:	4a33      	ldr	r2, [pc, #204]	; (800adac <AnswerToOrder+0x5f8>)
 800acde:	e57a      	b.n	800a7d6 <AnswerToOrder+0x22>
	else if (check(Command,"c2."))
 800ace0:	4933      	ldr	r1, [pc, #204]	; (800adb0 <AnswerToOrder+0x5fc>)
 800ace2:	4640      	mov	r0, r8
 800ace4:	f7ff fcf8 	bl	800a6d8 <check>
 800ace8:	b110      	cbz	r0, 800acf0 <AnswerToOrder+0x53c>
		es->p->payload = "err.CAN2 is not programed.\r";
 800acea:	68a3      	ldr	r3, [r4, #8]
 800acec:	4a31      	ldr	r2, [pc, #196]	; (800adb4 <AnswerToOrder+0x600>)
 800acee:	e572      	b.n	800a7d6 <AnswerToOrder+0x22>
	else if (check(Command,"dacxrange "))
 800acf0:	4931      	ldr	r1, [pc, #196]	; (800adb8 <AnswerToOrder+0x604>)
 800acf2:	4640      	mov	r0, r8
 800acf4:	f7ff fcf0 	bl	800a6d8 <check>
 800acf8:	b178      	cbz	r0, 800ad1a <AnswerToOrder+0x566>
		int n = GetInputs(Command,inputs);
 800acfa:	f107 0108 	add.w	r1, r7, #8
 800acfe:	4640      	mov	r0, r8
 800ad00:	f7ff fcfa 	bl	800a6f8 <GetInputs>
		if (n==2)
 800ad04:	2802      	cmp	r0, #2
 800ad06:	f040 82ba 	bne.w	800b27e <AnswerToOrder+0xaca>
			dacrange(xVoltageBuffer,(uint16_t)inputs[0],(uint16_t)inputs[1],512);//1.mean val and 2.amp
 800ad0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad0e:	89ba      	ldrh	r2, [r7, #12]
 800ad10:	8939      	ldrh	r1, [r7, #8]
 800ad12:	482a      	ldr	r0, [pc, #168]	; (800adbc <AnswerToOrder+0x608>)
	            dacrange(yVoltageBuffer,(uint16_t)2047, (uint16_t)2047,512*windowsize);
 800ad14:	f7fe f84e 	bl	8008db4 <dacrange>
 800ad18:	e587      	b.n	800a82a <AnswerToOrder+0x76>
	else if (check(Command,"dacyrange "))
 800ad1a:	4929      	ldr	r1, [pc, #164]	; (800adc0 <AnswerToOrder+0x60c>)
 800ad1c:	4640      	mov	r0, r8
 800ad1e:	f7ff fcdb 	bl	800a6d8 <check>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d050      	beq.n	800adc8 <AnswerToOrder+0x614>
		int n = GetInputs(Command,inputs);
 800ad26:	f107 0108 	add.w	r1, r7, #8
 800ad2a:	4640      	mov	r0, r8
 800ad2c:	f7ff fce4 	bl	800a6f8 <GetInputs>
		if (n==2)
 800ad30:	2802      	cmp	r0, #2
 800ad32:	f040 82a4 	bne.w	800b27e <AnswerToOrder+0xaca>
			dacrange(yVoltageBuffer,(uint16_t)inputs[0],(uint16_t)inputs[1],512);//1.mean val and 2.amp
 800ad36:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad3a:	89ba      	ldrh	r2, [r7, #12]
 800ad3c:	8939      	ldrh	r1, [r7, #8]
	            dacrange(yVoltageBuffer,(uint16_t)2047, (uint16_t)2047,512*windowsize);
 800ad3e:	4821      	ldr	r0, [pc, #132]	; (800adc4 <AnswerToOrder+0x610>)
 800ad40:	e7e8      	b.n	800ad14 <AnswerToOrder+0x560>
 800ad42:	bf00      	nop
 800ad44:	20010030 	.word	0x20010030
 800ad48:	2000f300 	.word	0x2000f300
 800ad4c:	2001034c 	.word	0x2001034c
 800ad50:	0800ba6f 	.word	0x0800ba6f
 800ad54:	0800ba73 	.word	0x0800ba73
 800ad58:	0800ba79 	.word	0x0800ba79
 800ad5c:	0800ba91 	.word	0x0800ba91
 800ad60:	20010370 	.word	0x20010370
 800ad64:	200003cc 	.word	0x200003cc
 800ad68:	0800ba95 	.word	0x0800ba95
 800ad6c:	20010344 	.word	0x20010344
 800ad70:	0800baa8 	.word	0x0800baa8
 800ad74:	2001034b 	.word	0x2001034b
 800ad78:	0800babb 	.word	0x0800babb
 800ad7c:	0800bad1 	.word	0x0800bad1
 800ad80:	0800bad5 	.word	0x0800bad5
 800ad84:	20010342 	.word	0x20010342
 800ad88:	2000ed7c 	.word	0x2000ed7c
 800ad8c:	2000039c 	.word	0x2000039c
 800ad90:	200003a0 	.word	0x200003a0
 800ad94:	200003d4 	.word	0x200003d4
 800ad98:	200003c4 	.word	0x200003c4
 800ad9c:	200003e0 	.word	0x200003e0
 800ada0:	40020400 	.word	0x40020400
 800ada4:	200003e4 	.word	0x200003e4
 800ada8:	0800badd 	.word	0x0800badd
 800adac:	0800bae1 	.word	0x0800bae1
 800adb0:	0800bafd 	.word	0x0800bafd
 800adb4:	0800bb01 	.word	0x0800bb01
 800adb8:	0800bb1d 	.word	0x0800bb1d
 800adbc:	2000e528 	.word	0x2000e528
 800adc0:	0800bb40 	.word	0x0800bb40
 800adc4:	2000f5f0 	.word	0x2000f5f0
	else if (check(Command,"dactimer "))
 800adc8:	499b      	ldr	r1, [pc, #620]	; (800b038 <AnswerToOrder+0x884>)
 800adca:	4640      	mov	r0, r8
 800adcc:	f7ff fc84 	bl	800a6d8 <check>
 800add0:	2800      	cmp	r0, #0
 800add2:	d030      	beq.n	800ae36 <AnswerToOrder+0x682>
		int n = GetInputs(Command,inputs);
 800add4:	f107 0108 	add.w	r1, r7, #8
 800add8:	4640      	mov	r0, r8
 800adda:	f7ff fc8d 	bl	800a6f8 <GetInputs>
		if (n==1)
 800adde:	2801      	cmp	r0, #1
 800ade0:	f040 818c 	bne.w	800b0fc <AnswerToOrder+0x948>
			if ((uint8_t)inputs[0]==(uint8_t)0)
 800ade4:	7a3b      	ldrb	r3, [r7, #8]
 800ade6:	b9bb      	cbnz	r3, 800ae18 <AnswerToOrder+0x664>
				HAL_TIM_Base_Stop(&htim4);
 800ade8:	4d94      	ldr	r5, [pc, #592]	; (800b03c <AnswerToOrder+0x888>)
				isDacTimerOn = 0;
 800adea:	4a95      	ldr	r2, [pc, #596]	; (800b040 <AnswerToOrder+0x88c>)
				HAL_TIM_Base_Stop(&htim4);
 800adec:	4628      	mov	r0, r5
				isDacTimerOn = 0;
 800adee:	6013      	str	r3, [r2, #0]
				HAL_TIM_Base_Stop(&htim4);
 800adf0:	f7f8 fae7 	bl	80033c2 <HAL_TIM_Base_Stop>
				__HAL_TIM_DISABLE(&htim4);
 800adf4:	682b      	ldr	r3, [r5, #0]
 800adf6:	f241 1211 	movw	r2, #4369	; 0x1111
 800adfa:	6a19      	ldr	r1, [r3, #32]
 800adfc:	4211      	tst	r1, r2
 800adfe:	f47f ad14 	bne.w	800a82a <AnswerToOrder+0x76>
 800ae02:	6a19      	ldr	r1, [r3, #32]
 800ae04:	f240 4244 	movw	r2, #1092	; 0x444
 800ae08:	4211      	tst	r1, r2
 800ae0a:	f47f ad0e 	bne.w	800a82a <AnswerToOrder+0x76>
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	f022 0201 	bic.w	r2, r2, #1
		            windowchanged=2;
 800ae14:	601a      	str	r2, [r3, #0]
 800ae16:	e508      	b.n	800a82a <AnswerToOrder+0x76>
			else if ((uint8_t)inputs[0]==(uint8_t)1)
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	f47f ada0 	bne.w	800a95e <AnswerToOrder+0x1aa>
				HAL_TIM_Base_Start(&htim4);
 800ae1e:	4d87      	ldr	r5, [pc, #540]	; (800b03c <AnswerToOrder+0x888>)
				isDacTimerOn = 1;
 800ae20:	4a87      	ldr	r2, [pc, #540]	; (800b040 <AnswerToOrder+0x88c>)
				HAL_TIM_Base_Start(&htim4);
 800ae22:	4628      	mov	r0, r5
				isDacTimerOn = 1;
 800ae24:	6013      	str	r3, [r2, #0]
				HAL_TIM_Base_Start(&htim4);
 800ae26:	f7f8 fabf 	bl	80033a8 <HAL_TIM_Base_Start>
				__HAL_TIM_ENABLE(&htim4);
 800ae2a:	682a      	ldr	r2, [r5, #0]
 800ae2c:	6813      	ldr	r3, [r2, #0]
 800ae2e:	f043 0301 	orr.w	r3, r3, #1
 800ae32:	6013      	str	r3, [r2, #0]
 800ae34:	e4f9      	b.n	800a82a <AnswerToOrder+0x76>
	else if (check(Command,"dacper "))
 800ae36:	4983      	ldr	r1, [pc, #524]	; (800b044 <AnswerToOrder+0x890>)
 800ae38:	4640      	mov	r0, r8
 800ae3a:	f7ff fc4d 	bl	800a6d8 <check>
 800ae3e:	2800      	cmp	r0, #0
 800ae40:	d02f      	beq.n	800aea2 <AnswerToOrder+0x6ee>
		int n = GetInputs(Command,inputs);
 800ae42:	f107 0108 	add.w	r1, r7, #8
 800ae46:	4640      	mov	r0, r8
 800ae48:	f7ff fc56 	bl	800a6f8 <GetInputs>
		if (n>=1)
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	68a5      	ldr	r5, [r4, #8]
 800ae50:	dd25      	ble.n	800ae9e <AnswerToOrder+0x6ea>
			if (inputs[0] > 0)
 800ae52:	68b8      	ldr	r0, [r7, #8]
 800ae54:	2800      	cmp	r0, #0
 800ae56:	dd20      	ble.n	800ae9a <AnswerToOrder+0x6e6>
				if(isDacTimerOn == 1)
 800ae58:	4b79      	ldr	r3, [pc, #484]	; (800b040 <AnswerToOrder+0x88c>)
 800ae5a:	4c78      	ldr	r4, [pc, #480]	; (800b03c <AnswerToOrder+0x888>)
 800ae5c:	6819      	ldr	r1, [r3, #0]
 800ae5e:	2901      	cmp	r1, #1
 800ae60:	d10e      	bne.n	800ae80 <AnswerToOrder+0x6cc>
				__HAL_TIM_DISABLE(&htim4);
 800ae62:	6823      	ldr	r3, [r4, #0]
 800ae64:	f241 1211 	movw	r2, #4369	; 0x1111
 800ae68:	6a1e      	ldr	r6, [r3, #32]
 800ae6a:	4216      	tst	r6, r2
 800ae6c:	d108      	bne.n	800ae80 <AnswerToOrder+0x6cc>
 800ae6e:	6a1e      	ldr	r6, [r3, #32]
 800ae70:	f240 4244 	movw	r2, #1092	; 0x444
 800ae74:	4216      	tst	r6, r2
 800ae76:	d103      	bne.n	800ae80 <AnswerToOrder+0x6cc>
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	f022 0201 	bic.w	r2, r2, #1
 800ae7e:	601a      	str	r2, [r3, #0]
				htim4.Instance->ARR=inputs[0];
 800ae80:	6823      	ldr	r3, [r4, #0]
				if(isDacTimerOn == 1)
 800ae82:	2901      	cmp	r1, #1
				htim4.Instance->CCR4=inputs[1];
 800ae84:	68fa      	ldr	r2, [r7, #12]
				htim4.Instance->ARR=inputs[0];
 800ae86:	62d8      	str	r0, [r3, #44]	; 0x2c
				htim4.Instance->CCR4=inputs[1];
 800ae88:	641a      	str	r2, [r3, #64]	; 0x40
				if(isDacTimerOn == 1)
 800ae8a:	d103      	bne.n	800ae94 <AnswerToOrder+0x6e0>
				__HAL_TIM_ENABLE(&htim4);
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	f042 0201 	orr.w	r2, r2, #1
 800ae92:	601a      	str	r2, [r3, #0]
				es->p->payload = "OK\r";
 800ae94:	4b6c      	ldr	r3, [pc, #432]	; (800b048 <AnswerToOrder+0x894>)
			es->p->payload = "err.number of inputs:1\r";
 800ae96:	606b      	str	r3, [r5, #4]
 800ae98:	e56f      	b.n	800a97a <AnswerToOrder+0x1c6>
				es->p->payload = "err.Valid values>0\r";
 800ae9a:	4b6c      	ldr	r3, [pc, #432]	; (800b04c <AnswerToOrder+0x898>)
 800ae9c:	e7fb      	b.n	800ae96 <AnswerToOrder+0x6e2>
			es->p->payload = "err.number of inputs:1\r";
 800ae9e:	4b6c      	ldr	r3, [pc, #432]	; (800b050 <AnswerToOrder+0x89c>)
 800aea0:	e7f9      	b.n	800ae96 <AnswerToOrder+0x6e2>
	else if (check(Command,"adctime "))
 800aea2:	496c      	ldr	r1, [pc, #432]	; (800b054 <AnswerToOrder+0x8a0>)
 800aea4:	4640      	mov	r0, r8
 800aea6:	f7ff fc17 	bl	800a6d8 <check>
 800aeaa:	4605      	mov	r5, r0
 800aeac:	b1d0      	cbz	r0, 800aee4 <AnswerToOrder+0x730>
			int n = GetInputs(Command,inputs);
 800aeae:	f107 0108 	add.w	r1, r7, #8
 800aeb2:	4640      	mov	r0, r8
 800aeb4:	f7ff fc20 	bl	800a6f8 <GetInputs>
			if (n==2)
 800aeb8:	2802      	cmp	r0, #2
 800aeba:	68a1      	ldr	r1, [r4, #8]
 800aebc:	d110      	bne.n	800aee0 <AnswerToOrder+0x72c>
				if ((inputs[0] >= 0) && (inputs[0] <= 5))
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	2a05      	cmp	r2, #5
 800aec2:	d80b      	bhi.n	800aedc <AnswerToOrder+0x728>
					hadc1.Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, ADC_CHANNEL_0);
 800aec4:	4b64      	ldr	r3, [pc, #400]	; (800b058 <AnswerToOrder+0x8a4>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	6918      	ldr	r0, [r3, #16]
 800aeca:	f020 0007 	bic.w	r0, r0, #7
 800aece:	6118      	str	r0, [r3, #16]
					hadc1.Instance->SMPR2 |= ADC_SMPR2(inputs[0], ADC_CHANNEL_0);
 800aed0:	6918      	ldr	r0, [r3, #16]
 800aed2:	4302      	orrs	r2, r0
 800aed4:	611a      	str	r2, [r3, #16]
					es->p->payload = "OK\r";
 800aed6:	4b5c      	ldr	r3, [pc, #368]	; (800b048 <AnswerToOrder+0x894>)
				es->p->payload = "err.number of inputs:1\r";
 800aed8:	604b      	str	r3, [r1, #4]
 800aeda:	e54e      	b.n	800a97a <AnswerToOrder+0x1c6>
					es->p->payload = "err.Valid values>0\r";
 800aedc:	4b5b      	ldr	r3, [pc, #364]	; (800b04c <AnswerToOrder+0x898>)
 800aede:	e7fb      	b.n	800aed8 <AnswerToOrder+0x724>
				es->p->payload = "err.number of inputs:1\r";
 800aee0:	4b5b      	ldr	r3, [pc, #364]	; (800b050 <AnswerToOrder+0x89c>)
 800aee2:	e7f9      	b.n	800aed8 <AnswerToOrder+0x724>
	else if (check(Command,"dacxbuf "))
 800aee4:	495d      	ldr	r1, [pc, #372]	; (800b05c <AnswerToOrder+0x8a8>)
 800aee6:	4640      	mov	r0, r8
 800aee8:	f7ff fbf6 	bl	800a6d8 <check>
 800aeec:	4606      	mov	r6, r0
 800aeee:	b1c0      	cbz	r0, 800af22 <AnswerToOrder+0x76e>
		int n = GetInputs(Command,inputs);
 800aef0:	f107 0108 	add.w	r1, r7, #8
 800aef4:	4640      	mov	r0, r8
 800aef6:	f7ff fbff 	bl	800a6f8 <GetInputs>
		if (n==1)
 800aefa:	2801      	cmp	r0, #1
 800aefc:	f040 80fe 	bne.w	800b0fc <AnswerToOrder+0x948>
			if ((uint8_t)inputs[0]==(uint8_t)0)
 800af00:	7a3a      	ldrb	r2, [r7, #8]
 800af02:	b93a      	cbnz	r2, 800af14 <AnswerToOrder+0x760>
				sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800af04:	2302      	movs	r3, #2
				sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800af06:	603a      	str	r2, [r7, #0]
				sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800af08:	607b      	str	r3, [r7, #4]
				HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 800af0a:	4639      	mov	r1, r7
 800af0c:	4854      	ldr	r0, [pc, #336]	; (800b060 <AnswerToOrder+0x8ac>)
 800af0e:	f7f6 f9bd 	bl	800128c <HAL_DAC_ConfigChannel>
 800af12:	e48a      	b.n	800a82a <AnswerToOrder+0x76>
			else if ((uint8_t)inputs[0]==(uint8_t)1)
 800af14:	2a01      	cmp	r2, #1
 800af16:	f47f ad22 	bne.w	800a95e <AnswerToOrder+0x1aa>
				sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800af1a:	603d      	str	r5, [r7, #0]
				HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800af1c:	462a      	mov	r2, r5
				sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800af1e:	607d      	str	r5, [r7, #4]
 800af20:	e7f3      	b.n	800af0a <AnswerToOrder+0x756>
	else if (check(Command,"dacybuf "))
 800af22:	4950      	ldr	r1, [pc, #320]	; (800b064 <AnswerToOrder+0x8b0>)
 800af24:	4640      	mov	r0, r8
 800af26:	f7ff fbd7 	bl	800a6d8 <check>
 800af2a:	b1a0      	cbz	r0, 800af56 <AnswerToOrder+0x7a2>
		int n = GetInputs(Command,inputs);
 800af2c:	f107 0108 	add.w	r1, r7, #8
 800af30:	4640      	mov	r0, r8
 800af32:	f7ff fbe1 	bl	800a6f8 <GetInputs>
		if (n==1)
 800af36:	2801      	cmp	r0, #1
 800af38:	f040 80e0 	bne.w	800b0fc <AnswerToOrder+0x948>
			if ((uint8_t)inputs[0]==(uint8_t)0)
 800af3c:	7a3b      	ldrb	r3, [r7, #8]
 800af3e:	b923      	cbnz	r3, 800af4a <AnswerToOrder+0x796>
				sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800af40:	603b      	str	r3, [r7, #0]
				sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800af42:	2302      	movs	r3, #2
 800af44:	607b      	str	r3, [r7, #4]
				HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 800af46:	2210      	movs	r2, #16
 800af48:	e7df      	b.n	800af0a <AnswerToOrder+0x756>
			else if ((uint8_t)inputs[0]==(uint8_t)1)
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	f47f ad07 	bne.w	800a95e <AnswerToOrder+0x1aa>
				sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800af50:	603e      	str	r6, [r7, #0]
				sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800af52:	607e      	str	r6, [r7, #4]
 800af54:	e7f7      	b.n	800af46 <AnswerToOrder+0x792>
	else if (check(Command,"setsignal "))
 800af56:	4944      	ldr	r1, [pc, #272]	; (800b068 <AnswerToOrder+0x8b4>)
 800af58:	4640      	mov	r0, r8
 800af5a:	f7ff fbbd 	bl	800a6d8 <check>
 800af5e:	b1b0      	cbz	r0, 800af8e <AnswerToOrder+0x7da>
		int n = GetInputs(Command,inputs);
 800af60:	f107 0108 	add.w	r1, r7, #8
 800af64:	4640      	mov	r0, r8
 800af66:	f7ff fbc7 	bl	800a6f8 <GetInputs>
		if (n==4)
 800af6a:	2804      	cmp	r0, #4
 800af6c:	d10c      	bne.n	800af88 <AnswerToOrder+0x7d4>
			if (setsignal((uint8_t)inputs[0],(uint8_t)inputs[1],(uint8_t)inputs[2],(uint8_t)inputs[3])==1)
 800af6e:	7d3b      	ldrb	r3, [r7, #20]
 800af70:	7c3a      	ldrb	r2, [r7, #16]
 800af72:	7b39      	ldrb	r1, [r7, #12]
 800af74:	7a38      	ldrb	r0, [r7, #8]
 800af76:	f7fd ff89 	bl	8008e8c <setsignal>
 800af7a:	2801      	cmp	r0, #1
 800af7c:	68a3      	ldr	r3, [r4, #8]
 800af7e:	d101      	bne.n	800af84 <AnswerToOrder+0x7d0>
					es->p->payload = "OK\r";
 800af80:	4a31      	ldr	r2, [pc, #196]	; (800b048 <AnswerToOrder+0x894>)
 800af82:	e428      	b.n	800a7d6 <AnswerToOrder+0x22>
				es->p->payload = "err.invalid values\r";
 800af84:	4a39      	ldr	r2, [pc, #228]	; (800b06c <AnswerToOrder+0x8b8>)
 800af86:	e426      	b.n	800a7d6 <AnswerToOrder+0x22>
			es->p->payload = "err.number of inputs:4\r";
 800af88:	68a3      	ldr	r3, [r4, #8]
 800af8a:	4a39      	ldr	r2, [pc, #228]	; (800b070 <AnswerToOrder+0x8bc>)
 800af8c:	e423      	b.n	800a7d6 <AnswerToOrder+0x22>
	else if (check(Command,"rotate "))
 800af8e:	4939      	ldr	r1, [pc, #228]	; (800b074 <AnswerToOrder+0x8c0>)
 800af90:	4640      	mov	r0, r8
 800af92:	f7ff fba1 	bl	800a6d8 <check>
 800af96:	b160      	cbz	r0, 800afb2 <AnswerToOrder+0x7fe>
		int n = GetInputs(Command,inputs);
 800af98:	f107 0108 	add.w	r1, r7, #8
 800af9c:	4640      	mov	r0, r8
 800af9e:	f7ff fbab 	bl	800a6f8 <GetInputs>
		if (n==2)
 800afa2:	2802      	cmp	r0, #2
 800afa4:	f040 816b 	bne.w	800b27e <AnswerToOrder+0xaca>
		  rotate((uint16_t)inputs[0], (uint16_t)inputs[1]);
 800afa8:	89b9      	ldrh	r1, [r7, #12]
 800afaa:	8938      	ldrh	r0, [r7, #8]
 800afac:	f7fd ffda 	bl	8008f64 <rotate>
 800afb0:	e43b      	b.n	800a82a <AnswerToOrder+0x76>
	else if (check(Command,"zoom "))
 800afb2:	4931      	ldr	r1, [pc, #196]	; (800b078 <AnswerToOrder+0x8c4>)
 800afb4:	4640      	mov	r0, r8
 800afb6:	f7ff fb8f 	bl	800a6d8 <check>
 800afba:	b160      	cbz	r0, 800afd6 <AnswerToOrder+0x822>
		int n = GetInputs(Command,inputs);
 800afbc:	f107 0108 	add.w	r1, r7, #8
 800afc0:	4640      	mov	r0, r8
 800afc2:	f7ff fb99 	bl	800a6f8 <GetInputs>
		if (n==2)
 800afc6:	2802      	cmp	r0, #2
 800afc8:	f040 8159 	bne.w	800b27e <AnswerToOrder+0xaca>
		  zoom((uint16_t)inputs[0], (uint16_t)inputs[1]);
 800afcc:	89b9      	ldrh	r1, [r7, #12]
 800afce:	8938      	ldrh	r0, [r7, #8]
 800afd0:	f7fd ffe1 	bl	8008f96 <zoom>
 800afd4:	e429      	b.n	800a82a <AnswerToOrder+0x76>
	else if (check(Command,"u2itmode "))
 800afd6:	4929      	ldr	r1, [pc, #164]	; (800b07c <AnswerToOrder+0x8c8>)
 800afd8:	4640      	mov	r0, r8
 800afda:	f7ff fb7d 	bl	800a6d8 <check>
 800afde:	b190      	cbz	r0, 800b006 <AnswerToOrder+0x852>
		int n = GetInputs(Command,inputs);
 800afe0:	f107 0108 	add.w	r1, r7, #8
 800afe4:	4640      	mov	r0, r8
 800afe6:	f7ff fb87 	bl	800a6f8 <GetInputs>
		if (n==1)
 800afea:	2801      	cmp	r0, #1
 800afec:	68a3      	ldr	r3, [r4, #8]
 800afee:	f040 8086 	bne.w	800b0fe <AnswerToOrder+0x94a>
			if ((uint8_t)inputs[0] == (uint8_t)1)
 800aff2:	7a3a      	ldrb	r2, [r7, #8]
 800aff4:	2a01      	cmp	r2, #1
 800aff6:	d102      	bne.n	800affe <AnswerToOrder+0x84a>
				isUart2ITMode=0;
 800aff8:	4921      	ldr	r1, [pc, #132]	; (800b080 <AnswerToOrder+0x8cc>)
				isUart6ITMode=0;
 800affa:	600a      	str	r2, [r1, #0]
 800affc:	e7c0      	b.n	800af80 <AnswerToOrder+0x7cc>
			else if ((uint8_t)inputs[0] == (uint8_t)0)
 800affe:	2a00      	cmp	r2, #0
 800b000:	f47f acae 	bne.w	800a960 <AnswerToOrder+0x1ac>
 800b004:	e7f8      	b.n	800aff8 <AnswerToOrder+0x844>
	else if (check(Command,"u6itmode "))
 800b006:	491f      	ldr	r1, [pc, #124]	; (800b084 <AnswerToOrder+0x8d0>)
 800b008:	4640      	mov	r0, r8
 800b00a:	f7ff fb65 	bl	800a6d8 <check>
 800b00e:	4605      	mov	r5, r0
 800b010:	2800      	cmp	r0, #0
 800b012:	d03b      	beq.n	800b08c <AnswerToOrder+0x8d8>
		int n = GetInputs(Command,inputs);
 800b014:	f107 0108 	add.w	r1, r7, #8
 800b018:	4640      	mov	r0, r8
 800b01a:	f7ff fb6d 	bl	800a6f8 <GetInputs>
		if (n==1)
 800b01e:	2801      	cmp	r0, #1
 800b020:	68a3      	ldr	r3, [r4, #8]
 800b022:	d16c      	bne.n	800b0fe <AnswerToOrder+0x94a>
			if ((uint8_t)inputs[0] == (uint8_t)1)
 800b024:	7a3a      	ldrb	r2, [r7, #8]
 800b026:	2a01      	cmp	r2, #1
 800b028:	d101      	bne.n	800b02e <AnswerToOrder+0x87a>
				isUart6ITMode=0;
 800b02a:	4917      	ldr	r1, [pc, #92]	; (800b088 <AnswerToOrder+0x8d4>)
 800b02c:	e7e5      	b.n	800affa <AnswerToOrder+0x846>
			else if ((uint8_t)inputs[0] == (uint8_t)0)
 800b02e:	2a00      	cmp	r2, #0
 800b030:	f47f ac96 	bne.w	800a960 <AnswerToOrder+0x1ac>
 800b034:	e7f9      	b.n	800b02a <AnswerToOrder+0x876>
 800b036:	bf00      	nop
 800b038:	0800bb4b 	.word	0x0800bb4b
 800b03c:	2000e2e8 	.word	0x2000e2e8
 800b040:	200003bc 	.word	0x200003bc
 800b044:	0800bb55 	.word	0x0800bb55
 800b048:	0800b9bf 	.word	0x0800b9bf
 800b04c:	0800bb5d 	.word	0x0800bb5d
 800b050:	0800b9c3 	.word	0x0800b9c3
 800b054:	0800bb71 	.word	0x0800bb71
 800b058:	2000ef0c 	.word	0x2000ef0c
 800b05c:	0800bb7a 	.word	0x0800bb7a
 800b060:	2000efdc 	.word	0x2000efdc
 800b064:	0800bb83 	.word	0x0800bb83
 800b068:	0800bb8c 	.word	0x0800bb8c
 800b06c:	0800bb97 	.word	0x0800bb97
 800b070:	0800ba79 	.word	0x0800ba79
 800b074:	0800bbab 	.word	0x0800bbab
 800b078:	0800bbb3 	.word	0x0800bbb3
 800b07c:	0800bbb9 	.word	0x0800bbb9
 800b080:	200003cc 	.word	0x200003cc
 800b084:	0800bbc3 	.word	0x0800bbc3
 800b088:	200003d4 	.word	0x200003d4
	else if (check(Command,"acquire "))
 800b08c:	4983      	ldr	r1, [pc, #524]	; (800b29c <AnswerToOrder+0xae8>)
 800b08e:	4640      	mov	r0, r8
 800b090:	f7ff fb22 	bl	800a6d8 <check>
 800b094:	2800      	cmp	r0, #0
 800b096:	d035      	beq.n	800b104 <AnswerToOrder+0x950>
		int n = GetInputs(Command,inputs);
 800b098:	f107 0108 	add.w	r1, r7, #8
 800b09c:	4640      	mov	r0, r8
 800b09e:	f7ff fb2b 	bl	800a6f8 <GetInputs>
		if (n==1)
 800b0a2:	2801      	cmp	r0, #1
		int n = GetInputs(Command,inputs);
 800b0a4:	4606      	mov	r6, r0
		if (n==1)
 800b0a6:	d129      	bne.n	800b0fc <AnswerToOrder+0x948>
			if ((uint8_t)inputs[0]>(uint8_t)0)
 800b0a8:	7a3b      	ldrb	r3, [r7, #8]
 800b0aa:	b31b      	cbz	r3, 800b0f4 <AnswerToOrder+0x940>
				isDacTimerOn = 0;
 800b0ac:	f8df 8254 	ldr.w	r8, [pc, #596]	; 800b304 <AnswerToOrder+0xb50>
				HAL_TIM_Base_Stop_IT(&htim4);
 800b0b0:	487b      	ldr	r0, [pc, #492]	; (800b2a0 <AnswerToOrder+0xaec>)
				isDacTimerOn = 0;
 800b0b2:	f8c8 5000 	str.w	r5, [r8]
				HAL_TIM_Base_Stop_IT(&htim4);
 800b0b6:	f7f8 f9a6 	bl	8003406 <HAL_TIM_Base_Stop_IT>
				HAL_Delay(200);
 800b0ba:	20c8      	movs	r0, #200	; 0xc8
 800b0bc:	f7f5 fcf4 	bl	8000aa8 <HAL_Delay>
				row=0;
 800b0c0:	4b78      	ldr	r3, [pc, #480]	; (800b2a4 <AnswerToOrder+0xaf0>)
				AcquireNumber=inputs[0];
 800b0c2:	68ba      	ldr	r2, [r7, #8]
				HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 800b0c4:	2180      	movs	r1, #128	; 0x80
				row=0;
 800b0c6:	801d      	strh	r5, [r3, #0]
				column=0;
 800b0c8:	4b77      	ldr	r3, [pc, #476]	; (800b2a8 <AnswerToOrder+0xaf4>)
				HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 800b0ca:	4878      	ldr	r0, [pc, #480]	; (800b2ac <AnswerToOrder+0xaf8>)
				column=0;
 800b0cc:	601d      	str	r5, [r3, #0]
				isAcquire=1;
 800b0ce:	4b78      	ldr	r3, [pc, #480]	; (800b2b0 <AnswerToOrder+0xafc>)
 800b0d0:	601e      	str	r6, [r3, #0]
				AcquireCnt=0;
 800b0d2:	4b78      	ldr	r3, [pc, #480]	; (800b2b4 <AnswerToOrder+0xb00>)
 800b0d4:	601d      	str	r5, [r3, #0]
				AcquireNumber=inputs[0];
 800b0d6:	4b78      	ldr	r3, [pc, #480]	; (800b2b8 <AnswerToOrder+0xb04>)
 800b0d8:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 800b0da:	4632      	mov	r2, r6
 800b0dc:	f7f7 f910 	bl	8002300 <HAL_GPIO_WritePin>
				HAL_Delay(200);
 800b0e0:	20c8      	movs	r0, #200	; 0xc8
 800b0e2:	f7f5 fce1 	bl	8000aa8 <HAL_Delay>
				HAL_TIM_Base_Start_IT(&htim4);
 800b0e6:	486e      	ldr	r0, [pc, #440]	; (800b2a0 <AnswerToOrder+0xaec>)
				isDacTimerOn = 1;
 800b0e8:	f8c8 6000 	str.w	r6, [r8]
				HAL_TIM_Base_Start_IT(&htim4);
 800b0ec:	f7f8 f980 	bl	80033f0 <HAL_TIM_Base_Start_IT>
 800b0f0:	f7ff bb9b 	b.w	800a82a <AnswerToOrder+0x76>
				es->p->payload = "err.Valid values:>0\r";
 800b0f4:	68a3      	ldr	r3, [r4, #8]
 800b0f6:	4a71      	ldr	r2, [pc, #452]	; (800b2bc <AnswerToOrder+0xb08>)
 800b0f8:	f7ff bb6d 	b.w	800a7d6 <AnswerToOrder+0x22>
			es->p->payload = "err.number of inputs:1\r";
 800b0fc:	68a3      	ldr	r3, [r4, #8]
 800b0fe:	4a70      	ldr	r2, [pc, #448]	; (800b2c0 <AnswerToOrder+0xb0c>)
 800b100:	f7ff bb69 	b.w	800a7d6 <AnswerToOrder+0x22>
	else if (check(Command,"window "))
 800b104:	496f      	ldr	r1, [pc, #444]	; (800b2c4 <AnswerToOrder+0xb10>)
 800b106:	4640      	mov	r0, r8
 800b108:	f7ff fae6 	bl	800a6d8 <check>
 800b10c:	2800      	cmp	r0, #0
 800b10e:	d039      	beq.n	800b184 <AnswerToOrder+0x9d0>
		int n = GetInputs(Command,inputs);
 800b110:	f107 0108 	add.w	r1, r7, #8
 800b114:	4640      	mov	r0, r8
 800b116:	f7ff faef 	bl	800a6f8 <GetInputs>
		if (n==4)
 800b11a:	2804      	cmp	r0, #4
 800b11c:	f040 80af 	bne.w	800b27e <AnswerToOrder+0xaca>
			__HAL_TIM_DISABLE(&htim4);
 800b120:	4d5f      	ldr	r5, [pc, #380]	; (800b2a0 <AnswerToOrder+0xaec>)
 800b122:	f241 1111 	movw	r1, #4369	; 0x1111
 800b126:	682a      	ldr	r2, [r5, #0]
 800b128:	6a10      	ldr	r0, [r2, #32]
 800b12a:	4208      	tst	r0, r1
 800b12c:	d108      	bne.n	800b140 <AnswerToOrder+0x98c>
 800b12e:	6a11      	ldr	r1, [r2, #32]
 800b130:	f240 4344 	movw	r3, #1092	; 0x444
 800b134:	4219      	tst	r1, r3
 800b136:	d103      	bne.n	800b140 <AnswerToOrder+0x98c>
 800b138:	6813      	ldr	r3, [r2, #0]
 800b13a:	f023 0301 	bic.w	r3, r3, #1
 800b13e:	6013      	str	r3, [r2, #0]
			HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_4);
 800b140:	210c      	movs	r1, #12
 800b142:	4857      	ldr	r0, [pc, #348]	; (800b2a0 <AnswerToOrder+0xaec>)
 800b144:	f7f8 fae4 	bl	8003710 <HAL_TIM_PWM_Stop>
			__HAL_TIM_DISABLE(&htim4);
 800b148:	682b      	ldr	r3, [r5, #0]
 800b14a:	f241 1211 	movw	r2, #4369	; 0x1111
 800b14e:	6a19      	ldr	r1, [r3, #32]
 800b150:	4211      	tst	r1, r2
 800b152:	d108      	bne.n	800b166 <AnswerToOrder+0x9b2>
 800b154:	6a19      	ldr	r1, [r3, #32]
 800b156:	f240 4244 	movw	r2, #1092	; 0x444
 800b15a:	4211      	tst	r1, r2
 800b15c:	d103      	bne.n	800b166 <AnswerToOrder+0x9b2>
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	f022 0201 	bic.w	r2, r2, #1
 800b164:	601a      	str	r2, [r3, #0]
			wix = (uint16_t)inputs[0];
 800b166:	893a      	ldrh	r2, [r7, #8]
 800b168:	4b57      	ldr	r3, [pc, #348]	; (800b2c8 <AnswerToOrder+0xb14>)
 800b16a:	601a      	str	r2, [r3, #0]
		    wiy = (uint16_t)inputs[1];
 800b16c:	89ba      	ldrh	r2, [r7, #12]
 800b16e:	4b57      	ldr	r3, [pc, #348]	; (800b2cc <AnswerToOrder+0xb18>)
 800b170:	601a      	str	r2, [r3, #0]
			wnx = (uint16_t)inputs[2];
 800b172:	8a3a      	ldrh	r2, [r7, #16]
 800b174:	4b56      	ldr	r3, [pc, #344]	; (800b2d0 <AnswerToOrder+0xb1c>)
 800b176:	601a      	str	r2, [r3, #0]
			wny = (uint16_t)inputs[3];
 800b178:	8aba      	ldrh	r2, [r7, #20]
 800b17a:	4b56      	ldr	r3, [pc, #344]	; (800b2d4 <AnswerToOrder+0xb20>)
 800b17c:	601a      	str	r2, [r3, #0]
            windowchanged=1;
 800b17e:	2201      	movs	r2, #1
		            windowchanged=2;
 800b180:	4b55      	ldr	r3, [pc, #340]	; (800b2d8 <AnswerToOrder+0xb24>)
 800b182:	e647      	b.n	800ae14 <AnswerToOrder+0x660>
	else if (check(Command,"winsize "))
 800b184:	4955      	ldr	r1, [pc, #340]	; (800b2dc <AnswerToOrder+0xb28>)
 800b186:	4640      	mov	r0, r8
 800b188:	f7ff faa6 	bl	800a6d8 <check>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	d03e      	beq.n	800b20e <AnswerToOrder+0xa5a>
			int n = GetInputs(Command,inputs);
 800b190:	f107 0108 	add.w	r1, r7, #8
 800b194:	4640      	mov	r0, r8
 800b196:	f7ff faaf 	bl	800a6f8 <GetInputs>
			if (n==1)
 800b19a:	2801      	cmp	r0, #1
 800b19c:	d16f      	bne.n	800b27e <AnswerToOrder+0xaca>
				__HAL_TIM_DISABLE(&htim4);
 800b19e:	4d40      	ldr	r5, [pc, #256]	; (800b2a0 <AnswerToOrder+0xaec>)
 800b1a0:	f241 1111 	movw	r1, #4369	; 0x1111
 800b1a4:	682a      	ldr	r2, [r5, #0]
 800b1a6:	6a10      	ldr	r0, [r2, #32]
 800b1a8:	4208      	tst	r0, r1
 800b1aa:	d108      	bne.n	800b1be <AnswerToOrder+0xa0a>
 800b1ac:	6a11      	ldr	r1, [r2, #32]
 800b1ae:	f240 4344 	movw	r3, #1092	; 0x444
 800b1b2:	4219      	tst	r1, r3
 800b1b4:	d103      	bne.n	800b1be <AnswerToOrder+0xa0a>
 800b1b6:	6813      	ldr	r3, [r2, #0]
 800b1b8:	f023 0301 	bic.w	r3, r3, #1
 800b1bc:	6013      	str	r3, [r2, #0]
				HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_4);
 800b1be:	210c      	movs	r1, #12
 800b1c0:	4837      	ldr	r0, [pc, #220]	; (800b2a0 <AnswerToOrder+0xaec>)
 800b1c2:	f7f8 faa5 	bl	8003710 <HAL_TIM_PWM_Stop>
				__HAL_TIM_DISABLE(&htim4);
 800b1c6:	682b      	ldr	r3, [r5, #0]
 800b1c8:	f241 1211 	movw	r2, #4369	; 0x1111
 800b1cc:	6a19      	ldr	r1, [r3, #32]
 800b1ce:	4211      	tst	r1, r2
 800b1d0:	d108      	bne.n	800b1e4 <AnswerToOrder+0xa30>
 800b1d2:	6a19      	ldr	r1, [r3, #32]
 800b1d4:	f240 4244 	movw	r2, #1092	; 0x444
 800b1d8:	4211      	tst	r1, r2
 800b1da:	d103      	bne.n	800b1e4 <AnswerToOrder+0xa30>
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	f022 0201 	bic.w	r2, r2, #1
 800b1e2:	601a      	str	r2, [r3, #0]
 800b1e4:	893b      	ldrh	r3, [r7, #8]
	            dacrange(xVoltageBuffer,(uint16_t)2047, (uint16_t)2047,512*windowsize);
 800b1e6:	f240 72ff 	movw	r2, #2047	; 0x7ff
				windowsize = (uint16_t)inputs[0];
 800b1ea:	4d3d      	ldr	r5, [pc, #244]	; (800b2e0 <AnswerToOrder+0xb2c>)
	            dacrange(xVoltageBuffer,(uint16_t)2047, (uint16_t)2047,512*windowsize);
 800b1ec:	4611      	mov	r1, r2
 800b1ee:	483d      	ldr	r0, [pc, #244]	; (800b2e4 <AnswerToOrder+0xb30>)
				windowsize = (uint16_t)inputs[0];
 800b1f0:	602b      	str	r3, [r5, #0]
	            dacrange(xVoltageBuffer,(uint16_t)2047, (uint16_t)2047,512*windowsize);
 800b1f2:	682b      	ldr	r3, [r5, #0]
 800b1f4:	025b      	lsls	r3, r3, #9
 800b1f6:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 800b1fa:	f7fd fddb 	bl	8008db4 <dacrange>
	            dacrange(yVoltageBuffer,(uint16_t)2047, (uint16_t)2047,512*windowsize);
 800b1fe:	682b      	ldr	r3, [r5, #0]
 800b200:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b204:	025b      	lsls	r3, r3, #9
 800b206:	4611      	mov	r1, r2
 800b208:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 800b20c:	e597      	b.n	800ad3e <AnswerToOrder+0x58a>
	else if (check(Command,"multiply "))
 800b20e:	4936      	ldr	r1, [pc, #216]	; (800b2e8 <AnswerToOrder+0xb34>)
 800b210:	4640      	mov	r0, r8
 800b212:	f7ff fa61 	bl	800a6d8 <check>
 800b216:	2800      	cmp	r0, #0
 800b218:	d035      	beq.n	800b286 <AnswerToOrder+0xad2>
				int n = GetInputs(Command,inputs);
 800b21a:	f107 0108 	add.w	r1, r7, #8
 800b21e:	4640      	mov	r0, r8
 800b220:	f7ff fa6a 	bl	800a6f8 <GetInputs>
				if (n==1)
 800b224:	2801      	cmp	r0, #1
 800b226:	d12a      	bne.n	800b27e <AnswerToOrder+0xaca>
					__HAL_TIM_DISABLE(&htim4);
 800b228:	4d1d      	ldr	r5, [pc, #116]	; (800b2a0 <AnswerToOrder+0xaec>)
 800b22a:	f241 1111 	movw	r1, #4369	; 0x1111
 800b22e:	682a      	ldr	r2, [r5, #0]
 800b230:	6a10      	ldr	r0, [r2, #32]
 800b232:	4208      	tst	r0, r1
 800b234:	d108      	bne.n	800b248 <AnswerToOrder+0xa94>
 800b236:	6a11      	ldr	r1, [r2, #32]
 800b238:	f240 4344 	movw	r3, #1092	; 0x444
 800b23c:	4219      	tst	r1, r3
 800b23e:	d103      	bne.n	800b248 <AnswerToOrder+0xa94>
 800b240:	6813      	ldr	r3, [r2, #0]
 800b242:	f023 0301 	bic.w	r3, r3, #1
 800b246:	6013      	str	r3, [r2, #0]
					HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_4);
 800b248:	210c      	movs	r1, #12
 800b24a:	4815      	ldr	r0, [pc, #84]	; (800b2a0 <AnswerToOrder+0xaec>)
 800b24c:	f7f8 fa60 	bl	8003710 <HAL_TIM_PWM_Stop>
					__HAL_TIM_DISABLE(&htim4);
 800b250:	682b      	ldr	r3, [r5, #0]
 800b252:	f241 1211 	movw	r2, #4369	; 0x1111
 800b256:	6a19      	ldr	r1, [r3, #32]
 800b258:	4211      	tst	r1, r2
 800b25a:	d108      	bne.n	800b26e <AnswerToOrder+0xaba>
 800b25c:	6a19      	ldr	r1, [r3, #32]
 800b25e:	f240 4244 	movw	r2, #1092	; 0x444
 800b262:	4211      	tst	r1, r2
 800b264:	d103      	bne.n	800b26e <AnswerToOrder+0xaba>
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	f022 0201 	bic.w	r2, r2, #1
 800b26c:	601a      	str	r2, [r3, #0]
 800b26e:	893a      	ldrh	r2, [r7, #8]
					multiply =  (uint16_t)inputs[0];
 800b270:	4b1e      	ldr	r3, [pc, #120]	; (800b2ec <AnswerToOrder+0xb38>)
 800b272:	601a      	str	r2, [r3, #0]
					multiply_count = 1;
 800b274:	2201      	movs	r2, #1
 800b276:	4b1e      	ldr	r3, [pc, #120]	; (800b2f0 <AnswerToOrder+0xb3c>)
 800b278:	601a      	str	r2, [r3, #0]
		            windowchanged=2;
 800b27a:	2202      	movs	r2, #2
 800b27c:	e780      	b.n	800b180 <AnswerToOrder+0x9cc>
					es->p->payload = "err.number of inputs:2\r";
 800b27e:	68a3      	ldr	r3, [r4, #8]
 800b280:	4a1c      	ldr	r2, [pc, #112]	; (800b2f4 <AnswerToOrder+0xb40>)
 800b282:	f7ff baa8 	b.w	800a7d6 <AnswerToOrder+0x22>
		es->p->payload = "err.undefined command\r";
 800b286:	68a3      	ldr	r3, [r4, #8]
 800b288:	4a1b      	ldr	r2, [pc, #108]	; (800b2f8 <AnswerToOrder+0xb44>)
 800b28a:	f7ff baa4 	b.w	800a7d6 <AnswerToOrder+0x22>
					es->p->payload = "err.u2 time out 2s\r";
 800b28e:	68a3      	ldr	r3, [r4, #8]
 800b290:	4a1a      	ldr	r2, [pc, #104]	; (800b2fc <AnswerToOrder+0xb48>)
 800b292:	f7ff baa0 	b.w	800a7d6 <AnswerToOrder+0x22>
					es->p->payload = "err.u6 time out 2s\r";
 800b296:	68a3      	ldr	r3, [r4, #8]
 800b298:	4a19      	ldr	r2, [pc, #100]	; (800b300 <AnswerToOrder+0xb4c>)
 800b29a:	e4dd      	b.n	800ac58 <AnswerToOrder+0x4a4>
 800b29c:	0800bbcd 	.word	0x0800bbcd
 800b2a0:	2000e2e8 	.word	0x2000e2e8
 800b2a4:	20010342 	.word	0x20010342
 800b2a8:	2000ed7c 	.word	0x2000ed7c
 800b2ac:	40020400 	.word	0x40020400
 800b2b0:	200003b8 	.word	0x200003b8
 800b2b4:	20000394 	.word	0x20000394
 800b2b8:	20000398 	.word	0x20000398
 800b2bc:	0800bbd6 	.word	0x0800bbd6
 800b2c0:	0800b9c3 	.word	0x0800b9c3
 800b2c4:	0800bbeb 	.word	0x0800bbeb
 800b2c8:	2000ee88 	.word	0x2000ee88
 800b2cc:	2000ee84 	.word	0x2000ee84
 800b2d0:	2000001c 	.word	0x2000001c
 800b2d4:	20000020 	.word	0x20000020
 800b2d8:	200003d8 	.word	0x200003d8
 800b2dc:	0800bbf3 	.word	0x0800bbf3
 800b2e0:	20000018 	.word	0x20000018
 800b2e4:	2000e528 	.word	0x2000e528
 800b2e8:	0800bbfc 	.word	0x0800bbfc
 800b2ec:	20000010 	.word	0x20000010
 800b2f0:	20000014 	.word	0x20000014
 800b2f4:	0800bb28 	.word	0x0800bb28
 800b2f8:	0800bc06 	.word	0x0800bc06
 800b2fc:	0800bc1d 	.word	0x0800bc1d
 800b300:	0800bc31 	.word	0x0800bc31
 800b304:	200003bc 	.word	0x200003bc

0800b308 <tcp_echoserver_recv>:
{
 800b308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b30c:	4604      	mov	r4, r0
 800b30e:	460f      	mov	r7, r1
HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 800b310:	482e      	ldr	r0, [pc, #184]	; (800b3cc <tcp_echoserver_recv+0xc4>)
 800b312:	2101      	movs	r1, #1
{
 800b314:	461e      	mov	r6, r3
 800b316:	4615      	mov	r5, r2
HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 800b318:	f7f6 fff7 	bl	800230a <HAL_GPIO_TogglePin>
  ans=es;
 800b31c:	4b2c      	ldr	r3, [pc, #176]	; (800b3d0 <tcp_echoserver_recv+0xc8>)
 800b31e:	601c      	str	r4, [r3, #0]
  if (p == NULL)
 800b320:	b9a5      	cbnz	r5, 800b34c <tcp_echoserver_recv+0x44>
      es->state = ES_CLOSING;
 800b322:	2303      	movs	r3, #3
      if(es->p == NULL)
 800b324:	68a6      	ldr	r6, [r4, #8]
      es->state = ES_CLOSING;
 800b326:	7023      	strb	r3, [r4, #0]
      if(es->p == NULL)
 800b328:	b936      	cbnz	r6, 800b338 <tcp_echoserver_recv+0x30>
         tcp_echoserver_connection_close(tpcb, es);
 800b32a:	4621      	mov	r1, r4
 800b32c:	4638      	mov	r0, r7
 800b32e:	f7ff f8a3 	bl	800a478 <tcp_echoserver_connection_close>
}
 800b332:	4630      	mov	r0, r6
 800b334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        	tcp_sent(tpcb, tcp_echoserver_sent);
 800b338:	4926      	ldr	r1, [pc, #152]	; (800b3d4 <tcp_echoserver_recv+0xcc>)
 800b33a:	4638      	mov	r0, r7
 800b33c:	f7fa fa5f 	bl	80057fe <tcp_sent>
        	tcp_echoserver_send(tpcb, es);
 800b340:	4621      	mov	r1, r4
 800b342:	4638      	mov	r0, r7
      ret_err = ERR_OK;
 800b344:	462e      	mov	r6, r5
        	tcp_echoserver_send(tpcb, es);
 800b346:	f7ff f883 	bl	800a450 <tcp_echoserver_send>
 800b34a:	e7f2      	b.n	800b332 <tcp_echoserver_recv+0x2a>
  else if(err != ERR_OK)
 800b34c:	b12e      	cbz	r6, 800b35a <tcp_echoserver_recv+0x52>
      es->p = NULL;
 800b34e:	2300      	movs	r3, #0
 800b350:	60a3      	str	r3, [r4, #8]
    pbuf_free(p);
 800b352:	4628      	mov	r0, r5
 800b354:	f7f9 ffc0 	bl	80052d8 <pbuf_free>
 800b358:	e7eb      	b.n	800b332 <tcp_echoserver_recv+0x2a>
  else if(es->state == ES_ACCEPTED)
 800b35a:	7823      	ldrb	r3, [r4, #0]
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d12e      	bne.n	800b3be <tcp_echoserver_recv+0xb6>
	  flagtcp=1;
 800b360:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800b3ec <tcp_echoserver_recv+0xe4>
     AnswerToOrder((char*)cammand->payload,es);
 800b364:	4621      	mov	r1, r4
	  flagtcp=1;
 800b366:	f8c9 3000 	str.w	r3, [r9]
     cammand=p;
 800b36a:	4b1b      	ldr	r3, [pc, #108]	; (800b3d8 <tcp_echoserver_recv+0xd0>)
     AnswerToOrder((char*)cammand->payload,es);
 800b36c:	6868      	ldr	r0, [r5, #4]
     cammand=p;
 800b36e:	601d      	str	r5, [r3, #0]
     AnswerToOrder((char*)cammand->payload,es);
 800b370:	f7ff fa20 	bl	800a7b4 <AnswerToOrder>
     if ((isUart6 == 1 && isUart6ITMode == 1) || (isUart2 == 1 && isUart2ITMode == 1))
 800b374:	4b19      	ldr	r3, [pc, #100]	; (800b3dc <tcp_echoserver_recv+0xd4>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d103      	bne.n	800b384 <tcp_echoserver_recv+0x7c>
 800b37c:	4b18      	ldr	r3, [pc, #96]	; (800b3e0 <tcp_echoserver_recv+0xd8>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	2b01      	cmp	r3, #1
 800b382:	d011      	beq.n	800b3a8 <tcp_echoserver_recv+0xa0>
 800b384:	4b17      	ldr	r3, [pc, #92]	; (800b3e4 <tcp_echoserver_recv+0xdc>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d103      	bne.n	800b394 <tcp_echoserver_recv+0x8c>
 800b38c:	4b16      	ldr	r3, [pc, #88]	; (800b3e8 <tcp_echoserver_recv+0xe0>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	2b01      	cmp	r3, #1
 800b392:	d009      	beq.n	800b3a8 <tcp_echoserver_recv+0xa0>
        tcp_write(es->pcb,es->p->payload,26, 1);
 800b394:	68a1      	ldr	r1, [r4, #8]
 800b396:	2301      	movs	r3, #1
 800b398:	221a      	movs	r2, #26
 800b39a:	6860      	ldr	r0, [r4, #4]
 800b39c:	6849      	ldr	r1, [r1, #4]
 800b39e:	f7fc f822 	bl	80073e6 <tcp_write>
        tcp_output(es->pcb);
 800b3a2:	6860      	ldr	r0, [r4, #4]
 800b3a4:	f7fc fa54 	bl	8007850 <tcp_output>
     flagtcp=0;
 800b3a8:	f04f 0800 	mov.w	r8, #0
     tcp_recved(tpcb, p->tot_len);
 800b3ac:	8929      	ldrh	r1, [r5, #8]
 800b3ae:	4638      	mov	r0, r7
     flagtcp=0;
 800b3b0:	f8c9 8000 	str.w	r8, [r9]
     tcp_recved(tpcb, p->tot_len);
 800b3b4:	f7fa f9ca 	bl	800574c <tcp_recved>
     es->p = NULL;
 800b3b8:	f8c4 8008 	str.w	r8, [r4, #8]
 800b3bc:	e7c9      	b.n	800b352 <tcp_echoserver_recv+0x4a>
    tcp_recved(tpcb, p->tot_len);
 800b3be:	8929      	ldrh	r1, [r5, #8]
 800b3c0:	4638      	mov	r0, r7
 800b3c2:	f7fa f9c3 	bl	800574c <tcp_recved>
    es->p = NULL;
 800b3c6:	60a6      	str	r6, [r4, #8]
 800b3c8:	e7c3      	b.n	800b352 <tcp_echoserver_recv+0x4a>
 800b3ca:	bf00      	nop
 800b3cc:	40020400 	.word	0x40020400
 800b3d0:	20010368 	.word	0x20010368
 800b3d4:	0800a6b1 	.word	0x0800a6b1
 800b3d8:	20010348 	.word	0x20010348
 800b3dc:	200003d0 	.word	0x200003d0
 800b3e0:	200003d4 	.word	0x200003d4
 800b3e4:	200003c8 	.word	0x200003c8
 800b3e8:	200003cc 	.word	0x200003cc
 800b3ec:	200003b0 	.word	0x200003b0

0800b3f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b3f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b428 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b3f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b3f6:	e003      	b.n	800b400 <LoopCopyDataInit>

0800b3f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b3f8:	4b0c      	ldr	r3, [pc, #48]	; (800b42c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b3fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b3fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b3fe:	3104      	adds	r1, #4

0800b400 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b400:	480b      	ldr	r0, [pc, #44]	; (800b430 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b402:	4b0c      	ldr	r3, [pc, #48]	; (800b434 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b404:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b406:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b408:	d3f6      	bcc.n	800b3f8 <CopyDataInit>
  ldr  r2, =_sbss
 800b40a:	4a0b      	ldr	r2, [pc, #44]	; (800b438 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b40c:	e002      	b.n	800b414 <LoopFillZerobss>

0800b40e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b40e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b410:	f842 3b04 	str.w	r3, [r2], #4

0800b414 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b414:	4b09      	ldr	r3, [pc, #36]	; (800b43c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b416:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b418:	d3f9      	bcc.n	800b40e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800b41a:	f7fe ff3d 	bl	800a298 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b41e:	f000 f815 	bl	800b44c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b422:	f7fd fe73 	bl	800910c <main>
  bx  lr    
 800b426:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b428:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800b42c:	0800bd5c 	.word	0x0800bd5c
  ldr  r0, =_sdata
 800b430:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b434:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 800b438:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 800b43c:	20010390 	.word	0x20010390

0800b440 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b440:	e7fe      	b.n	800b440 <BusFault_Handler>

0800b442 <atoi>:
 800b442:	220a      	movs	r2, #10
 800b444:	2100      	movs	r1, #0
 800b446:	f000 b935 	b.w	800b6b4 <strtol>
	...

0800b44c <__libc_init_array>:
 800b44c:	b570      	push	{r4, r5, r6, lr}
 800b44e:	4e0d      	ldr	r6, [pc, #52]	; (800b484 <__libc_init_array+0x38>)
 800b450:	4c0d      	ldr	r4, [pc, #52]	; (800b488 <__libc_init_array+0x3c>)
 800b452:	1ba4      	subs	r4, r4, r6
 800b454:	10a4      	asrs	r4, r4, #2
 800b456:	2500      	movs	r5, #0
 800b458:	42a5      	cmp	r5, r4
 800b45a:	d109      	bne.n	800b470 <__libc_init_array+0x24>
 800b45c:	4e0b      	ldr	r6, [pc, #44]	; (800b48c <__libc_init_array+0x40>)
 800b45e:	4c0c      	ldr	r4, [pc, #48]	; (800b490 <__libc_init_array+0x44>)
 800b460:	f000 f9e8 	bl	800b834 <_init>
 800b464:	1ba4      	subs	r4, r4, r6
 800b466:	10a4      	asrs	r4, r4, #2
 800b468:	2500      	movs	r5, #0
 800b46a:	42a5      	cmp	r5, r4
 800b46c:	d105      	bne.n	800b47a <__libc_init_array+0x2e>
 800b46e:	bd70      	pop	{r4, r5, r6, pc}
 800b470:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b474:	4798      	blx	r3
 800b476:	3501      	adds	r5, #1
 800b478:	e7ee      	b.n	800b458 <__libc_init_array+0xc>
 800b47a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b47e:	4798      	blx	r3
 800b480:	3501      	adds	r5, #1
 800b482:	e7f2      	b.n	800b46a <__libc_init_array+0x1e>
 800b484:	0800bd54 	.word	0x0800bd54
 800b488:	0800bd54 	.word	0x0800bd54
 800b48c:	0800bd54 	.word	0x0800bd54
 800b490:	0800bd58 	.word	0x0800bd58

0800b494 <memcmp>:
 800b494:	b510      	push	{r4, lr}
 800b496:	3901      	subs	r1, #1
 800b498:	4402      	add	r2, r0
 800b49a:	4290      	cmp	r0, r2
 800b49c:	d101      	bne.n	800b4a2 <memcmp+0xe>
 800b49e:	2000      	movs	r0, #0
 800b4a0:	bd10      	pop	{r4, pc}
 800b4a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b4a6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b4aa:	42a3      	cmp	r3, r4
 800b4ac:	d0f5      	beq.n	800b49a <memcmp+0x6>
 800b4ae:	1b18      	subs	r0, r3, r4
 800b4b0:	bd10      	pop	{r4, pc}

0800b4b2 <memcpy>:
 800b4b2:	b510      	push	{r4, lr}
 800b4b4:	1e43      	subs	r3, r0, #1
 800b4b6:	440a      	add	r2, r1
 800b4b8:	4291      	cmp	r1, r2
 800b4ba:	d100      	bne.n	800b4be <memcpy+0xc>
 800b4bc:	bd10      	pop	{r4, pc}
 800b4be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4c6:	e7f7      	b.n	800b4b8 <memcpy+0x6>

0800b4c8 <memset>:
 800b4c8:	4402      	add	r2, r0
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d100      	bne.n	800b4d2 <memset+0xa>
 800b4d0:	4770      	bx	lr
 800b4d2:	f803 1b01 	strb.w	r1, [r3], #1
 800b4d6:	e7f9      	b.n	800b4cc <memset+0x4>

0800b4d8 <strcpy>:
 800b4d8:	4603      	mov	r3, r0
 800b4da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4de:	f803 2b01 	strb.w	r2, [r3], #1
 800b4e2:	2a00      	cmp	r2, #0
 800b4e4:	d1f9      	bne.n	800b4da <strcpy+0x2>
 800b4e6:	4770      	bx	lr

0800b4e8 <strncmp>:
 800b4e8:	b510      	push	{r4, lr}
 800b4ea:	b16a      	cbz	r2, 800b508 <strncmp+0x20>
 800b4ec:	3901      	subs	r1, #1
 800b4ee:	1884      	adds	r4, r0, r2
 800b4f0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b4f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d103      	bne.n	800b504 <strncmp+0x1c>
 800b4fc:	42a0      	cmp	r0, r4
 800b4fe:	d001      	beq.n	800b504 <strncmp+0x1c>
 800b500:	2b00      	cmp	r3, #0
 800b502:	d1f5      	bne.n	800b4f0 <strncmp+0x8>
 800b504:	1a98      	subs	r0, r3, r2
 800b506:	bd10      	pop	{r4, pc}
 800b508:	4610      	mov	r0, r2
 800b50a:	bd10      	pop	{r4, pc}

0800b50c <strtok>:
 800b50c:	4b13      	ldr	r3, [pc, #76]	; (800b55c <strtok+0x50>)
 800b50e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b512:	681d      	ldr	r5, [r3, #0]
 800b514:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800b516:	4606      	mov	r6, r0
 800b518:	460f      	mov	r7, r1
 800b51a:	b9b4      	cbnz	r4, 800b54a <strtok+0x3e>
 800b51c:	2050      	movs	r0, #80	; 0x50
 800b51e:	f000 f8e3 	bl	800b6e8 <malloc>
 800b522:	65a8      	str	r0, [r5, #88]	; 0x58
 800b524:	6004      	str	r4, [r0, #0]
 800b526:	6044      	str	r4, [r0, #4]
 800b528:	6084      	str	r4, [r0, #8]
 800b52a:	60c4      	str	r4, [r0, #12]
 800b52c:	6104      	str	r4, [r0, #16]
 800b52e:	6144      	str	r4, [r0, #20]
 800b530:	6184      	str	r4, [r0, #24]
 800b532:	6284      	str	r4, [r0, #40]	; 0x28
 800b534:	62c4      	str	r4, [r0, #44]	; 0x2c
 800b536:	6304      	str	r4, [r0, #48]	; 0x30
 800b538:	6344      	str	r4, [r0, #52]	; 0x34
 800b53a:	6384      	str	r4, [r0, #56]	; 0x38
 800b53c:	63c4      	str	r4, [r0, #60]	; 0x3c
 800b53e:	6404      	str	r4, [r0, #64]	; 0x40
 800b540:	6444      	str	r4, [r0, #68]	; 0x44
 800b542:	6484      	str	r4, [r0, #72]	; 0x48
 800b544:	64c4      	str	r4, [r0, #76]	; 0x4c
 800b546:	7704      	strb	r4, [r0, #28]
 800b548:	6244      	str	r4, [r0, #36]	; 0x24
 800b54a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800b54c:	4639      	mov	r1, r7
 800b54e:	4630      	mov	r0, r6
 800b550:	2301      	movs	r3, #1
 800b552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b556:	f000 b803 	b.w	800b560 <__strtok_r>
 800b55a:	bf00      	nop
 800b55c:	20000028 	.word	0x20000028

0800b560 <__strtok_r>:
 800b560:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b562:	b918      	cbnz	r0, 800b56c <__strtok_r+0xc>
 800b564:	6810      	ldr	r0, [r2, #0]
 800b566:	b908      	cbnz	r0, 800b56c <__strtok_r+0xc>
 800b568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b56a:	4620      	mov	r0, r4
 800b56c:	4604      	mov	r4, r0
 800b56e:	460f      	mov	r7, r1
 800b570:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b574:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b578:	b91e      	cbnz	r6, 800b582 <__strtok_r+0x22>
 800b57a:	b965      	cbnz	r5, 800b596 <__strtok_r+0x36>
 800b57c:	6015      	str	r5, [r2, #0]
 800b57e:	4628      	mov	r0, r5
 800b580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b582:	42b5      	cmp	r5, r6
 800b584:	d1f6      	bne.n	800b574 <__strtok_r+0x14>
 800b586:	2b00      	cmp	r3, #0
 800b588:	d1ef      	bne.n	800b56a <__strtok_r+0xa>
 800b58a:	6014      	str	r4, [r2, #0]
 800b58c:	7003      	strb	r3, [r0, #0]
 800b58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b590:	461c      	mov	r4, r3
 800b592:	e00c      	b.n	800b5ae <__strtok_r+0x4e>
 800b594:	b915      	cbnz	r5, 800b59c <__strtok_r+0x3c>
 800b596:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b59a:	460e      	mov	r6, r1
 800b59c:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b5a0:	42ab      	cmp	r3, r5
 800b5a2:	d1f7      	bne.n	800b594 <__strtok_r+0x34>
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d0f3      	beq.n	800b590 <__strtok_r+0x30>
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b5ae:	6014      	str	r4, [r2, #0]
 800b5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b5b2 <_strtol_l.isra.0>:
 800b5b2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b6:	4680      	mov	r8, r0
 800b5b8:	4689      	mov	r9, r1
 800b5ba:	4692      	mov	sl, r2
 800b5bc:	461f      	mov	r7, r3
 800b5be:	468b      	mov	fp, r1
 800b5c0:	465d      	mov	r5, fp
 800b5c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b5c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5c8:	f000 f88a 	bl	800b6e0 <__locale_ctype_ptr_l>
 800b5cc:	4420      	add	r0, r4
 800b5ce:	7846      	ldrb	r6, [r0, #1]
 800b5d0:	f016 0608 	ands.w	r6, r6, #8
 800b5d4:	d10b      	bne.n	800b5ee <_strtol_l.isra.0+0x3c>
 800b5d6:	2c2d      	cmp	r4, #45	; 0x2d
 800b5d8:	d10b      	bne.n	800b5f2 <_strtol_l.isra.0+0x40>
 800b5da:	782c      	ldrb	r4, [r5, #0]
 800b5dc:	2601      	movs	r6, #1
 800b5de:	f10b 0502 	add.w	r5, fp, #2
 800b5e2:	b167      	cbz	r7, 800b5fe <_strtol_l.isra.0+0x4c>
 800b5e4:	2f10      	cmp	r7, #16
 800b5e6:	d114      	bne.n	800b612 <_strtol_l.isra.0+0x60>
 800b5e8:	2c30      	cmp	r4, #48	; 0x30
 800b5ea:	d00a      	beq.n	800b602 <_strtol_l.isra.0+0x50>
 800b5ec:	e011      	b.n	800b612 <_strtol_l.isra.0+0x60>
 800b5ee:	46ab      	mov	fp, r5
 800b5f0:	e7e6      	b.n	800b5c0 <_strtol_l.isra.0+0xe>
 800b5f2:	2c2b      	cmp	r4, #43	; 0x2b
 800b5f4:	bf04      	itt	eq
 800b5f6:	782c      	ldrbeq	r4, [r5, #0]
 800b5f8:	f10b 0502 	addeq.w	r5, fp, #2
 800b5fc:	e7f1      	b.n	800b5e2 <_strtol_l.isra.0+0x30>
 800b5fe:	2c30      	cmp	r4, #48	; 0x30
 800b600:	d127      	bne.n	800b652 <_strtol_l.isra.0+0xa0>
 800b602:	782b      	ldrb	r3, [r5, #0]
 800b604:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b608:	2b58      	cmp	r3, #88	; 0x58
 800b60a:	d14b      	bne.n	800b6a4 <_strtol_l.isra.0+0xf2>
 800b60c:	786c      	ldrb	r4, [r5, #1]
 800b60e:	2710      	movs	r7, #16
 800b610:	3502      	adds	r5, #2
 800b612:	2e00      	cmp	r6, #0
 800b614:	bf0c      	ite	eq
 800b616:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b61a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b61e:	2200      	movs	r2, #0
 800b620:	fbb1 fef7 	udiv	lr, r1, r7
 800b624:	4610      	mov	r0, r2
 800b626:	fb07 1c1e 	mls	ip, r7, lr, r1
 800b62a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b62e:	2b09      	cmp	r3, #9
 800b630:	d811      	bhi.n	800b656 <_strtol_l.isra.0+0xa4>
 800b632:	461c      	mov	r4, r3
 800b634:	42a7      	cmp	r7, r4
 800b636:	dd1d      	ble.n	800b674 <_strtol_l.isra.0+0xc2>
 800b638:	1c53      	adds	r3, r2, #1
 800b63a:	d007      	beq.n	800b64c <_strtol_l.isra.0+0x9a>
 800b63c:	4586      	cmp	lr, r0
 800b63e:	d316      	bcc.n	800b66e <_strtol_l.isra.0+0xbc>
 800b640:	d101      	bne.n	800b646 <_strtol_l.isra.0+0x94>
 800b642:	45a4      	cmp	ip, r4
 800b644:	db13      	blt.n	800b66e <_strtol_l.isra.0+0xbc>
 800b646:	fb00 4007 	mla	r0, r0, r7, r4
 800b64a:	2201      	movs	r2, #1
 800b64c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b650:	e7eb      	b.n	800b62a <_strtol_l.isra.0+0x78>
 800b652:	270a      	movs	r7, #10
 800b654:	e7dd      	b.n	800b612 <_strtol_l.isra.0+0x60>
 800b656:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b65a:	2b19      	cmp	r3, #25
 800b65c:	d801      	bhi.n	800b662 <_strtol_l.isra.0+0xb0>
 800b65e:	3c37      	subs	r4, #55	; 0x37
 800b660:	e7e8      	b.n	800b634 <_strtol_l.isra.0+0x82>
 800b662:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b666:	2b19      	cmp	r3, #25
 800b668:	d804      	bhi.n	800b674 <_strtol_l.isra.0+0xc2>
 800b66a:	3c57      	subs	r4, #87	; 0x57
 800b66c:	e7e2      	b.n	800b634 <_strtol_l.isra.0+0x82>
 800b66e:	f04f 32ff 	mov.w	r2, #4294967295
 800b672:	e7eb      	b.n	800b64c <_strtol_l.isra.0+0x9a>
 800b674:	1c53      	adds	r3, r2, #1
 800b676:	d108      	bne.n	800b68a <_strtol_l.isra.0+0xd8>
 800b678:	2322      	movs	r3, #34	; 0x22
 800b67a:	f8c8 3000 	str.w	r3, [r8]
 800b67e:	4608      	mov	r0, r1
 800b680:	f1ba 0f00 	cmp.w	sl, #0
 800b684:	d107      	bne.n	800b696 <_strtol_l.isra.0+0xe4>
 800b686:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b68a:	b106      	cbz	r6, 800b68e <_strtol_l.isra.0+0xdc>
 800b68c:	4240      	negs	r0, r0
 800b68e:	f1ba 0f00 	cmp.w	sl, #0
 800b692:	d00c      	beq.n	800b6ae <_strtol_l.isra.0+0xfc>
 800b694:	b122      	cbz	r2, 800b6a0 <_strtol_l.isra.0+0xee>
 800b696:	3d01      	subs	r5, #1
 800b698:	f8ca 5000 	str.w	r5, [sl]
 800b69c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6a0:	464d      	mov	r5, r9
 800b6a2:	e7f9      	b.n	800b698 <_strtol_l.isra.0+0xe6>
 800b6a4:	2430      	movs	r4, #48	; 0x30
 800b6a6:	2f00      	cmp	r7, #0
 800b6a8:	d1b3      	bne.n	800b612 <_strtol_l.isra.0+0x60>
 800b6aa:	2708      	movs	r7, #8
 800b6ac:	e7b1      	b.n	800b612 <_strtol_l.isra.0+0x60>
 800b6ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b6b4 <strtol>:
 800b6b4:	4b08      	ldr	r3, [pc, #32]	; (800b6d8 <strtol+0x24>)
 800b6b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6b8:	681c      	ldr	r4, [r3, #0]
 800b6ba:	4d08      	ldr	r5, [pc, #32]	; (800b6dc <strtol+0x28>)
 800b6bc:	6a23      	ldr	r3, [r4, #32]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	bf08      	it	eq
 800b6c2:	462b      	moveq	r3, r5
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	460a      	mov	r2, r1
 800b6ca:	4601      	mov	r1, r0
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	f7ff ff70 	bl	800b5b2 <_strtol_l.isra.0>
 800b6d2:	b003      	add	sp, #12
 800b6d4:	bd30      	pop	{r4, r5, pc}
 800b6d6:	bf00      	nop
 800b6d8:	20000028 	.word	0x20000028
 800b6dc:	2000008c 	.word	0x2000008c

0800b6e0 <__locale_ctype_ptr_l>:
 800b6e0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b6e4:	4770      	bx	lr
	...

0800b6e8 <malloc>:
 800b6e8:	4b02      	ldr	r3, [pc, #8]	; (800b6f4 <malloc+0xc>)
 800b6ea:	4601      	mov	r1, r0
 800b6ec:	6818      	ldr	r0, [r3, #0]
 800b6ee:	f000 b815 	b.w	800b71c <_malloc_r>
 800b6f2:	bf00      	nop
 800b6f4:	20000028 	.word	0x20000028

0800b6f8 <__ascii_mbtowc>:
 800b6f8:	b082      	sub	sp, #8
 800b6fa:	b901      	cbnz	r1, 800b6fe <__ascii_mbtowc+0x6>
 800b6fc:	a901      	add	r1, sp, #4
 800b6fe:	b142      	cbz	r2, 800b712 <__ascii_mbtowc+0x1a>
 800b700:	b14b      	cbz	r3, 800b716 <__ascii_mbtowc+0x1e>
 800b702:	7813      	ldrb	r3, [r2, #0]
 800b704:	600b      	str	r3, [r1, #0]
 800b706:	7812      	ldrb	r2, [r2, #0]
 800b708:	1c10      	adds	r0, r2, #0
 800b70a:	bf18      	it	ne
 800b70c:	2001      	movne	r0, #1
 800b70e:	b002      	add	sp, #8
 800b710:	4770      	bx	lr
 800b712:	4610      	mov	r0, r2
 800b714:	e7fb      	b.n	800b70e <__ascii_mbtowc+0x16>
 800b716:	f06f 0001 	mvn.w	r0, #1
 800b71a:	e7f8      	b.n	800b70e <__ascii_mbtowc+0x16>

0800b71c <_malloc_r>:
 800b71c:	b570      	push	{r4, r5, r6, lr}
 800b71e:	1ccd      	adds	r5, r1, #3
 800b720:	f025 0503 	bic.w	r5, r5, #3
 800b724:	3508      	adds	r5, #8
 800b726:	2d0c      	cmp	r5, #12
 800b728:	bf38      	it	cc
 800b72a:	250c      	movcc	r5, #12
 800b72c:	2d00      	cmp	r5, #0
 800b72e:	4606      	mov	r6, r0
 800b730:	db01      	blt.n	800b736 <_malloc_r+0x1a>
 800b732:	42a9      	cmp	r1, r5
 800b734:	d903      	bls.n	800b73e <_malloc_r+0x22>
 800b736:	230c      	movs	r3, #12
 800b738:	6033      	str	r3, [r6, #0]
 800b73a:	2000      	movs	r0, #0
 800b73c:	bd70      	pop	{r4, r5, r6, pc}
 800b73e:	f000 f868 	bl	800b812 <__malloc_lock>
 800b742:	4a23      	ldr	r2, [pc, #140]	; (800b7d0 <_malloc_r+0xb4>)
 800b744:	6814      	ldr	r4, [r2, #0]
 800b746:	4621      	mov	r1, r4
 800b748:	b991      	cbnz	r1, 800b770 <_malloc_r+0x54>
 800b74a:	4c22      	ldr	r4, [pc, #136]	; (800b7d4 <_malloc_r+0xb8>)
 800b74c:	6823      	ldr	r3, [r4, #0]
 800b74e:	b91b      	cbnz	r3, 800b758 <_malloc_r+0x3c>
 800b750:	4630      	mov	r0, r6
 800b752:	f000 f841 	bl	800b7d8 <_sbrk_r>
 800b756:	6020      	str	r0, [r4, #0]
 800b758:	4629      	mov	r1, r5
 800b75a:	4630      	mov	r0, r6
 800b75c:	f000 f83c 	bl	800b7d8 <_sbrk_r>
 800b760:	1c43      	adds	r3, r0, #1
 800b762:	d126      	bne.n	800b7b2 <_malloc_r+0x96>
 800b764:	230c      	movs	r3, #12
 800b766:	6033      	str	r3, [r6, #0]
 800b768:	4630      	mov	r0, r6
 800b76a:	f000 f853 	bl	800b814 <__malloc_unlock>
 800b76e:	e7e4      	b.n	800b73a <_malloc_r+0x1e>
 800b770:	680b      	ldr	r3, [r1, #0]
 800b772:	1b5b      	subs	r3, r3, r5
 800b774:	d41a      	bmi.n	800b7ac <_malloc_r+0x90>
 800b776:	2b0b      	cmp	r3, #11
 800b778:	d90f      	bls.n	800b79a <_malloc_r+0x7e>
 800b77a:	600b      	str	r3, [r1, #0]
 800b77c:	50cd      	str	r5, [r1, r3]
 800b77e:	18cc      	adds	r4, r1, r3
 800b780:	4630      	mov	r0, r6
 800b782:	f000 f847 	bl	800b814 <__malloc_unlock>
 800b786:	f104 000b 	add.w	r0, r4, #11
 800b78a:	1d23      	adds	r3, r4, #4
 800b78c:	f020 0007 	bic.w	r0, r0, #7
 800b790:	1ac3      	subs	r3, r0, r3
 800b792:	d01b      	beq.n	800b7cc <_malloc_r+0xb0>
 800b794:	425a      	negs	r2, r3
 800b796:	50e2      	str	r2, [r4, r3]
 800b798:	bd70      	pop	{r4, r5, r6, pc}
 800b79a:	428c      	cmp	r4, r1
 800b79c:	bf0d      	iteet	eq
 800b79e:	6863      	ldreq	r3, [r4, #4]
 800b7a0:	684b      	ldrne	r3, [r1, #4]
 800b7a2:	6063      	strne	r3, [r4, #4]
 800b7a4:	6013      	streq	r3, [r2, #0]
 800b7a6:	bf18      	it	ne
 800b7a8:	460c      	movne	r4, r1
 800b7aa:	e7e9      	b.n	800b780 <_malloc_r+0x64>
 800b7ac:	460c      	mov	r4, r1
 800b7ae:	6849      	ldr	r1, [r1, #4]
 800b7b0:	e7ca      	b.n	800b748 <_malloc_r+0x2c>
 800b7b2:	1cc4      	adds	r4, r0, #3
 800b7b4:	f024 0403 	bic.w	r4, r4, #3
 800b7b8:	42a0      	cmp	r0, r4
 800b7ba:	d005      	beq.n	800b7c8 <_malloc_r+0xac>
 800b7bc:	1a21      	subs	r1, r4, r0
 800b7be:	4630      	mov	r0, r6
 800b7c0:	f000 f80a 	bl	800b7d8 <_sbrk_r>
 800b7c4:	3001      	adds	r0, #1
 800b7c6:	d0cd      	beq.n	800b764 <_malloc_r+0x48>
 800b7c8:	6025      	str	r5, [r4, #0]
 800b7ca:	e7d9      	b.n	800b780 <_malloc_r+0x64>
 800b7cc:	bd70      	pop	{r4, r5, r6, pc}
 800b7ce:	bf00      	nop
 800b7d0:	200003e8 	.word	0x200003e8
 800b7d4:	200003ec 	.word	0x200003ec

0800b7d8 <_sbrk_r>:
 800b7d8:	b538      	push	{r3, r4, r5, lr}
 800b7da:	4c06      	ldr	r4, [pc, #24]	; (800b7f4 <_sbrk_r+0x1c>)
 800b7dc:	2300      	movs	r3, #0
 800b7de:	4605      	mov	r5, r0
 800b7e0:	4608      	mov	r0, r1
 800b7e2:	6023      	str	r3, [r4, #0]
 800b7e4:	f000 f818 	bl	800b818 <_sbrk>
 800b7e8:	1c43      	adds	r3, r0, #1
 800b7ea:	d102      	bne.n	800b7f2 <_sbrk_r+0x1a>
 800b7ec:	6823      	ldr	r3, [r4, #0]
 800b7ee:	b103      	cbz	r3, 800b7f2 <_sbrk_r+0x1a>
 800b7f0:	602b      	str	r3, [r5, #0]
 800b7f2:	bd38      	pop	{r3, r4, r5, pc}
 800b7f4:	2001038c 	.word	0x2001038c

0800b7f8 <__ascii_wctomb>:
 800b7f8:	b149      	cbz	r1, 800b80e <__ascii_wctomb+0x16>
 800b7fa:	2aff      	cmp	r2, #255	; 0xff
 800b7fc:	bf85      	ittet	hi
 800b7fe:	238a      	movhi	r3, #138	; 0x8a
 800b800:	6003      	strhi	r3, [r0, #0]
 800b802:	700a      	strbls	r2, [r1, #0]
 800b804:	f04f 30ff 	movhi.w	r0, #4294967295
 800b808:	bf98      	it	ls
 800b80a:	2001      	movls	r0, #1
 800b80c:	4770      	bx	lr
 800b80e:	4608      	mov	r0, r1
 800b810:	4770      	bx	lr

0800b812 <__malloc_lock>:
 800b812:	4770      	bx	lr

0800b814 <__malloc_unlock>:
 800b814:	4770      	bx	lr
	...

0800b818 <_sbrk>:
 800b818:	4b04      	ldr	r3, [pc, #16]	; (800b82c <_sbrk+0x14>)
 800b81a:	6819      	ldr	r1, [r3, #0]
 800b81c:	4602      	mov	r2, r0
 800b81e:	b909      	cbnz	r1, 800b824 <_sbrk+0xc>
 800b820:	4903      	ldr	r1, [pc, #12]	; (800b830 <_sbrk+0x18>)
 800b822:	6019      	str	r1, [r3, #0]
 800b824:	6818      	ldr	r0, [r3, #0]
 800b826:	4402      	add	r2, r0
 800b828:	601a      	str	r2, [r3, #0]
 800b82a:	4770      	bx	lr
 800b82c:	200003f0 	.word	0x200003f0
 800b830:	20010390 	.word	0x20010390

0800b834 <_init>:
 800b834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b836:	bf00      	nop
 800b838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b83a:	bc08      	pop	{r3}
 800b83c:	469e      	mov	lr, r3
 800b83e:	4770      	bx	lr

0800b840 <_fini>:
 800b840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b842:	bf00      	nop
 800b844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b846:	bc08      	pop	{r3}
 800b848:	469e      	mov	lr, r3
 800b84a:	4770      	bx	lr
